MATLAB/canonical.c:68:7: style: The scope of the variable 'k' can be reduced. [variableScope]
  int k = 0;
      ^
MATLAB/canonical.c:68:9: style: Variable 'k' is assigned a value that is never used. [unreadVariable]
  int k = 0;
        ^
MATLAB/software/LINE/linux/concatenate.cpp:91:3: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  fscanf(fi, "%s", name);
  ^
MATLAB/software/LINE/linux/concatenate.cpp:112:3: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  fscanf(fi, "%s", name);
  ^
MATLAB/software/LINE/linux/concatenate.cpp:133:9: style: The scope of the variable 'len' can be reduced. [variableScope]
 double len;
        ^
MATLAB/software/LINE/linux/concatenate.cpp:92:6: style: Variable 'ch' is assigned a value that is never used. [unreadVariable]
  ch = fgetc(fi);
     ^
MATLAB/software/LINE/linux/concatenate.cpp:113:6: style: Variable 'ch' is assigned a value that is never used. [unreadVariable]
  ch = fgetc(fi);
     ^
MATLAB/software/LINE/linux/line.cpp:145:3: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  fscanf(fin, "%s %s %lf", name_v1, name_v2, &weight);
  ^
MATLAB/software/LINE/linux/line.cpp:107:3: error: Common realloc mistake: 'vertex' nulled but not freed upon failure [memleakOnRealloc]
  vertex = (struct ClassVertex *)realloc(vertex, max_num_vertices * sizeof(struct ClassVertex));
  ^
MATLAB/software/LINE/linux/line.cpp:241:4: style: Variable 'a' is reassigned a value before the old one has been used. [redundantAssignment]
 a = posix_memalign((void **)&emb_context, 128, (long long)num_vertices * dim * sizeof(real));
   ^
MATLAB/software/LINE/linux/line.cpp:236:4: note: a is assigned
 a = posix_memalign((void **)&emb_vertex, 128, (long long)num_vertices * dim * sizeof(real));
   ^
MATLAB/software/LINE/linux/line.cpp:241:4: note: a is overwritten
 a = posix_memalign((void **)&emb_context, 128, (long long)num_vertices * dim * sizeof(real));
   ^
MATLAB/software/LINE/linux/line.cpp:118:6: style: The scope of the variable 'vid' can be reduced. [variableScope]
 int vid;
     ^
MATLAB/software/LINE/linux/line.cpp:190:12: style: The scope of the variable 'cur_small_block' can be reduced. [variableScope]
 long long cur_small_block, cur_large_block;
           ^
MATLAB/software/LINE/linux/line.cpp:190:29: style: The scope of the variable 'cur_large_block' can be reduced. [variableScope]
 long long cur_small_block, cur_large_block;
                            ^
MATLAB/software/LINE/linux/line.cpp:269:7: style: The scope of the variable 'x' can be reduced. [variableScope]
 real x;
      ^
MATLAB/software/LINE/linux/line.cpp:305:12: style: The scope of the variable 'u' can be reduced. [variableScope]
 long long u, v, lu, lv, target, label;
           ^
MATLAB/software/LINE/linux/line.cpp:305:15: style: The scope of the variable 'v' can be reduced. [variableScope]
 long long u, v, lu, lv, target, label;
              ^
MATLAB/software/LINE/linux/line.cpp:305:18: style: The scope of the variable 'lu' can be reduced. [variableScope]
 long long u, v, lu, lv, target, label;
                 ^
MATLAB/software/LINE/linux/line.cpp:306:39: style: The scope of the variable 'curedge' can be reduced. [variableScope]
 long long count = 0, last_count = 0, curedge;
                                      ^
MATLAB/software/LINE/linux/line.cpp:241:4: style: Variable 'a' is assigned a value that is never used. [unreadVariable]
 a = posix_memalign((void **)&emb_context, 128, (long long)num_vertices * dim * sizeof(real));
   ^
MATLAB/software/LINE/linux/normalize.cpp:31:3: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  fscanf(fi, "%s%c", name, &ch);
  ^
MATLAB/software/LINE/linux/normalize.cpp:19:9: style: The scope of the variable 'len' can be reduced. [variableScope]
 double len;
        ^
MATLAB/software/LINE/linux/reconstruct.cpp:125:3: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  fscanf(fin, "%s %s %lf", name_v1, name_v2, &weight);
  ^
MATLAB/software/LINE/linux/reconstruct.cpp:150:3: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  fscanf(fin, "%s %s %lf", name_v1, name_v2, &weight);
  ^
MATLAB/software/LINE/linux/reconstruct.cpp:95:3: error: Common realloc mistake: 'vertex' nulled but not freed upon failure [memleakOnRealloc]
  vertex = (struct ClassVertex *)realloc(vertex, max_num_vertices * sizeof(struct ClassVertex));
  ^
MATLAB/software/LINE/linux/reconstruct.cpp:145:14: style: C-style pointer casting [cstyleCast]
 rank_list = (Neighbor *)calloc(num_vertices, sizeof(Neighbor));
             ^
MATLAB/software/LINE/linux/reconstruct.cpp:106:6: style: The scope of the variable 'vid' can be reduced. [variableScope]
 int vid, u, v;
     ^
MATLAB/software/LINE/linux/reconstruct.cpp:106:11: style: The scope of the variable 'u' can be reduced. [variableScope]
 int vid, u, v;
          ^
MATLAB/software/LINE/linux/reconstruct.cpp:106:14: style: The scope of the variable 'v' can be reduced. [variableScope]
 int vid, u, v;
             ^
MATLAB/software/LINE/linux/reconstruct.cpp:182:18: style: The scope of the variable 'len' can be reduced. [variableScope]
 int sv, cv, cd, len, pst;
                 ^
MATLAB/software/LINE/linux/reconstruct.cpp:218:7: style: Variable 'len' is assigned a value that is never used. [unreadVariable]
  len = neighbor[sv].size();
      ^
MATLAB/software/LINE/linux/reconstruct.cpp:253:61: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for (iter = vid2weight.begin(); iter != vid2weight.end(); iter++)
                                                            ^
MATLAB/software/LINE/windows/concatenate.cpp:91:3: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  fscanf(fi, "%s", name);
  ^
MATLAB/software/LINE/windows/concatenate.cpp:112:3: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  fscanf(fi, "%s", name);
  ^
MATLAB/software/LINE/windows/concatenate.cpp:133:9: style: The scope of the variable 'len' can be reduced. [variableScope]
 double len;
        ^
MATLAB/software/LINE/windows/concatenate.cpp:92:6: style: Variable 'ch' is assigned a value that is never used. [unreadVariable]
  ch = fgetc(fi);
     ^
MATLAB/software/LINE/windows/concatenate.cpp:113:6: style: Variable 'ch' is assigned a value that is never used. [unreadVariable]
  ch = fgetc(fi);
     ^
MATLAB/software/LINE/windows/line.cpp:176:2: warning: %lld in format string (no. 1) requires 'long long' but the argument type is 'signed int'. [invalidPrintfArgType_sint]
 printf("Number of vertices: %lld          \n", num_vertices);
 ^
MATLAB/software/LINE/windows/line.cpp:155:3: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  fscanf(fin, "%s %s %lf", name_v1, name_v2, &weight);
  ^
MATLAB/software/LINE/windows/line.cpp:117:3: error: Common realloc mistake: 'vertex' nulled but not freed upon failure [memleakOnRealloc]
  vertex = (struct ClassVertex *)realloc(vertex, max_num_vertices * sizeof(struct ClassVertex));
  ^
MATLAB/software/LINE/windows/line.cpp:128:6: style: The scope of the variable 'vid' can be reduced. [variableScope]
 int vid;
     ^
MATLAB/software/LINE/windows/line.cpp:200:12: style: The scope of the variable 'cur_small_block' can be reduced. [variableScope]
 long long cur_small_block, cur_large_block;
           ^
MATLAB/software/LINE/windows/line.cpp:200:29: style: The scope of the variable 'cur_large_block' can be reduced. [variableScope]
 long long cur_small_block, cur_large_block;
                            ^
MATLAB/software/LINE/windows/line.cpp:279:7: style: The scope of the variable 'x' can be reduced. [variableScope]
 real x;
      ^
MATLAB/software/LINE/windows/line.cpp:315:12: style: The scope of the variable 'u' can be reduced. [variableScope]
 long long u, v, lu, lv, target, label;
           ^
MATLAB/software/LINE/windows/line.cpp:315:15: style: The scope of the variable 'v' can be reduced. [variableScope]
 long long u, v, lu, lv, target, label;
              ^
MATLAB/software/LINE/windows/line.cpp:315:18: style: The scope of the variable 'lu' can be reduced. [variableScope]
 long long u, v, lu, lv, target, label;
                 ^
MATLAB/software/LINE/windows/line.cpp:316:39: style: The scope of the variable 'curedge' can be reduced. [variableScope]
 long long count = 0, last_count = 0, curedge;
                                      ^
MATLAB/software/LINE/windows/normalize.cpp:31:3: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  fscanf(fi, "%s%c", name, &ch);
  ^
MATLAB/software/LINE/windows/normalize.cpp:19:9: style: The scope of the variable 'len' can be reduced. [variableScope]
 double len;
        ^
MATLAB/software/LINE/windows/reconstruct.cpp:142:2: warning: %lld in format string (no. 1) requires 'long long' but the argument type is 'signed int'. [invalidPrintfArgType_sint]
 printf("Number of vertices: %lld          \n", num_vertices);
 ^
MATLAB/software/LINE/windows/reconstruct.cpp:125:3: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  fscanf(fin, "%s %s %lf", name_v1, name_v2, &weight);
  ^
MATLAB/software/LINE/windows/reconstruct.cpp:150:3: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  fscanf(fin, "%s %s %lf", name_v1, name_v2, &weight);
  ^
MATLAB/software/LINE/windows/reconstruct.cpp:95:3: error: Common realloc mistake: 'vertex' nulled but not freed upon failure [memleakOnRealloc]
  vertex = (struct ClassVertex *)realloc(vertex, max_num_vertices * sizeof(struct ClassVertex));
  ^
MATLAB/software/LINE/windows/reconstruct.cpp:145:14: style: C-style pointer casting [cstyleCast]
 rank_list = (Neighbor *)calloc(num_vertices, sizeof(Neighbor));
             ^
MATLAB/software/LINE/windows/reconstruct.cpp:106:6: style: The scope of the variable 'vid' can be reduced. [variableScope]
 int vid, u, v;
     ^
MATLAB/software/LINE/windows/reconstruct.cpp:106:11: style: The scope of the variable 'u' can be reduced. [variableScope]
 int vid, u, v;
          ^
MATLAB/software/LINE/windows/reconstruct.cpp:106:14: style: The scope of the variable 'v' can be reduced. [variableScope]
 int vid, u, v;
             ^
MATLAB/software/LINE/windows/reconstruct.cpp:182:18: style: The scope of the variable 'len' can be reduced. [variableScope]
 int sv, cv, cd, len, pst;
                 ^
MATLAB/software/LINE/windows/reconstruct.cpp:218:7: style: Variable 'len' is assigned a value that is never used. [unreadVariable]
  len = neighbor[sv].size();
      ^
MATLAB/software/LINE/windows/reconstruct.cpp:253:61: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for (iter = vid2weight.begin(); iter != vid2weight.end(); iter++)
                                                            ^
MATLAB/software/WSBM_v1-2.2/private/bp_wsbm.cpp:148:18: style: The if condition is the same as the previous if condition [duplicateCondition]
    if(verbosity > 4){
                 ^
MATLAB/software/WSBM_v1-2.2/private/bp_wsbm.cpp:140:18: note: First condition
    if(verbosity > 4){
                 ^
MATLAB/software/WSBM_v1-2.2/private/bp_wsbm.cpp:148:18: note: Second condition
    if(verbosity > 4){
                 ^
MATLAB/software/WSBM_v1-2.2/private/calc_T_e_bra.cpp:58:30: style: The scope of the variable 'S_out' can be reduced. [variableScope]
    double *mu, *R, *S_bra, *S_out, *degrees_w;
                             ^
MATLAB/software/WSBM_v1-2.2/private/calc_T_e_bra.cpp:60:26: style: Variable 'convergenceFlag' is assigned a value that is never used. [unreadVariable]
    bool convergenceFlag = 0;
                         ^
MATLAB/software/WSBM_v1-2.2/private/calc_T_w_bra.cpp:54:30: style: The scope of the variable 'T_out' can be reduced. [variableScope]
    double *mu, *R, *T_bra, *T_out;
                             ^
MATLAB/software/WSBM_v1-2.2/private/calc_T_w_bra.cpp:56:26: style: Variable 'convergenceFlag' is assigned a value that is never used. [unreadVariable]
    bool convergenceFlag = 0;
                         ^
MATLAB/software/WSBM_v1-2.2/private/create_T_e.cpp:58:34: style: The scope of the variable 'S_in' can be reduced. [variableScope]
    double *Edge_list, *degree, *S_in, *S_out;
                                 ^
MATLAB/software/WSBM_v1-2.2/private/create_T_e.cpp:58:41: style: The scope of the variable 'S_out' can be reduced. [variableScope]
    double *Edge_list, *degree, *S_in, *S_out;
                                        ^
MATLAB/software/WSBM_v1-2.2/private/create_T_e.cpp:132:17: style: Local variable 'S_in' shadows outer variable [shadowVariable]
        double* S_in = mxGetPr(mxGetCell(S_in_cell,i));
                ^
MATLAB/software/WSBM_v1-2.2/private/create_T_e.cpp:58:34: note: Shadowed declaration
    double *Edge_list, *degree, *S_in, *S_out;
                                 ^
MATLAB/software/WSBM_v1-2.2/private/create_T_e.cpp:132:17: note: Shadow variable
        double* S_in = mxGetPr(mxGetCell(S_in_cell,i));
                ^
MATLAB/software/WSBM_v1-2.2/private/create_T_e.cpp:163:17: style: Local variable 'S_out' shadows outer variable [shadowVariable]
        double* S_out = mxGetPr(mxGetCell(S_out_cell,i));
                ^
MATLAB/software/WSBM_v1-2.2/private/create_T_e.cpp:58:41: note: Shadowed declaration
    double *Edge_list, *degree, *S_in, *S_out;
                                        ^
MATLAB/software/WSBM_v1-2.2/private/create_T_e.cpp:163:17: note: Shadow variable
        double* S_out = mxGetPr(mxGetCell(S_out_cell,i));
                ^
MATLAB/software/WSBM_v1-2.2/private/create_T_e.cpp:59:12: style: Unused variable: Sol [unusedVariable]
    double Sol;
           ^
MATLAB/software/WSBM_v1-2.2/private/create_T_w.cpp:133:17: style: Local variable 'T_in' shadows outer variable [shadowVariable]
        double* T_in = mxGetPr(mxGetCell(T_in_cell,i));
                ^
MATLAB/software/WSBM_v1-2.2/private/create_T_w.cpp:58:34: note: Shadowed declaration
    double *Edge_list, *degree, *T_in, *T_out;
                                 ^
MATLAB/software/WSBM_v1-2.2/private/create_T_w.cpp:133:17: note: Shadow variable
        double* T_in = mxGetPr(mxGetCell(T_in_cell,i));
                ^
MATLAB/software/WSBM_v1-2.2/private/create_T_w.cpp:164:17: style: Local variable 'T_out' shadows outer variable [shadowVariable]
        double* T_out = mxGetPr(mxGetCell(T_out_cell,i));
                ^
MATLAB/software/WSBM_v1-2.2/private/create_T_w.cpp:58:41: note: Shadowed declaration
    double *Edge_list, *degree, *T_in, *T_out;
                                        ^
MATLAB/software/WSBM_v1-2.2/private/create_T_w.cpp:164:17: note: Shadow variable
        double* T_out = mxGetPr(mxGetCell(T_out_cell,i));
                ^
MATLAB/software/WSBM_v1-2.2/private/create_T_w.cpp:59:12: style: Unused variable: Tol [unusedVariable]
    double Tol;
           ^
MATLAB/software/WSBM_v1-2.2/private/vb_wsbm.cpp:212:28: style:inconclusive: Boolean expression 'maxH<H[kk]' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
        if ((maxH < H[kk]) & (mu_0[kk+i*k] > 0)){
                           ^
MATLAB/software/WSBM_v1-2.2/private/vb_wsbm.cpp:436:58: style: Parameter 'n' can be declared with const [constParameter]
void calc_S_last(double* mu, const mxArray *prhs[], int &n, int &k, double* S_last){
                                                         ^
MATLAB/software/WSBM_v1-2.2/private/vb_wsbm.cpp:436:66: style: Parameter 'k' can be declared with const [constParameter]
void calc_S_last(double* mu, const mxArray *prhs[], int &n, int &k, double* S_last){
                                                                 ^
MATLAB/software/libfm-1.42.src/src/libfm/src/relation.h:122:22: warning: Assert statement calls a function which may have desired side effects: 'getNumCols'. [assertWithSideEffect]
  assert(this->data->getNumCols() == this->data_t->getNumRows());
                     ^
MATLAB/software/libfm-1.42.src/src/libfm/src/relation.h:122:52: warning: Assert statement calls a function which may have desired side effects: 'getNumRows'. [assertWithSideEffect]
  assert(this->data->getNumCols() == this->data_t->getNumRows());
                                                   ^
MATLAB/software/libfm-1.42.src/src/libfm/src/relation.h:123:22: warning: Assert statement calls a function which may have desired side effects: 'getNumRows'. [assertWithSideEffect]
  assert(this->data->getNumRows() == this->data_t->getNumCols());
                     ^
MATLAB/software/libfm-1.42.src/src/libfm/src/relation.h:123:52: warning: Assert statement calls a function which may have desired side effects: 'getNumCols'. [assertWithSideEffect]
  assert(this->data->getNumRows() == this->data_t->getNumCols());
                                                   ^
MATLAB/software/libfm-1.42.src/src/libfm/src/relation.h:124:22: warning: Assert statement calls a function which may have desired side effects: 'getNumValues'. [assertWithSideEffect]
  assert(this->data->getNumValues() == this->data_t->getNumValues());
                     ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:136:43: warning: Assert statement calls a function which may have desired side effects: 'getNumRows'. [assertWithSideEffect]
   assert(this->target.dim == this->data->getNumRows());
                                          ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:156:23: warning: Assert statement calls a function which may have desired side effects: 'getNumCols'. [assertWithSideEffect]
   assert(this->data->getNumCols() == this->data_t->getNumRows());
                      ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:156:53: warning: Assert statement calls a function which may have desired side effects: 'getNumRows'. [assertWithSideEffect]
   assert(this->data->getNumCols() == this->data_t->getNumRows());
                                                    ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:157:23: warning: Assert statement calls a function which may have desired side effects: 'getNumRows'. [assertWithSideEffect]
   assert(this->data->getNumRows() == this->data_t->getNumCols());
                      ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:157:53: warning: Assert statement calls a function which may have desired side effects: 'getNumCols'. [assertWithSideEffect]
   assert(this->data->getNumRows() == this->data_t->getNumCols());
                                                    ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:158:23: warning: Assert statement calls a function which may have desired side effects: 'getNumValues'. [assertWithSideEffect]
   assert(this->data->getNumValues() == this->data_t->getNumValues());
                      ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd.h:70:22: warning: Assert statement calls a function which may have desired side effects: 'getNumRows'. [assertWithSideEffect]
   assert(data.data->getNumRows() == out.dim);
                     ^
MATLAB/software/libfm-1.42.src/src/fm_core/fm_model.h:67:11: warning: Member variable 'fm_model::w0' is not initialized in the constructor. [uninitMemberVar]
fm_model::fm_model() {
          ^
MATLAB/software/libfm-1.42.src/src/fm_core/fm_model.h:67:11: warning: Member variable 'fm_model::num_attribute' is not initialized in the constructor. [uninitMemberVar]
fm_model::fm_model() {
          ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:42:3: warning: Member variable 'DataMetaInfo::num_relations' is not initialized in the constructor. [uninitMemberVar]
  DataMetaInfo(uint num_attributes) {
  ^
MATLAB/software/libfm-1.42.src/src/libfm/src/relation.h:38:3: warning: Member variable 'RelationData::num_feature' is not initialized in the constructor. [uninitMemberVar]
  RelationData(uint cache_size, bool has_x, bool has_xt) {
  ^
MATLAB/software/libfm-1.42.src/src/libfm/src/relation.h:38:3: warning: Member variable 'RelationData::num_cases' is not initialized in the constructor. [uninitMemberVar]
  RelationData(uint cache_size, bool has_x, bool has_xt) {
  ^
MATLAB/software/libfm-1.42.src/src/libfm/src/relation.h:38:3: warning: Member variable 'RelationData::attr_offset' is not initialized in the constructor. [uninitMemberVar]
  RelationData(uint cache_size, bool has_x, bool has_xt) {
  ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:79:3: warning: Member variable 'Data::num_feature' is not initialized in the constructor. [uninitMemberVar]
  Data(uint64 cache_size, bool has_x, bool has_xt) {
  ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:79:3: warning: Member variable 'Data::num_cases' is not initialized in the constructor. [uninitMemberVar]
  Data(uint64 cache_size, bool has_x, bool has_xt) {
  ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:79:3: warning: Member variable 'Data::min_target' is not initialized in the constructor. [uninitMemberVar]
  Data(uint64 cache_size, bool has_x, bool has_xt) {
  ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:79:3: warning: Member variable 'Data::max_target' is not initialized in the constructor. [uninitMemberVar]
  Data(uint64 cache_size, bool has_x, bool has_xt) {
  ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn.h:58:3: warning: Member variable 'fm_learn::fm' is not initialized in the constructor. [uninitMemberVar]
  fm_learn() { log = NULL; task = 0; meta = NULL;}
  ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn.h:58:3: warning: Member variable 'fm_learn::min_target' is not initialized in the constructor. [uninitMemberVar]
  fm_learn() { log = NULL; task = 0; meta = NULL;}
  ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn.h:58:3: warning: Member variable 'fm_learn::max_target' is not initialized in the constructor. [uninitMemberVar]
  fm_learn() { log = NULL; task = 0; meta = NULL;}
  ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn.h:58:3: warning: Member variable 'fm_learn::validation' is not initialized in the constructor. [uninitMemberVar]
  fm_learn() { log = NULL; task = 0; meta = NULL;}
  ^
MATLAB/software/libfm-1.42.src/src/util/cmdline.h:50:4: performance: Variable 'delimiter' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
   delimiter = ";,";
   ^
MATLAB/software/libfm-1.42.src/src/util/cmdline.h:33:8: performance:inconclusive: Technically the member function 'CMDLine::parse_name' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  bool parse_name(std::string& s) {
       ^
MATLAB/software/libfm-1.42.src/src/fm_core/fm_model.h:58:8: style:inconclusive: Technically the member function 'fm_model::debug' can be const. [functionConst]
  void debug();
       ^
MATLAB/software/libfm-1.42.src/src/fm_core/fm_model.h:78:16: note: Technically the member function 'fm_model::debug' can be const.
void fm_model::debug() {
               ^
MATLAB/software/libfm-1.42.src/src/fm_core/fm_model.h:58:8: note: Technically the member function 'fm_model::debug' can be const.
  void debug();
       ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc_simultaneous.h:294:8: performance:inconclusive: Technically the member function 'fm_learn_mcmc_simultaneous::_evaluate_class' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  void _evaluate_class(DVector<double>& pred, DVector<DATA_FLOAT>& target, double normalizer, double& accuracy, double& loglikelihood, uint from_case, uint to_case) {
       ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:230:5: style:inconclusive: Technically the member function 'DVector < double >::get' can be const. [functionConst]
  T get(uint x) {
    ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:266:11: style:inconclusive: Technically the member function 'DVector < double >::save' can be const. [functionConst]
     void save(std::string filename) {
          ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:230:5: style:inconclusive: Technically the member function 'DVector < unsigned int >::get' can be const. [functionConst]
  T get(uint x) {
    ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:266:11: style:inconclusive: Technically the member function 'DVector < unsigned int >::save' can be const. [functionConst]
     void save(std::string filename) {
          ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:230:5: style:inconclusive: Technically the member function 'DVector < float >::get' can be const. [functionConst]
  T get(uint x) {
    ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:266:11: style:inconclusive: Technically the member function 'DVector < float >::save' can be const. [functionConst]
     void save(std::string filename) {
          ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:230:5: style:inconclusive: Technically the member function 'DVector < RelationJoin >::get' can be const. [functionConst]
  T get(uint x) {
    ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:266:11: style:inconclusive: Technically the member function 'DVector < RelationJoin >::save' can be const. [functionConst]
     void save(std::string filename) {
          ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:230:5: style:inconclusive: Technically the member function 'DVector < sparse_row < float > >::get' can be const. [functionConst]
  T get(uint x) {
    ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:266:11: style:inconclusive: Technically the member function 'DVector < sparse_row < float > >::save' can be const. [functionConst]
     void save(std::string filename) {
          ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:230:5: style:inconclusive: Technically the member function 'DVector < bool >::get' can be const. [functionConst]
  T get(uint x) {
    ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:266:11: style:inconclusive: Technically the member function 'DVector < bool >::save' can be const. [functionConst]
     void save(std::string filename) {
          ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:266:11: style:inconclusive: Technically the member function 'DVector < relation_cache * >::save' can be const. [functionConst]
     void save(std::string filename) {
          ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:266:11: style:inconclusive: Technically the member function 'DVector < Data * >::save' can be const. [functionConst]
     void save(std::string filename) {
          ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:266:11: style:inconclusive: Technically the member function 'DVector < e_q_term * >::save' can be const. [functionConst]
     void save(std::string filename) {
          ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:266:11: style:inconclusive: Technically the member function 'DVector < RelationData * >::save' can be const. [functionConst]
     void save(std::string filename) {
          ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:230:5: style:inconclusive: Technically the member function 'DVector < sparse_entry < float > >::get' can be const. [functionConst]
  T get(uint x) {
    ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:266:11: style:inconclusive: Technically the member function 'DVector < sparse_entry < float > >::save' can be const. [functionConst]
     void save(std::string filename) {
          ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:49:5: style:inconclusive: Technically the member function 'DMatrix < double >::get' can be const. [functionConst]
  T get(uint x, uint y) {
    ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:130:11: style:inconclusive: Technically the member function 'DMatrix < double >::save' can be const. [functionConst]
     void save(std::string filename, bool has_header = false) {
          ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd_element_adapt_reg.h:59:9: warning: The class 'fm_learn_sgd_element_adapt_reg' defines member variable with name 'validation' also defined in its parent class 'fm_learn'. [duplInheritedMember]
  Data* validation;
        ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn.h:53:9: note: Parent variable 'fm_learn::validation'
  Data* validation;
        ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd_element_adapt_reg.h:59:9: note: Derived variable 'fm_learn_sgd_element_adapt_reg::validation'
  Data* validation;
        ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:42:3: style: Class 'DataMetaInfo' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  DataMetaInfo(uint num_attributes) {
  ^
MATLAB/software/libfm-1.42.src/src/util/rlog.h:36:3: style: Class 'RLog' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  RLog(std::ostream* stream) {
  ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:219:3: style: Class 'DVector < double >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  DVector(uint p_dim) {
  ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:219:3: style: Class 'DVector < unsigned int >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  DVector(uint p_dim) {
  ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:219:3: style: Class 'DVector < float >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  DVector(uint p_dim) {
  ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:219:3: style: Class 'DVector < RelationJoin >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  DVector(uint p_dim) {
  ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:219:3: style: Class 'DVector < sparse_row < float > >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  DVector(uint p_dim) {
  ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:219:3: style: Class 'DVector < bool >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  DVector(uint p_dim) {
  ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:219:3: style: Class 'DVector < relation_cache * >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  DVector(uint p_dim) {
  ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:219:3: style: Class 'DVector < Data * >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  DVector(uint p_dim) {
  ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:219:3: style: Class 'DVector < e_q_term * >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  DVector(uint p_dim) {
  ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:219:3: style: Class 'DVector < RelationData * >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  DVector(uint p_dim) {
  ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:219:3: style: Class 'DVector < sparse_entry < float > >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  DVector(uint p_dim) {
  ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd.h:41:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void init() {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn.h:61:16: note: Virtual function in base class
  virtual void init() {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd.h:41:16: note: Function in derived class
  virtual void init() {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd.h:48:16: style: The function 'learn' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void learn(Data& train, Data& test) {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn.h:93:16: note: Virtual function in base class
  virtual void learn(Data& train, Data& test) { }
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd.h:48:16: note: Function in derived class
  virtual void learn(Data& train, Data& test) {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd.h:64:8: style: The function 'debug' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void debug() {
       ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn.h:97:16: note: Virtual function in base class
  virtual void debug() {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd.h:64:8: note: Function in derived class
  void debug() {
       ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd.h:69:16: style: The function 'predict' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void predict(Data& data, DVector<double>& out) {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn.h:95:16: note: Virtual function in base class
  virtual void predict(Data& data, DVector<double>& out) = 0;
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd.h:69:16: note: Function in derived class
  virtual void predict(Data& data, DVector<double>& out) {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd_element.h:35:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void init() {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd.h:41:16: note: Virtual function in base class
  virtual void init() {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd_element.h:35:16: note: Function in derived class
  virtual void init() {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd_element.h:42:16: style: The function 'learn' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void learn(Data& train, Data& test) {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd.h:48:16: note: Virtual function in base class
  virtual void learn(Data& train, Data& test) {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd_element.h:42:16: note: Function in derived class
  virtual void learn(Data& train, Data& test) {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd_element_adapt_reg.h:66:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void init() {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd.h:41:16: note: Virtual function in base class
  virtual void init() {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd_element_adapt_reg.h:66:16: note: Function in derived class
  virtual void init() {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd_element_adapt_reg.h:264:16: style: The function 'learn' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void learn(Data& train, Data& test) {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd.h:48:16: note: Virtual function in base class
  virtual void learn(Data& train, Data& test) {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd_element_adapt_reg.h:264:16: note: Function in derived class
  virtual void learn(Data& train, Data& test) {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd_element_adapt_reg.h:346:8: style: The function 'debug' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void debug() {
       ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn.h:97:16: note: Virtual function in base class
  virtual void debug() {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_sgd_element_adapt_reg.h:346:8: note: Function in derived class
  void debug() {
       ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:64:18: style: The function 'evaluate' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual double evaluate(Data& data) { return std::numeric_limits<double>::quiet_NaN(); }
                 ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn.h:81:18: note: Virtual function in base class
  virtual double evaluate(Data& data) {
                 ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:64:18: note: Function in derived class
  virtual double evaluate(Data& data) { return std::numeric_limits<double>::quiet_NaN(); }
                 ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:66:18: style: The function 'predict_case' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual double predict_case(Data& data) {
                 ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn.h:38:18: note: Virtual function in base class
  virtual double predict_case(Data& data) {
                 ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:66:18: note: Function in derived class
  virtual double predict_case(Data& data) {
                 ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:346:16: style: The function 'predict' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void predict(Data& data, DVector<double>& out) {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn.h:95:16: note: Virtual function in base class
  virtual void predict(Data& data, DVector<double>& out) = 0;
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:346:16: note: Function in derived class
  virtual void predict(Data& data, DVector<double>& out) {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:1083:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void init() {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn.h:61:16: note: Virtual function in base class
  virtual void init() {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:1083:16: note: Function in derived class
  virtual void init() {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:1145:16: style: The function 'learn' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void learn(Data& train, Data& test) {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn.h:93:16: note: Virtual function in base class
  virtual void learn(Data& train, Data& test) { }
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:1145:16: note: Function in derived class
  virtual void learn(Data& train, Data& test) {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:1189:16: style: The function 'debug' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void debug() {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn.h:97:16: note: Virtual function in base class
  virtual void debug() {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:1189:16: note: Function in derived class
  virtual void debug() {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc_simultaneous.h:49:16: style: The function '_learn' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void _learn(Data& train, Data& test) {
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:101:16: note: Virtual function in base class
  virtual void _learn(Data& train, Data& test) {};
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc_simultaneous.h:49:16: note: Function in derived class
  virtual void _learn(Data& train, Data& test) {
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:239:16: style: The function 'begin' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void begin() { index = 0; };
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:56:16: note: Virtual function in base class
  virtual void begin() = 0; // go to the beginning
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:239:16: note: Function in derived class
  virtual void begin() { index = 0; };
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:240:16: style: The function 'end' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual bool end() { return index >= data.dim; }
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:57:16: note: Virtual function in base class
  virtual bool end() = 0;   // are we at the end?
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:240:16: note: Function in derived class
  virtual bool end() { return index >= data.dim; }
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:241:16: style: The function 'next' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void next() { index++;}
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:58:16: note: Virtual function in base class
  virtual void next() = 0; // go to the next line
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:241:16: note: Function in derived class
  virtual void next() { index++;}
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:242:26: style: The function 'getRow' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual sparse_row<T>& getRow() { return data(index); };
                         ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:59:26: note: Virtual function in base class
  virtual sparse_row<T>& getRow() = 0; // pointer to the current row
                         ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:242:26: note: Function in derived class
  virtual sparse_row<T>& getRow() { return data(index); };
                         ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:243:16: style: The function 'getRowIndex' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual uint getRowIndex() { return index; };
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:60:16: note: Virtual function in base class
  virtual uint getRowIndex() = 0; // index of current row (starting with 0)
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:243:16: note: Function in derived class
  virtual uint getRowIndex() { return index; };
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:244:16: style: The function 'getNumRows' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual uint getNumRows() { return data.dim; };
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:61:16: note: Virtual function in base class
  virtual uint getNumRows() = 0; // get the number of Rows
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:244:16: note: Function in derived class
  virtual uint getNumRows() { return data.dim; };
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:245:16: style: The function 'getNumCols' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual uint getNumCols() { return num_cols; };
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:62:16: note: Virtual function in base class
  virtual uint getNumCols() = 0; // get the number of Cols
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:245:16: note: Function in derived class
  virtual uint getNumCols() { return num_cols; };
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:246:18: style: The function 'getNumValues' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual uint64 getNumValues() { return num_values; };
                 ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:63:18: note: Virtual function in base class
  virtual uint64 getNumValues() = 0; // get the number of Values
                 ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:246:18: note: Function in derived class
  virtual uint64 getNumValues() { return num_values; };
                 ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:193:16: style: The function 'getNumRows' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual uint getNumRows() { return num_rows; };
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:61:16: note: Virtual function in base class
  virtual uint getNumRows() = 0; // get the number of Rows
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:193:16: note: Function in derived class
  virtual uint getNumRows() { return num_rows; };
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:194:16: style: The function 'getNumCols' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual uint getNumCols() { return num_cols; };
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:62:16: note: Virtual function in base class
  virtual uint getNumCols() = 0; // get the number of Cols
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:194:16: note: Function in derived class
  virtual uint getNumCols() { return num_cols; };
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:195:18: style: The function 'getNumValues' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual uint64 getNumValues() { return num_values; };
                 ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:63:18: note: Virtual function in base class
  virtual uint64 getNumValues() = 0; // get the number of Values
                 ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:195:18: note: Function in derived class
  virtual uint64 getNumValues() { return num_values; };
                 ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:197:16: style: The function 'next' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void next() {
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:58:16: note: Virtual function in base class
  virtual void next() = 0; // go to the next line
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:197:16: note: Function in derived class
  virtual void next() {
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:205:16: style: The function 'begin' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void begin() {
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:56:16: note: Virtual function in base class
  virtual void begin() = 0; // go to the beginning
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:205:16: note: Function in derived class
  virtual void begin() {
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:224:16: style: The function 'end' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual bool end() { return row_index >= num_rows; }
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:57:16: note: Virtual function in base class
  virtual bool end() = 0;   // are we at the end?
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:224:16: note: Function in derived class
  virtual bool end() { return row_index >= num_rows; }
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:226:26: style: The function 'getRow' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual sparse_row<T>& getRow() { return data(position_in_data_cache); }
                         ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:59:26: note: Virtual function in base class
  virtual sparse_row<T>& getRow() = 0; // pointer to the current row
                         ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:226:26: note: Function in derived class
  virtual sparse_row<T>& getRow() { return data(position_in_data_cache); }
                         ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:227:16: style: The function 'getRowIndex' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual uint getRowIndex() { return row_index; }
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:60:16: note: Virtual function in base class
  virtual uint getRowIndex() = 0; // index of current row (starting with 0)
               ^
MATLAB/software/libfm-1.42.src/src/util/fmatrix.h:227:16: note: Function in derived class
  virtual uint getRowIndex() { return row_index; }
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:174:45: style: C-style pointer casting [cstyleCast]
 DVector< sparse_row<DATA_FLOAT> >& data = ((LargeSparseMatrixMemory<DATA_FLOAT>*)this->data)->data;
                                            ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:226:3: style: C-style pointer casting [cstyleCast]
 ((LargeSparseMatrixMemory<DATA_FLOAT>*)this->data)->num_cols = num_feature;
  ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:227:3: style: C-style pointer casting [cstyleCast]
 ((LargeSparseMatrixMemory<DATA_FLOAT>*)this->data)->num_values = num_values;
  ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:286:45: style: C-style pointer casting [cstyleCast]
 DVector< sparse_row<DATA_FLOAT> >& data = ((LargeSparseMatrixMemory<DATA_FLOAT>*)this->data)->data;
                                            ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:290:47: style: C-style pointer casting [cstyleCast]
 DVector< sparse_row<DATA_FLOAT> >& data_t = ((LargeSparseMatrixMemory<DATA_FLOAT>*)this->data_t)->data;
                                              ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:308:3: style: C-style pointer casting [cstyleCast]
 ((LargeSparseMatrixMemory<DATA_FLOAT>*)this->data_t)->num_cols = data.dim;
  ^
MATLAB/software/libfm-1.42.src/src/libfm/src/Data.h:309:3: style: C-style pointer casting [cstyleCast]
 ((LargeSparseMatrixMemory<DATA_FLOAT>*)this->data_t)->num_values = num_values;
  ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:246:5: style: C-style pointer casting [cstyleCast]
   ((fm_learn_sgd*)fml)->num_iter = cmdline.getValue(param_num_iter, 100);
    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:251:5: style: C-style pointer casting [cstyleCast]
   ((fm_learn_sgd*)fml)->num_iter = cmdline.getValue(param_num_iter, 100);
    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:252:5: style: C-style pointer casting [cstyleCast]
   ((fm_learn_sgd_element_adapt_reg*)fml)->validation = validation;
    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:258:5: style: C-style pointer casting [cstyleCast]
   ((fm_learn_mcmc*)fml)->num_iter = cmdline.getValue(param_num_iter, 100);
    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:259:5: style: C-style pointer casting [cstyleCast]
   ((fm_learn_mcmc*)fml)->num_eval_cases = cmdline.getValue(param_num_eval_cases, test.num_cases);
    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:261:5: style: C-style pointer casting [cstyleCast]
   ((fm_learn_mcmc*)fml)->do_sample = cmdline.getValue(param_do_sampling, true);
    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:262:5: style: C-style pointer casting [cstyleCast]
   ((fm_learn_mcmc*)fml)->do_multilevel = cmdline.getValue(param_do_multilevel, true);
    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:307:7: style: C-style pointer casting [cstyleCast]
     ((fm_learn_mcmc*)fml)->w_lambda.init(fm.regw);
      ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:308:7: style: C-style pointer casting [cstyleCast]
     ((fm_learn_mcmc*)fml)->v_lambda.init(fm.regv);
      ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:313:7: style: C-style pointer casting [cstyleCast]
     ((fm_learn_mcmc*)fml)->w_lambda.init(fm.regw);
      ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:314:7: style: C-style pointer casting [cstyleCast]
     ((fm_learn_mcmc*)fml)->v_lambda.init(fm.regv);
      ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:319:7: style: C-style pointer casting [cstyleCast]
     ((fm_learn_mcmc*)fml)->w_lambda.init(fm.regw);
      ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:320:7: style: C-style pointer casting [cstyleCast]
     ((fm_learn_mcmc*)fml)->v_lambda.init(fm.regv);
      ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:327:8: style: C-style pointer casting [cstyleCast]
      ((fm_learn_mcmc*)fml)->w_lambda(g) = reg[j];
       ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:332:9: style: C-style pointer casting [cstyleCast]
       ((fm_learn_mcmc*)fml)->v_lambda(g,f) = reg[j];
        ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:287:15: portability:inconclusive: Casting from double * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
    out.write(reinterpret_cast<char*>(value), sizeof(T)*dim);
              ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:321:13: portability:inconclusive: Casting from double * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
    in.read(reinterpret_cast<char*>(value), sizeof(T)*dim);
            ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:287:15: portability:inconclusive: Casting from float * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
    out.write(reinterpret_cast<char*>(value), sizeof(T)*dim);
              ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:321:13: portability:inconclusive: Casting from float * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
    in.read(reinterpret_cast<char*>(value), sizeof(T)*dim);
            ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:168:16: portability:inconclusive: Casting from double * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
     out.write(reinterpret_cast<char*>(value[i]), sizeof(T)*dim2);
               ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:186:14: portability:inconclusive: Casting from double * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
     in.read(reinterpret_cast<char*>(value[i]), sizeof(T)*dim2);
             ^
MATLAB/software/libfm-1.42.src/src/util/random.h:82:10: style: The scope of the variable 'z' can be reduced. [variableScope]
  double z,d,u;
         ^
MATLAB/software/libfm-1.42.src/src/util/random.h:82:12: style: The scope of the variable 'd' can be reduced. [variableScope]
  double z,d,u;
           ^
MATLAB/software/libfm-1.42.src/src/util/random.h:82:14: style: The scope of the variable 'u' can be reduced. [variableScope]
  double z,d,u;
             ^
MATLAB/software/libfm-1.42.src/src/util/random.h:152:14: style: The scope of the variable 'x' can be reduced. [variableScope]
 double u,v, x, y, Q;
             ^
MATLAB/software/libfm-1.42.src/src/util/random.h:152:17: style: The scope of the variable 'y' can be reduced. [variableScope]
 double u,v, x, y, Q;
                ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:145:11: style: The scope of the variable 'row_index' can be reduced. [variableScope]
     uint row_index;
          ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:168:11: style: The scope of the variable 'row_index' can be reduced. [variableScope]
     uint row_index;
          ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:225:11: style: The scope of the variable 'row_index' can be reduced. [variableScope]
     uint row_index;
          ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:248:11: style: The scope of the variable 'row_index' can be reduced. [variableScope]
     uint row_index;
          ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:273:11: style: The scope of the variable 'row_index' can be reduced. [variableScope]
     uint row_index;
          ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:293:11: style: The scope of the variable 'row_index' can be reduced. [variableScope]
     uint row_index;
          ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:383:10: style: The scope of the variable 'row_index' can be reduced. [variableScope]
    uint row_index;
         ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:463:11: style: The scope of the variable 'row_index' can be reduced. [variableScope]
     uint row_index;
          ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:464:30: style: The scope of the variable 'feature_data' can be reduced. [variableScope]
     sparse_row<DATA_FLOAT>* feature_data;
                             ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:520:11: style: The scope of the variable 'row_index' can be reduced. [variableScope]
     uint row_index;
          ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:593:11: style: The scope of the variable 'row_index' can be reduced. [variableScope]
     uint row_index;
          ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:594:30: style: The scope of the variable 'feature_data' can be reduced. [variableScope]
     sparse_row<DATA_FLOAT>* feature_data;
                             ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:463:11: style: Local variable 'row_index' shadows outer variable [shadowVariable]
     uint row_index;
          ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:427:10: note: Shadowed declaration
    uint row_index;
         ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:463:11: note: Shadow variable
     uint row_index;
          ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:464:30: style: Local variable 'feature_data' shadows outer variable [shadowVariable]
     sparse_row<DATA_FLOAT>* feature_data;
                             ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:428:29: note: Shadowed declaration
    sparse_row<DATA_FLOAT>* feature_data;
                            ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:464:30: note: Shadow variable
     sparse_row<DATA_FLOAT>* feature_data;
                             ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:593:11: style: Local variable 'row_index' shadows outer variable [shadowVariable]
     uint row_index;
          ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:547:10: note: Shadowed declaration
    uint row_index;
         ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:593:11: note: Shadow variable
     uint row_index;
          ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:594:30: style: Local variable 'feature_data' shadows outer variable [shadowVariable]
     sparse_row<DATA_FLOAT>* feature_data;
                             ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:548:29: note: Shadowed declaration
    sparse_row<DATA_FLOAT>* feature_data;
                            ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:594:30: note: Shadow variable
     sparse_row<DATA_FLOAT>* feature_data;
                             ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:77:21: performance:inconclusive: Use const reference for 'param_task' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_task  = cmdline.registerParameter("task", "r=regression, c=binary classification [MANDATORY]");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:78:21: performance:inconclusive: Use const reference for 'param_meta_file' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_meta_file = cmdline.registerParameter("meta", "filename for meta information about data set");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:79:21: performance:inconclusive: Use const reference for 'param_train_file' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_train_file = cmdline.registerParameter("train", "filename for training data [MANDATORY]");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:80:21: performance:inconclusive: Use const reference for 'param_test_file' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_test_file = cmdline.registerParameter("test", "filename for test data [MANDATORY]");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:81:21: performance:inconclusive: Use const reference for 'param_val_file' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_val_file = cmdline.registerParameter("validation", "filename for validation data (only for SGDA)");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:82:21: performance:inconclusive: Use const reference for 'param_out' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_out  = cmdline.registerParameter("out", "filename for output");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:84:21: performance:inconclusive: Use const reference for 'param_dim' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_dim  = cmdline.registerParameter("dim", "'k0,k1,k2': k0=use bias, k1=use 1-way interactions, k2=dim of 2-way interactions; default=1,1,8");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:85:21: performance:inconclusive: Use const reference for 'param_regular' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_regular  = cmdline.registerParameter("regular", "'r0,r1,r2' for SGD and ALS: r0=bias regularization, r1=1-way regularization, r2=2-way regularization");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:86:21: performance:inconclusive: Use const reference for 'param_init_stdev' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_init_stdev = cmdline.registerParameter("init_stdev", "stdev for initialization of 2-way factors; default=0.1");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:87:21: performance:inconclusive: Use const reference for 'param_num_iter' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_num_iter = cmdline.registerParameter("iter", "number of iterations; default=100");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:88:21: performance:inconclusive: Use const reference for 'param_learn_rate' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_learn_rate = cmdline.registerParameter("learn_rate", "learn_rate for SGD; default=0.1");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:90:21: performance:inconclusive: Use const reference for 'param_method' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_method  = cmdline.registerParameter("method", "learning method (SGD, SGDA, ALS, MCMC); default=MCMC");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:92:21: performance:inconclusive: Use const reference for 'param_verbosity' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_verbosity = cmdline.registerParameter("verbosity", "how much infos to print; default=0");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:93:21: performance:inconclusive: Use const reference for 'param_r_log' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_r_log  = cmdline.registerParameter("rlog", "write measurements within iterations to a file; default=''");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:94:21: performance:inconclusive: Use const reference for 'param_help' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_help            = cmdline.registerParameter("help", "this screen");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:96:21: performance:inconclusive: Use const reference for 'param_relation' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_relation = cmdline.registerParameter("relation", "BS: filenames for the relations, default=''");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/libfm.cpp:98:21: performance:inconclusive: Use const reference for 'param_cache_size' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_cache_size = cmdline.registerParameter("cache_size", "cache size for data storage (only applicable if data is in binary format), default=infty");
                    ^
MATLAB/software/libfm-1.42.src/src/util/cmdline.h:76:52: performance: Function parameter 'value' should be passed by const reference. [passedByValue]
  void setValue(std::string parameter, std::string value) {
                                                   ^
MATLAB/software/libfm-1.42.src/src/util/memory.h:45:27: performance: Function parameter 'message' should be passed by const reference. [passedByValue]
  void logNew(std::string message, uint64 size, uint64 count = 1) {
                          ^
MATLAB/software/libfm-1.42.src/src/util/memory.h:49:28: performance: Function parameter 'message' should be passed by const reference. [passedByValue]
  void logFree(std::string message, uint64 size, uint64 count = 1) {
                           ^
MATLAB/software/libfm-1.42.src/src/libfm/src/relation.h:91:37: performance: Function parameter 'filename' should be passed by const reference. [passedByValue]
void RelationData::load(std::string filename) {
                                    ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:249:18: performance: Function parameter 'v' should be passed by const reference. [passedByValue]
     void init(T v) {
                 ^
MATLAB/software/libfm-1.42.src/src/fm_core/fm_model.h:103:68: style: Parameter 'sum' can be declared with const [constParameter]
double fm_model::predict(sparse_row<FM_FLOAT>& x, DVector<double> &sum, DVector<double> &sum_sqr) {
                                                                   ^
MATLAB/software/libfm-1.42.src/src/fm_core/fm_model.h:103:90: style: Parameter 'sum_sqr' can be declared with const [constParameter]
double fm_model::predict(sparse_row<FM_FLOAT>& x, DVector<double> &sum, DVector<double> &sum_sqr) {
                                                                                         ^
MATLAB/software/libfm-1.42.src/src/fm_core/fm_sgd.h:33:122: style: Parameter 'sum' can be declared with const [constParameter]
void fm_SGD(fm_model* fm, const double& learn_rate, sparse_row<DATA_FLOAT> &x, const double multiplier, DVector<double> &sum) {
                                                                                                                         ^
MATLAB/software/libfm-1.42.src/src/fm_core/fm_sgd.h:53:161: style: Parameter 'sum_pos' can be declared with const [constParameter]
void fm_pairSGD(fm_model* fm, const double& learn_rate, sparse_row<DATA_FLOAT> &x_pos, sparse_row<DATA_FLOAT> &x_neg, const double multiplier, DVector<double> &sum_pos, DVector<double> &sum_neg, DVector<bool> &grad_visited, DVector<double> &grad) {
                                                                                                                                                                ^
MATLAB/software/libfm-1.42.src/src/fm_core/fm_sgd.h:53:187: style: Parameter 'sum_neg' can be declared with const [constParameter]
void fm_pairSGD(fm_model* fm, const double& learn_rate, sparse_row<DATA_FLOAT> &x_pos, sparse_row<DATA_FLOAT> &x_neg, const double multiplier, DVector<double> &sum_pos, DVector<double> &sum_neg, DVector<bool> &grad_visited, DVector<double> &grad) {
                                                                                                                                                                                          ^
MATLAB/software/libfm-1.42.src/src/fm_core/fm_sgd.h:53:211: style: Parameter 'grad_visited' can be declared with const [constParameter]
void fm_pairSGD(fm_model* fm, const double& learn_rate, sparse_row<DATA_FLOAT> &x_pos, sparse_row<DATA_FLOAT> &x_neg, const double multiplier, DVector<double> &sum_pos, DVector<double> &sum_neg, DVector<bool> &grad_visited, DVector<double> &grad) {
                                                                                                                                                                                                                  ^
MATLAB/software/libfm-1.42.src/src/fm_core/fm_sgd.h:53:242: style: Parameter 'grad' can be declared with const [constParameter]
void fm_pairSGD(fm_model* fm, const double& learn_rate, sparse_row<DATA_FLOAT> &x_pos, sparse_row<DATA_FLOAT> &x_neg, const double multiplier, DVector<double> &sum_pos, DVector<double> &sum_neg, DVector<bool> &grad_visited, DVector<double> &grad) {
                                                                                                                                                                                                                                                 ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:108:88: style: Parameter 'main_cache' can be declared with const [constParameter]
  void predict_data_and_write_to_eterms(DVector<Data*>& main_data, DVector<e_q_term*>& main_cache) {
                                                                                       ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:113:27: style: Variable 'relation' can be declared with const [constVariable]
   DVector<RelationJoin>& relation = main_data(0)->relation;
                          ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:966:21: style: Variable 'w_lambda_gamma' can be declared with const [constVariable]
   DVector<double>& w_lambda_gamma = cache_for_group_values;
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:1047:21: style: Variable 'v_lambda_gamma' can be declared with const [constVariable]
   DVector<double>& v_lambda_gamma = cache_for_group_values;
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc_simultaneous.h:315:122: style: Parameter 'num_eval_cases' can be declared with const [constParameter]
  void _evaluate(DVector<double>& pred, DVector<DATA_FLOAT>& target, double normalizer, double& rmse, double& mae, uint& num_eval_cases) {
                                                                                                                         ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc_simultaneous.h:319:142: style: Parameter 'num_eval_cases' can be declared with const [constParameter]
  void _evaluate_class(DVector<double>& pred, DVector<DATA_FLOAT>& target, double normalizer, double& accuracy, double& loglikelihood, uint& num_eval_cases) {
                                                                                                                                             ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:260:27: style: Parameter 'v' can be declared with const [constParameter]
  void assign(DVector<T>& v) {
                          ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:76:27: style: Parameter 'v' can be declared with const [constParameter]
  void assign(DMatrix<T>& v) {
                          ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:303:16: error: Uninitialized struct member: v.data [uninitStructMember]
    value[i] = v;
               ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:303:16: error: Uninitialized struct member: v.size [uninitStructMember]
    value[i] = v;
               ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:303:16: error: Uninitialized struct member: v.id [uninitStructMember]
    value[i] = v;
               ^
MATLAB/software/libfm-1.42.src/src/util/matrix.h:303:16: error: Uninitialized struct member: v.value [uninitStructMember]
    value[i] = v;
               ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:717:17: style: Variable 'num_all' is assigned a value that is never used. [unreadVariable]
   uint num_all = 0;
                ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:724:13: style: Variable 'num_all' is assigned a value that is never used. [unreadVariable]
    num_all += r_cache[train_case_index].wnum;
            ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:835:17: style: Variable 'num_all' is assigned a value that is never used. [unreadVariable]
   uint num_all = 0;
                ^
MATLAB/software/libfm-1.42.src/src/libfm/src/fm_learn_mcmc.h:843:13: style: Variable 'num_all' is assigned a value that is never used. [unreadVariable]
    num_all += r_cache[train_case_index].wnum;
            ^
MATLAB/software/libfm-1.42.src/src/libfm/tools/convert.cpp:113:13: warning: %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned int *'. [invalidScanfArgType_int]
     while (sscanf(pline, "%d:%f%n", &_feature, &_value, &nchar) >= 2) {
            ^
MATLAB/software/libfm-1.42.src/src/libfm/tools/convert.cpp:179:13: warning: %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned int *'. [invalidScanfArgType_int]
     while (sscanf(pline, "%d:%f%n", &_feature, &_value, &nchar) >= 2) {
            ^
MATLAB/software/libfm-1.42.src/src/libfm/tools/convert.cpp:201:2: error: Memory leak: row.data [memleak]
 } catch (std::string &e) {
 ^
MATLAB/software/libfm-1.42.src/src/libfm/tools/convert.cpp:177:18: portability:inconclusive: Casting from float * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
     out_y.write(reinterpret_cast<char*>(&(_value)), sizeof(DATA_FLOAT));
                 ^
MATLAB/software/libfm-1.42.src/src/libfm/tools/convert.cpp:70:21: performance:inconclusive: Use const reference for 'param_ifile' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_ifile = cmdline.registerParameter("ifile", "input file name, file has to be in binary sparse format [MANDATORY]");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/tools/convert.cpp:71:21: performance:inconclusive: Use const reference for 'param_ofilex' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_ofilex = cmdline.registerParameter("ofilex", "output file name for x [MANDATORY]");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/tools/convert.cpp:72:21: performance:inconclusive: Use const reference for 'param_ofiley' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_ofiley = cmdline.registerParameter("ofiley", "output file name for y [MANDATORY]");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/tools/convert.cpp:73:21: performance:inconclusive: Use const reference for 'param_help' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_help       = cmdline.registerParameter("help", "this screen");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/tools/transpose.cpp:69:21: performance:inconclusive: Use const reference for 'param_ifile' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_ifile = cmdline.registerParameter("ifile", "input file name, file has to be in binary sparse format [MANDATORY]");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/tools/transpose.cpp:70:21: performance:inconclusive: Use const reference for 'param_ofile' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_ofile = cmdline.registerParameter("ofile", "output file name [MANDATORY]");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/tools/transpose.cpp:72:21: performance:inconclusive: Use const reference for 'param_cache_size' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_cache_size = cmdline.registerParameter("cache_size", "cache size for data storage, default=200000000");
                    ^
MATLAB/software/libfm-1.42.src/src/libfm/tools/transpose.cpp:73:21: performance:inconclusive: Use const reference for 'param_help' to avoid unnecessary data copying. [redundantCopyLocalConst]
  const std::string param_help       = cmdline.registerParameter("help", "this screen");
                    ^
MATLAB/software/liblinear-2.1/blas/daxpy.c:10:12: style: The scope of the variable 'i' can be reduced. [variableScope]
  long int i, m, ix, iy, nn, iincx, iincy;
           ^
MATLAB/software/liblinear-2.1/blas/daxpy.c:10:15: style: The scope of the variable 'm' can be reduced. [variableScope]
  long int i, m, ix, iy, nn, iincx, iincy;
              ^
MATLAB/software/liblinear-2.1/blas/daxpy.c:10:18: style: The scope of the variable 'ix' can be reduced. [variableScope]
  long int i, m, ix, iy, nn, iincx, iincy;
                 ^
MATLAB/software/liblinear-2.1/blas/daxpy.c:10:22: style: The scope of the variable 'iy' can be reduced. [variableScope]
  long int i, m, ix, iy, nn, iincx, iincy;
                     ^
MATLAB/software/liblinear-2.1/blas/ddot.c:9:12: style: The scope of the variable 'i' can be reduced. [variableScope]
  long int i, m, nn, iincx, iincy;
           ^
MATLAB/software/liblinear-2.1/blas/ddot.c:9:15: style: The scope of the variable 'm' can be reduced. [variableScope]
  long int i, m, nn, iincx, iincy;
              ^
MATLAB/software/liblinear-2.1/blas/ddot.c:11:12: style: The scope of the variable 'ix' can be reduced. [variableScope]
  long int ix, iy;
           ^
MATLAB/software/liblinear-2.1/blas/ddot.c:11:16: style: The scope of the variable 'iy' can be reduced. [variableScope]
  long int ix, iy;
               ^
MATLAB/software/liblinear-2.1/blas/dnrm2.c:10:12: style: The scope of the variable 'ix' can be reduced. [variableScope]
  long int ix, nn, iincx;
           ^
MATLAB/software/liblinear-2.1/blas/dnrm2.c:11:16: style: The scope of the variable 'scale' can be reduced. [variableScope]
  double norm, scale, absxi, ssq, temp;
               ^
MATLAB/software/liblinear-2.1/blas/dnrm2.c:11:23: style: The scope of the variable 'absxi' can be reduced. [variableScope]
  double norm, scale, absxi, ssq, temp;
                      ^
MATLAB/software/liblinear-2.1/blas/dnrm2.c:11:30: style: The scope of the variable 'ssq' can be reduced. [variableScope]
  double norm, scale, absxi, ssq, temp;
                             ^
MATLAB/software/liblinear-2.1/blas/dnrm2.c:11:35: style: The scope of the variable 'temp' can be reduced. [variableScope]
  double norm, scale, absxi, ssq, temp;
                                  ^
MATLAB/software/liblinear-2.1/blas/dscal.c:9:12: style: The scope of the variable 'i' can be reduced. [variableScope]
  long int i, m, nincx, nn, iincx;
           ^
MATLAB/software/liblinear-2.1/blas/dscal.c:9:15: style: The scope of the variable 'm' can be reduced. [variableScope]
  long int i, m, nincx, nn, iincx;
              ^
MATLAB/software/liblinear-2.1/blas/dscal.c:9:18: style: The scope of the variable 'nincx' can be reduced. [variableScope]
  long int i, m, nincx, nn, iincx;
                 ^
MATLAB/software/liblinear-2.1/linear.cpp:139:14: style: Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision. [unpreciseMathCall]
   f += C[i]*log(1 + exp(-yz));
             ^
MATLAB/software/liblinear-2.1/linear.cpp:141:19: style: Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision. [unpreciseMathCall]
   f += C[i]*(-yz+log(1 + exp(yz)));
                  ^
MATLAB/software/liblinear-2.1/linear.cpp:1962:20: style: Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision. [unpreciseMathCall]
   v += C[GETI(j)]*log(1+1/exp_wTx[j]);
                   ^
MATLAB/software/liblinear-2.1/linear.cpp:1964:20: style: Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision. [unpreciseMathCall]
   v += C[GETI(j)]*log(1+exp_wTx[j]);
                   ^
MATLAB/software/liblinear-2.1/linear.cpp:242:17: warning: Member variable 'l2r_l2_svc_fun::sizeI' is not initialized in the constructor. [uninitMemberVar]
l2r_l2_svc_fun::l2r_l2_svc_fun(const problem *prob, double *C)
                ^
MATLAB/software/liblinear-2.1/linear.cpp:95:7: style:inconclusive: Technically the member function 'l2r_lr_fun::Xv' can be const. [functionConst]
 void Xv(double *v, double *Xv);
      ^
MATLAB/software/liblinear-2.1/linear.cpp:195:18: note: Technically the member function 'l2r_lr_fun::Xv' can be const.
void l2r_lr_fun::Xv(double *v, double *Xv)
                 ^
MATLAB/software/liblinear-2.1/linear.cpp:95:7: note: Technically the member function 'l2r_lr_fun::Xv' can be const.
 void Xv(double *v, double *Xv);
      ^
MATLAB/software/liblinear-2.1/linear.cpp:231:7: style:inconclusive: Technically the member function 'l2r_l2_svc_fun::Xv' can be const. [functionConst]
 void Xv(double *v, double *Xv);
      ^
MATLAB/software/liblinear-2.1/linear.cpp:334:22: note: Technically the member function 'l2r_l2_svc_fun::Xv' can be const.
void l2r_l2_svc_fun::Xv(double *v, double *Xv)
                     ^
MATLAB/software/liblinear-2.1/linear.cpp:231:7: note: Technically the member function 'l2r_l2_svc_fun::Xv' can be const.
 void Xv(double *v, double *Xv);
      ^
MATLAB/software/liblinear-2.1/linear.cpp:465:8: style:inconclusive: Technically the member function 'Solver_MCSVM_CS::be_shrunk' can be const. [functionConst]
  bool be_shrunk(int i, int m, int yi, double alpha_i, double minG);
       ^
MATLAB/software/liblinear-2.1/linear.cpp:527:23: note: Technically the member function 'Solver_MCSVM_CS::be_shrunk' can be const.
bool Solver_MCSVM_CS::be_shrunk(int i, int m, int yi, double alpha_i, double minG)
                      ^
MATLAB/software/liblinear-2.1/linear.cpp:465:8: note: Technically the member function 'Solver_MCSVM_CS::be_shrunk' can be const.
  bool be_shrunk(int i, int m, int yi, double alpha_i, double minG);
       ^
MATLAB/software/liblinear-2.1/linear.cpp:110:2: warning: Class 'l2r_lr_fun' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
 z = new double[l];
 ^
MATLAB/software/liblinear-2.1/linear.cpp:110:2: warning: Class 'l2r_lr_fun' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
 z = new double[l];
 ^
MATLAB/software/liblinear-2.1/linear.cpp:248:2: warning: Class 'l2r_l2_svc_fun' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
 z = new double[l];
 ^
MATLAB/software/liblinear-2.1/linear.cpp:248:2: warning: Class 'l2r_l2_svc_fun' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
 z = new double[l];
 ^
MATLAB/software/liblinear-2.1/linear.cpp:482:8: warning: Class 'Solver_MCSVM_CS' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
 this->B = new double[nr_class];
       ^
MATLAB/software/liblinear-2.1/linear.cpp:482:8: warning: Class 'Solver_MCSVM_CS' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
 this->B = new double[nr_class];
       ^
MATLAB/software/liblinear-2.1/tron.h:18:2: style: Class 'TRON' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TRON(const function *fun_obj, double eps = 0.1, double eps_cg = 0.1, int max_iter = 1000);
 ^
MATLAB/software/liblinear-2.1/linear.cpp:88:9: style: The function 'fun' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 double fun(double *w);
        ^
MATLAB/software/liblinear-2.1/tron.h:7:17: note: Virtual function in base class
 virtual double fun(double *w) = 0 ;
                ^
MATLAB/software/liblinear-2.1/linear.cpp:88:9: note: Function in derived class
 double fun(double *w);
        ^
MATLAB/software/liblinear-2.1/linear.cpp:89:7: style: The function 'grad' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void grad(double *w, double *g);
      ^
MATLAB/software/liblinear-2.1/tron.h:8:15: note: Virtual function in base class
 virtual void grad(double *w, double *g) = 0 ;
              ^
MATLAB/software/liblinear-2.1/linear.cpp:89:7: note: Function in derived class
 void grad(double *w, double *g);
      ^
MATLAB/software/liblinear-2.1/linear.cpp:90:7: style: The function 'Hv' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void Hv(double *s, double *Hs);
      ^
MATLAB/software/liblinear-2.1/tron.h:9:15: note: Virtual function in base class
 virtual void Hv(double *s, double *Hs) = 0 ;
              ^
MATLAB/software/liblinear-2.1/linear.cpp:90:7: note: Function in derived class
 void Hv(double *s, double *Hs);
      ^
MATLAB/software/liblinear-2.1/linear.cpp:92:6: style: The function 'get_nr_variable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 int get_nr_variable(void);
     ^
MATLAB/software/liblinear-2.1/tron.h:11:14: note: Virtual function in base class
 virtual int get_nr_variable(void) = 0 ;
             ^
MATLAB/software/liblinear-2.1/linear.cpp:92:6: note: Function in derived class
 int get_nr_variable(void);
     ^
MATLAB/software/liblinear-2.1/linear.cpp:224:9: style: The function 'fun' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 double fun(double *w);
        ^
MATLAB/software/liblinear-2.1/tron.h:7:17: note: Virtual function in base class
 virtual double fun(double *w) = 0 ;
                ^
MATLAB/software/liblinear-2.1/linear.cpp:224:9: note: Function in derived class
 double fun(double *w);
        ^
MATLAB/software/liblinear-2.1/linear.cpp:225:7: style: The function 'grad' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void grad(double *w, double *g);
      ^
MATLAB/software/liblinear-2.1/tron.h:8:15: note: Virtual function in base class
 virtual void grad(double *w, double *g) = 0 ;
              ^
MATLAB/software/liblinear-2.1/linear.cpp:225:7: note: Function in derived class
 void grad(double *w, double *g);
      ^
MATLAB/software/liblinear-2.1/linear.cpp:226:7: style: The function 'Hv' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void Hv(double *s, double *Hs);
      ^
MATLAB/software/liblinear-2.1/tron.h:9:15: note: Virtual function in base class
 virtual void Hv(double *s, double *Hs) = 0 ;
              ^
MATLAB/software/liblinear-2.1/linear.cpp:226:7: note: Function in derived class
 void Hv(double *s, double *Hs);
      ^
MATLAB/software/liblinear-2.1/linear.cpp:228:6: style: The function 'get_nr_variable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 int get_nr_variable(void);
     ^
MATLAB/software/liblinear-2.1/tron.h:11:14: note: Virtual function in base class
 virtual int get_nr_variable(void) = 0 ;
             ^
MATLAB/software/liblinear-2.1/linear.cpp:228:6: note: Function in derived class
 int get_nr_variable(void);
     ^
MATLAB/software/liblinear-2.1/linear.cpp:361:9: style: The function 'fun' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 double fun(double *w);
        ^
MATLAB/software/liblinear-2.1/tron.h:7:17: note: Virtual function in base class
 virtual double fun(double *w) = 0 ;
                ^
MATLAB/software/liblinear-2.1/linear.cpp:361:9: note: Function in derived class
 double fun(double *w);
        ^
MATLAB/software/liblinear-2.1/linear.cpp:362:7: style: The function 'grad' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void grad(double *w, double *g);
      ^
MATLAB/software/liblinear-2.1/tron.h:8:15: note: Virtual function in base class
 virtual void grad(double *w, double *g) = 0 ;
              ^
MATLAB/software/liblinear-2.1/linear.cpp:362:7: note: Function in derived class
 void grad(double *w, double *g);
      ^
MATLAB/software/liblinear-2.1/linear.cpp:2068:5: error: Common realloc mistake: 'label' nulled but not freed upon failure [memleakOnRealloc]
    label = (int *)realloc(label,max_nr_class*sizeof(int));
    ^
MATLAB/software/liblinear-2.1/linear.cpp:2069:5: error: Common realloc mistake: 'count' nulled but not freed upon failure [memleakOnRealloc]
    count = (int *)realloc(count,max_nr_class*sizeof(int));
    ^
MATLAB/software/liblinear-2.1/linear.cpp:2267:18: style: C-style pointer casting [cstyleCast]
 model *model_ = Malloc(model,1);
                 ^
MATLAB/software/liblinear-2.1/linear.cpp:2475:28: style: C-style pointer casting [cstyleCast]
 struct problem *subprob = Malloc(problem,nr_fold);
                           ^
MATLAB/software/liblinear-2.1/linear.cpp:2809:18: style: C-style pointer casting [cstyleCast]
 model *model_ = Malloc(model,1);
                 ^
MATLAB/software/liblinear-2.1/linear.cpp:2265:6: style: Same expression used in consecutive assignments of 'n' and 'w_size'. [duplicateAssignExpression]
 int n = prob->n;
     ^
MATLAB/software/liblinear-2.1/linear.cpp:2266:6: note: Same expression used in consecutive assignments of 'n' and 'w_size'.
 int w_size = prob->n;
     ^
MATLAB/software/liblinear-2.1/linear.cpp:2265:6: note: Same expression used in consecutive assignments of 'n' and 'w_size'.
 int n = prob->n;
     ^
MATLAB/software/liblinear-2.1/linear.cpp:381:9: style: The scope of the variable 'd' can be reduced. [variableScope]
 double d;
        ^
MATLAB/software/liblinear-2.1/linear.cpp:406:9: style: The scope of the variable 'd' can be reduced. [variableScope]
 double d;
        ^
MATLAB/software/liblinear-2.1/linear.cpp:798:9: style: The scope of the variable 'PGmax_new' can be reduced. [variableScope]
 double PGmax_new, PGmin_new;
        ^
MATLAB/software/liblinear-2.1/linear.cpp:798:20: style: The scope of the variable 'PGmin_new' can be reduced. [variableScope]
 double PGmax_new, PGmin_new;
                   ^
MATLAB/software/liblinear-2.1/linear.cpp:998:9: style: The scope of the variable 'Gmax_new' can be reduced. [variableScope]
 double Gmax_new, Gnorm1_new;
        ^
MATLAB/software/liblinear-2.1/linear.cpp:998:19: style: The scope of the variable 'Gnorm1_new' can be reduced. [variableScope]
 double Gmax_new, Gnorm1_new;
                  ^
MATLAB/software/liblinear-2.1/linear.cpp:1362:9: style: The scope of the variable 'Gmax_new' can be reduced. [variableScope]
 double Gmax_new, Gnorm1_new;
        ^
MATLAB/software/liblinear-2.1/linear.cpp:1362:19: style: The scope of the variable 'Gnorm1_new' can be reduced. [variableScope]
 double Gmax_new, Gnorm1_new;
                  ^
MATLAB/software/liblinear-2.1/linear.cpp:1637:6: style: The scope of the variable 'active_size' can be reduced. [variableScope]
 int active_size;
     ^
MATLAB/software/liblinear-2.1/linear.cpp:1647:9: style: The scope of the variable 'Gmax_new' can be reduced. [variableScope]
 double Gmax_new, Gnorm1_new;
        ^
MATLAB/software/liblinear-2.1/linear.cpp:1647:19: style: The scope of the variable 'Gnorm1_new' can be reduced. [variableScope]
 double Gmax_new, Gnorm1_new;
                  ^
MATLAB/software/liblinear-2.1/linear.cpp:2232:9: style: The scope of the variable 'xTx' can be reduced. [variableScope]
 double xTx,max_xTx;
        ^
MATLAB/software/liblinear-2.1/linear.cpp:2263:8: style: The scope of the variable 'j' can be reduced. [variableScope]
 int i,j;
       ^
MATLAB/software/liblinear-2.1/linear.cpp:474:77: style:inconclusive: Function 'Solver_MCSVM_CS' argument 3 names different: declaration 'C' definition 'weighted_C'. [funcArgNamesDifferent]
Solver_MCSVM_CS::Solver_MCSVM_CS(const problem *prob, int nr_class, double *weighted_C, double eps, int max_iter)
                                                                            ^
MATLAB/software/liblinear-2.1/linear.cpp:460:62: note: Function 'Solver_MCSVM_CS' argument 3 names different: declaration 'C' definition 'weighted_C'.
  Solver_MCSVM_CS(const problem *prob, int nr_class, double *C, double eps=0.1, int max_iter=100000);
                                                             ^
MATLAB/software/liblinear-2.1/linear.cpp:474:77: note: Function 'Solver_MCSVM_CS' argument 3 names different: declaration 'C' definition 'weighted_C'.
Solver_MCSVM_CS::Solver_MCSVM_CS(const problem *prob, int nr_class, double *weighted_C, double eps, int max_iter)
                                                                            ^
MATLAB/software/liblinear-2.1/linear.cpp:3032:49: style:inconclusive: Function 'check_probability_model' argument 1 names different: declaration 'model' definition 'model_'. [funcArgNamesDifferent]
int check_probability_model(const struct model *model_)
                                                ^
MATLAB/software/liblinear-2.1/linear.h:70:49: note: Function 'check_probability_model' argument 1 names different: declaration 'model' definition 'model_'.
int check_probability_model(const struct model *model);
                                                ^
MATLAB/software/liblinear-2.1/linear.cpp:3032:49: note: Function 'check_probability_model' argument 1 names different: declaration 'model' definition 'model_'.
int check_probability_model(const struct model *model_)
                                                ^
MATLAB/software/liblinear-2.1/linear.cpp:3039:48: style:inconclusive: Function 'check_regression_model' argument 1 names different: declaration 'model' definition 'model_'. [funcArgNamesDifferent]
int check_regression_model(const struct model *model_)
                                               ^
MATLAB/software/liblinear-2.1/linear.h:71:48: note: Function 'check_regression_model' argument 1 names different: declaration 'model' definition 'model_'.
int check_regression_model(const struct model *model);
                                               ^
MATLAB/software/liblinear-2.1/linear.cpp:3039:48: note: Function 'check_regression_model' argument 1 names different: declaration 'model' definition 'model_'.
int check_regression_model(const struct model *model_)
                                               ^
MATLAB/software/liblinear-2.1/linear.cpp:2389:14: style: Local variable 'j' shadows outer variable [shadowVariable]
     for(int j=0;j<w_size;j++)
             ^
MATLAB/software/liblinear-2.1/linear.cpp:2263:8: note: Shadowed declaration
 int i,j;
       ^
MATLAB/software/liblinear-2.1/linear.cpp:2389:14: note: Shadow variable
     for(int j=0;j<w_size;j++)
             ^
MATLAB/software/liblinear-2.1/linear.cpp:2828:8: style: Local variable 'i' shadows outer variable [shadowVariable]
   int i;
       ^
MATLAB/software/liblinear-2.1/linear.cpp:2804:6: note: Shadowed declaration
 int i;
     ^
MATLAB/software/liblinear-2.1/linear.cpp:2828:8: note: Shadow variable
   int i;
       ^
MATLAB/software/liblinear-2.1/linear.cpp:2864:8: style: Local variable 'nr_class' shadows outer variable [shadowVariable]
   int nr_class = model_->nr_class;
       ^
MATLAB/software/liblinear-2.1/linear.cpp:2807:6: note: Shadowed declaration
 int nr_class;
     ^
MATLAB/software/liblinear-2.1/linear.cpp:2864:8: note: Shadow variable
   int nr_class = model_->nr_class;
       ^
MATLAB/software/liblinear-2.1/linear.cpp:2866:12: style: Local variable 'i' shadows outer variable [shadowVariable]
   for(int i=0;i<nr_class;i++)
           ^
MATLAB/software/liblinear-2.1/linear.cpp:2804:6: note: Shadowed declaration
 int i;
     ^
MATLAB/software/liblinear-2.1/linear.cpp:2866:12: note: Shadow variable
   for(int i=0;i<nr_class;i++)
           ^
MATLAB/software/liblinear-2.1/matlab/libsvmread.c:202:14: style: Condition 'filename==NULL' is always false [knownConditionTrueFalse]
 if(filename == NULL)
             ^
MATLAB/software/liblinear-2.1/matlab/libsvmread.c:48:3: error: Common realloc mistake: 'line' nulled but not freed upon failure [memleakOnRealloc]
  line = (char *) realloc(line, max_line_len);
  ^
MATLAB/software/liblinear-2.1/matlab/libsvmread.c:40:6: style: The scope of the variable 'len' can be reduced. [variableScope]
 int len;
     ^
MATLAB/software/liblinear-2.1/matlab/libsvmread.c:59:28: style: The scope of the variable 'inst_max_index' can be reduced. [variableScope]
 int max_index, min_index, inst_max_index;
                           ^
MATLAB/software/liblinear-2.1/matlab/libsvmread.c:81:9: style: The scope of the variable 'idx' can be reduced. [variableScope]
  char *idx, *val;
        ^
MATLAB/software/liblinear-2.1/matlab/libsvmread.c:81:15: style: The scope of the variable 'val' can be reduced. [variableScope]
  char *idx, *val;
              ^
MATLAB/software/liblinear-2.1/matlab/libsvmread.c:83:7: style: The scope of the variable 'index' can be reduced. [variableScope]
  int index = 0;
      ^
MATLAB/software/liblinear-2.1/matlab/libsvmread.c:129:9: style: The scope of the variable 'idx' can be reduced. [variableScope]
  char *idx, *val, *label;
        ^
MATLAB/software/liblinear-2.1/matlab/libsvmread.c:129:15: style: The scope of the variable 'val' can be reduced. [variableScope]
  char *idx, *val, *label;
              ^
MATLAB/software/liblinear-2.1/matlab/libsvmwrite.c:75:4: portability: %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
   fprintf(fp," %lu:%g", (size_t)ir[k]+1, samples[k]);
   ^
MATLAB/software/liblinear-2.1/matlab/libsvmwrite.c:47:4: error: Resource leak: fp [resourceLeak]
   return;
   ^
MATLAB/software/liblinear-2.1/matlab/libsvmwrite.c:29:23: style: The scope of the variable 'low' can be reduced. [variableScope]
 mwIndex *ir, *jc, k, low, high;
                      ^
MATLAB/software/liblinear-2.1/matlab/libsvmwrite.c:29:28: style: The scope of the variable 'high' can be reduced. [variableScope]
 mwIndex *ir, *jc, k, low, high;
                           ^
MATLAB/software/liblinear-2.1/matlab/linear_model_matlab.c:90:8: style: Variable 'out_id' is assigned a value that is never used. [unreadVariable]
 out_id++;
       ^
MATLAB/software/liblinear-2.1/matlab/linear_model_matlab.c:171:4: style: Variable 'id' is assigned a value that is never used. [unreadVariable]
 id++;
   ^
MATLAB/software/liblinear-2.1/matlab/predict.c:232:6: style: The scope of the variable 'prob_estimate_flag' can be reduced. [variableScope]
 int prob_estimate_flag = 0;
     ^
MATLAB/software/liblinear-2.1/matlab/train.c:100:9: style: The scope of the variable 'total_error' can be reduced. [variableScope]
 double total_error = 0;
        ^
MATLAB/software/liblinear-2.1/matlab/train.c:388:14: style: The scope of the variable 'error_msg' can be reduced. [variableScope]
 const char *error_msg;
             ^
MATLAB/software/liblinear-2.1/matlab/train.c:473:16: style: Local variable 'error_msg' shadows outer variable [shadowVariable]
   const char *error_msg;
               ^
MATLAB/software/liblinear-2.1/matlab/train.c:388:14: note: Shadowed declaration
 const char *error_msg;
             ^
MATLAB/software/liblinear-2.1/matlab/train.c:473:16: note: Shadow variable
   const char *error_msg;
               ^
MATLAB/software/liblinear-2.1/matlab/train.c:299:20: style: The scope of the variable 'low' can be reduced. [variableScope]
 mwIndex *ir, *jc, low, high, k;
                   ^
MATLAB/software/liblinear-2.1/matlab/train.c:299:25: style: The scope of the variable 'high' can be reduced. [variableScope]
 mwIndex *ir, *jc, low, high, k;
                        ^
MATLAB/software/liblinear-2.1/predict.c:37:3: error: Common realloc mistake: 'line' nulled but not freed upon failure [memleakOnRealloc]
  line = (char *) realloc(line,max_line_len);
  ^
MATLAB/software/liblinear-2.1/predict.c:103:5: error: Common realloc mistake: 'x' nulled but not freed upon failure [memleakOnRealloc]
    x = (struct feature_node *) realloc(x,max_nr_attr*sizeof(struct feature_node));
    ^
MATLAB/software/liblinear-2.1/predict.c:29:6: style: The scope of the variable 'len' can be reduced. [variableScope]
 int len;
     ^
MATLAB/software/liblinear-2.1/predict.c:54:6: style: The scope of the variable 'j' can be reduced. [variableScope]
 int j, n;
     ^
MATLAB/software/liblinear-2.1/predict.c:87:9: style: The scope of the variable 'idx' can be reduced. [variableScope]
  char *idx, *val, *label, *endptr;
        ^
MATLAB/software/liblinear-2.1/predict.c:87:15: style: The scope of the variable 'val' can be reduced. [variableScope]
  char *idx, *val, *label, *endptr;
              ^
MATLAB/software/liblinear-2.1/predict.c:138:8: style: Local variable 'j' shadows outer variable [shadowVariable]
   int j;
       ^
MATLAB/software/liblinear-2.1/predict.c:54:6: note: Shadowed declaration
 int j, n;
     ^
MATLAB/software/liblinear-2.1/predict.c:138:8: note: Shadow variable
   int j;
       ^
MATLAB/software/liblinear-2.1/train.c:77:3: error: Common realloc mistake: 'line' nulled but not freed upon failure [memleakOnRealloc]
  line = (char *) realloc(line,max_line_len);
  ^
MATLAB/software/liblinear-2.1/train.c:69:6: style: The scope of the variable 'len' can be reduced. [variableScope]
 int len;
     ^
MATLAB/software/liblinear-2.1/train.c:161:9: style: The scope of the variable 'total_error' can be reduced. [variableScope]
 double total_error = 0;
        ^
MATLAB/software/liblinear-2.1/train.c:352:17: style: The scope of the variable 'inst_max_index' can be reduced. [variableScope]
 int max_index, inst_max_index, i;
                ^
MATLAB/software/liblinear-2.1/train.c:356:20: style: The scope of the variable 'label' can be reduced. [variableScope]
 char *idx, *val, *label;
                   ^
MATLAB/software/liblinear-2.1/tron.h:26:9: style: Unused private function: 'TRON::norm_inf' [unusedPrivateFunction]
 double norm_inf(int n, double *x);
        ^
MATLAB/software/liblinear-2.1/tron.h:26:9: performance:inconclusive: Technically the member function 'TRON::norm_inf' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 double norm_inf(int n, double *x);
        ^
MATLAB/software/liblinear-2.1/tron.cpp:229:14: note: Technically the member function 'TRON::norm_inf' can be static (but you may consider moving to unnamed namespace).
double TRON::norm_inf(int n, double *x)
             ^
MATLAB/software/liblinear-2.1/tron.h:26:9: note: Technically the member function 'TRON::norm_inf' can be static (but you may consider moving to unnamed namespace).
 double norm_inf(int n, double *x);
        ^
MATLAB/software/liblinear-2.1/tron.cpp:66:9: style: The scope of the variable 'cg_iter' can be reduced. [variableScope]
 int i, cg_iter;
        ^
MATLAB/software/liblinear-2.1/tron.cpp:67:16: style: The scope of the variable 'snorm' can be reduced. [variableScope]
 double delta, snorm, one=1.0;
               ^
MATLAB/software/liblinear-2.1/tron.cpp:68:19: style: The scope of the variable 'fnew' can be reduced. [variableScope]
 double alpha, f, fnew, prered, actred, gs;
                  ^
MATLAB/software/liblinear-2.1/tron.cpp:68:25: style: The scope of the variable 'prered' can be reduced. [variableScope]
 double alpha, f, fnew, prered, actred, gs;
                        ^
MATLAB/software/liblinear-2.1/tron.cpp:68:33: style: The scope of the variable 'actred' can be reduced. [variableScope]
 double alpha, f, fnew, prered, actred, gs;
                                ^
MATLAB/software/liblinear-2.1/tron.cpp:68:41: style: The scope of the variable 'gs' can be reduced. [variableScope]
 double alpha, f, fnew, prered, actred, gs;
                                        ^
MATLAB/software/liblinear-2.1/tron.cpp:173:14: style: The scope of the variable 'rnewTrnew' can be reduced. [variableScope]
 double rTr, rnewTrnew, alpha, beta, cgtol;
             ^
MATLAB/software/libsvm-3.22/matlab/libsvmread.c:202:14: style: Condition 'filename==NULL' is always false [knownConditionTrueFalse]
 if(filename == NULL)
             ^
MATLAB/software/libsvm-3.22/matlab/libsvmread.c:48:3: error: Common realloc mistake: 'line' nulled but not freed upon failure [memleakOnRealloc]
  line = (char *) realloc(line, max_line_len);
  ^
MATLAB/software/libsvm-3.22/matlab/libsvmread.c:40:6: style: The scope of the variable 'len' can be reduced. [variableScope]
 int len;
     ^
MATLAB/software/libsvm-3.22/matlab/libsvmread.c:59:28: style: The scope of the variable 'inst_max_index' can be reduced. [variableScope]
 int max_index, min_index, inst_max_index;
                           ^
MATLAB/software/libsvm-3.22/matlab/libsvmread.c:81:9: style: The scope of the variable 'idx' can be reduced. [variableScope]
  char *idx, *val;
        ^
MATLAB/software/libsvm-3.22/matlab/libsvmread.c:81:15: style: The scope of the variable 'val' can be reduced. [variableScope]
  char *idx, *val;
              ^
MATLAB/software/libsvm-3.22/matlab/libsvmread.c:83:7: style: The scope of the variable 'index' can be reduced. [variableScope]
  int index = 0;
      ^
MATLAB/software/libsvm-3.22/matlab/libsvmread.c:129:9: style: The scope of the variable 'idx' can be reduced. [variableScope]
  char *idx, *val, *label;
        ^
MATLAB/software/libsvm-3.22/matlab/libsvmread.c:129:15: style: The scope of the variable 'val' can be reduced. [variableScope]
  char *idx, *val, *label;
              ^
MATLAB/software/libsvm-3.22/matlab/libsvmwrite.c:75:4: portability: %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
   fprintf(fp," %lu:%g", (size_t)ir[k]+1, samples[k]);
   ^
MATLAB/software/libsvm-3.22/matlab/libsvmwrite.c:47:4: error: Resource leak: fp [resourceLeak]
   return;
   ^
MATLAB/software/libsvm-3.22/matlab/libsvmwrite.c:29:23: style: The scope of the variable 'low' can be reduced. [variableScope]
 mwIndex *ir, *jc, k, low, high;
                      ^
MATLAB/software/libsvm-3.22/matlab/libsvmwrite.c:29:28: style: The scope of the variable 'high' can be reduced. [variableScope]
 mwIndex *ir, *jc, k, low, high;
                           ^
MATLAB/software/libsvm-3.22/matlab/svm_model_matlab.c:195:9: style: Variable 'out_id' is assigned a value that is never used. [unreadVariable]
  out_id++;
        ^
MATLAB/software/libsvm-3.22/matlab/svm_model_matlab.c:369:5: style: Variable 'id' is assigned a value that is never used. [unreadVariable]
  id++;
    ^
MATLAB/software/libsvm-3.22/matlab/svmpredict.c:275:6: style: The scope of the variable 'prob_estimate_flag' can be reduced. [variableScope]
 int prob_estimate_flag = 0;
     ^
MATLAB/software/libsvm-3.22/matlab/svmtrain.c:68:9: style: The scope of the variable 'total_error' can be reduced. [variableScope]
 double total_error = 0;
        ^
MATLAB/software/libsvm-3.22/matlab/svmtrain.c:111:7: style: The scope of the variable 'cmd' can be reduced. [variableScope]
 char cmd[CMD_LEN];
      ^
MATLAB/software/libsvm-3.22/matlab/svmtrain.c:387:14: style: The scope of the variable 'error_msg' can be reduced. [variableScope]
 const char *error_msg;
             ^
MATLAB/software/libsvm-3.22/matlab/svmtrain.c:477:16: style: Local variable 'error_msg' shadows outer variable [shadowVariable]
   const char *error_msg;
               ^
MATLAB/software/libsvm-3.22/matlab/svmtrain.c:387:14: note: Shadowed declaration
 const char *error_msg;
             ^
MATLAB/software/libsvm-3.22/matlab/svmtrain.c:477:16: note: Shadow variable
   const char *error_msg;
               ^
MATLAB/software/libsvm-3.22/matlab/svmtrain.c:304:20: style: The scope of the variable 'low' can be reduced. [variableScope]
 mwIndex *ir, *jc, low, high, k;
                   ^
MATLAB/software/libsvm-3.22/matlab/svmtrain.c:304:25: style: The scope of the variable 'high' can be reduced. [variableScope]
 mwIndex *ir, *jc, low, high, k;
                        ^
MATLAB/software/libsvm-3.22/svm-predict.c:31:3: error: Common realloc mistake: 'line' nulled but not freed upon failure [memleakOnRealloc]
  line = (char *) realloc(line,max_line_len);
  ^
MATLAB/software/libsvm-3.22/svm-predict.c:96:5: error: Common realloc mistake: 'x' nulled but not freed upon failure [memleakOnRealloc]
    x = (struct svm_node *) realloc(x,max_nr_attr*sizeof(struct svm_node));
    ^
MATLAB/software/libsvm-3.22/svm-predict.c:23:6: style: The scope of the variable 'len' can be reduced. [variableScope]
 int len;
     ^
MATLAB/software/libsvm-3.22/svm-predict.c:80:9: style: The scope of the variable 'idx' can be reduced. [variableScope]
  char *idx, *val, *label, *endptr;
        ^
MATLAB/software/libsvm-3.22/svm-predict.c:80:15: style: The scope of the variable 'val' can be reduced. [variableScope]
  char *idx, *val, *label, *endptr;
              ^
MATLAB/software/libsvm-3.22/svm-scale.c:342:3: error: Common realloc mistake: 'line' nulled but not freed upon failure [memleakOnRealloc]
  line = (char *) realloc(line, max_line_len);
  ^
MATLAB/software/libsvm-3.22/svm-scale.c:219:7: style: The scope of the variable 'next_index' can be reduced. [variableScope]
  int next_index = 1;
      ^
MATLAB/software/libsvm-3.22/svm-scale.c:334:6: style: The scope of the variable 'len' can be reduced. [variableScope]
 int len;
     ^
MATLAB/software/libsvm-3.22/svm-toy/gtk/callbacks.cpp:215:8: style: Local variable 'j' shadows outer variable [shadowVariable]
  int *j = new int[XLEN];
       ^
MATLAB/software/libsvm-3.22/svm-toy/gtk/callbacks.cpp:106:8: note: Shadowed declaration
 int i,j;
       ^
MATLAB/software/libsvm-3.22/svm-toy/gtk/callbacks.cpp:215:8: note: Shadow variable
  int *j = new int[XLEN];
       ^
MATLAB/software/libsvm-3.22/svm-toy/gtk/callbacks.cpp:227:7: style: Local variable 'p' shadows outer variable [shadowVariable]
  int p = (int)(param.p * YLEN);
      ^
MATLAB/software/libsvm-3.22/svm-toy/gtk/callbacks.cpp:126:14: note: Shadowed declaration
 const char *p = gtk_entry_get_text(GTK_ENTRY(entry_option));
             ^
MATLAB/software/libsvm-3.22/svm-toy/gtk/callbacks.cpp:227:7: note: Shadow variable
  int p = (int)(param.p * YLEN);
      ^
MATLAB/software/libsvm-3.22/svm-toy/gtk/callbacks.cpp:395:31: style: Local variable 'p' shadows outer variable [shadowVariable]
    for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                              ^
MATLAB/software/libsvm-3.22/svm-toy/gtk/callbacks.cpp:385:15: note: Shadowed declaration
  const char *p = gtk_entry_get_text(GTK_ENTRY(entry_option));
              ^
MATLAB/software/libsvm-3.22/svm-toy/gtk/callbacks.cpp:395:31: note: Shadow variable
    for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                              ^
MATLAB/software/libsvm-3.22/svm-toy/gtk/callbacks.cpp:400:31: style: Local variable 'p' shadows outer variable [shadowVariable]
    for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                              ^
MATLAB/software/libsvm-3.22/svm-toy/gtk/callbacks.cpp:385:15: note: Shadowed declaration
  const char *p = gtk_entry_get_text(GTK_ENTRY(entry_option));
              ^
MATLAB/software/libsvm-3.22/svm-toy/gtk/callbacks.cpp:400:31: note: Shadow variable
    for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                              ^
MATLAB/software/libsvm-3.22/svm-toy/gtk/callbacks.cpp:78:74: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                                                                         ^
MATLAB/software/libsvm-3.22/svm-toy/gtk/callbacks.cpp:201:78: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for (list <point>::iterator q = point_list.begin(); q != point_list.end(); q++, i++)
                                                                             ^
MATLAB/software/libsvm-3.22/svm-toy/gtk/callbacks.cpp:263:78: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for (list <point>::iterator q = point_list.begin(); q != point_list.end(); q++, i++)
                                                                             ^
MATLAB/software/libsvm-3.22/svm-toy/gtk/callbacks.cpp:395:77: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                                                                            ^
MATLAB/software/libsvm-3.22/svm-toy/gtk/callbacks.cpp:400:77: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                                                                            ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:359:2: performance: Variable 'buffer' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 buffer = QPixmap(XLEN,YLEN);
 ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:200:9: style: Local variable 'j' shadows outer variable [shadowVariable]
   int *j = new int[XLEN];
        ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:91:9: note: Shadowed declaration
  int i,j;
        ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:200:9: note: Shadow variable
   int *j = new int[XLEN];
        ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:211:8: style: Local variable 'p' shadows outer variable [shadowVariable]
   int p = (int)(param.p * YLEN);
       ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:111:15: note: Shadowed declaration
  const char *p = input_line.text().toAscii().constData();
              ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:211:8: note: Shadow variable
   int p = (int)(param.p * YLEN);
       ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:301:32: style: Local variable 'p' shadows outer variable [shadowVariable]
     for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                               ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:291:16: note: Shadowed declaration
   const char *p = input_line.text().toAscii().constData();
               ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:301:32: note: Shadow variable
     for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                               ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:306:32: style: Local variable 'p' shadows outer variable [shadowVariable]
     for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                               ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:291:16: note: Shadowed declaration
   const char *p = input_line.text().toAscii().constData();
               ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:306:32: note: Shadow variable
     for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                               ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:75:75: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                                                                          ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:186:79: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
   for (list <point>::iterator q = point_list.begin(); q != point_list.end(); q++, i++)
                                                                              ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:243:79: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
   for (list <point>::iterator q = point_list.begin(); q != point_list.end(); q++, i++)
                                                                              ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:301:78: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
     for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                                                                             ^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:306:78: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
     for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                                                                             ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:291:8: style: Local variable 'j' shadows outer variable [shadowVariable]
  int *j = new int[XLEN];
       ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:180:8: note: Shadowed declaration
 int i,j;
       ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:291:8: note: Shadow variable
  int *j = new int[XLEN];
       ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:302:7: style: Local variable 'p' shadows outer variable [shadowVariable]
  int p = (int)(param.p * YLEN);
      ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:202:14: note: Shadowed declaration
 const char *p = str;
             ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:302:7: note: Shadow variable
  int p = (int)(param.p * YLEN);
      ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:303:11: style: Local variable 'i' shadows outer variable [shadowVariable]
  for(int i=1; i < XLEN; i++)
          ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:180:6: note: Shadowed declaration
 int i,j;
     ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:303:11: note: Shadow variable
  for(int i=1; i < XLEN; i++)
          ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:427:35: style: Local variable 'p' shadows outer variable [shadowVariable]
        for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                                  ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:417:19: note: Shadowed declaration
      const char *p = str;
                  ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:427:35: note: Shadow variable
        for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                                  ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:432:35: style: Local variable 'p' shadows outer variable [shadowVariable]
        for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                                  ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:417:19: note: Shadowed declaration
      const char *p = str;
                  ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:432:35: note: Shadow variable
        for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                                  ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:170:75: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(list<point>::iterator p = point_list.begin(); p != point_list.end(); p++)
                                                                          ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:277:77: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for (list<point>::iterator q = point_list.begin(); q != point_list.end(); q++, i++)
                                                                            ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:334:77: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for (list<point>::iterator q = point_list.begin(); q != point_list.end(); q++, i++)
                                                                            ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:427:81: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                                                                                ^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:432:81: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(list<point>::iterator p = point_list.begin(); p != point_list.end();p++)
                                                                                ^
MATLAB/software/libsvm-3.22/svm-train.c:75:3: error: Common realloc mistake: 'line' nulled but not freed upon failure [memleakOnRealloc]
  line = (char *) realloc(line,max_line_len);
  ^
MATLAB/software/libsvm-3.22/svm-train.c:67:6: style: The scope of the variable 'len' can be reduced. [variableScope]
 int len;
     ^
MATLAB/software/libsvm-3.22/svm-train.c:126:9: style: The scope of the variable 'total_error' can be reduced. [variableScope]
 double total_error = 0;
        ^
MATLAB/software/libsvm-3.22/svm-train.c:280:17: style: The scope of the variable 'inst_max_index' can be reduced. [variableScope]
 int max_index, inst_max_index, i;
                ^
MATLAB/software/libsvm-3.22/svm-train.c:284:20: style: The scope of the variable 'label' can be reduced. [variableScope]
 char *idx, *val, *label;
                   ^
MATLAB/software/libsvm-3.22/svm.cpp:1737:24: style: Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision. [unpreciseMathCall]
   fval += t[i]*fApB + log(1+exp(-fApB));
                       ^
MATLAB/software/libsvm-3.22/svm.cpp:1739:29: style: Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision. [unpreciseMathCall]
   fval += (t[i] - 1)*fApB +log(1+exp(fApB));
                            ^
MATLAB/software/libsvm-3.22/svm.cpp:1792:26: style: Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision. [unpreciseMathCall]
     newf += t[i]*fApB + log(1+exp(-fApB));
                         ^
MATLAB/software/libsvm-3.22/svm.cpp:1794:31: style: Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision. [unpreciseMathCall]
     newf += (t[i] - 1)*fApB +log(1+exp(fApB));
                              ^
MATLAB/software/libsvm-3.22/svm.cpp:395:2: warning: Member variable 'Solver::active_size' is not initialized in the constructor. [uninitMemberVar]
 Solver() {};
 ^
MATLAB/software/libsvm-3.22/svm.cpp:395:2: warning: Member variable 'Solver::y' is not initialized in the constructor. [uninitMemberVar]
 Solver() {};
 ^
MATLAB/software/libsvm-3.22/svm.cpp:395:2: warning: Member variable 'Solver::G' is not initialized in the constructor. [uninitMemberVar]
 Solver() {};
 ^
MATLAB/software/libsvm-3.22/svm.cpp:395:2: warning: Member variable 'Solver::alpha_status' is not initialized in the constructor. [uninitMemberVar]
 Solver() {};
 ^
MATLAB/software/libsvm-3.22/svm.cpp:395:2: warning: Member variable 'Solver::alpha' is not initialized in the constructor. [uninitMemberVar]
 Solver() {};
 ^
MATLAB/software/libsvm-3.22/svm.cpp:395:2: warning: Member variable 'Solver::Q' is not initialized in the constructor. [uninitMemberVar]
 Solver() {};
 ^
MATLAB/software/libsvm-3.22/svm.cpp:395:2: warning: Member variable 'Solver::QD' is not initialized in the constructor. [uninitMemberVar]
 Solver() {};
 ^
MATLAB/software/libsvm-3.22/svm.cpp:395:2: warning: Member variable 'Solver::eps' is not initialized in the constructor. [uninitMemberVar]
 Solver() {};
 ^
MATLAB/software/libsvm-3.22/svm.cpp:395:2: warning: Member variable 'Solver::Cp' is not initialized in the constructor. [uninitMemberVar]
 Solver() {};
 ^
MATLAB/software/libsvm-3.22/svm.cpp:395:2: warning: Member variable 'Solver::Cn' is not initialized in the constructor. [uninitMemberVar]
 Solver() {};
 ^
MATLAB/software/libsvm-3.22/svm.cpp:395:2: warning: Member variable 'Solver::p' is not initialized in the constructor. [uninitMemberVar]
 Solver() {};
 ^
MATLAB/software/libsvm-3.22/svm.cpp:395:2: warning: Member variable 'Solver::active_set' is not initialized in the constructor. [uninitMemberVar]
 Solver() {};
 ^
MATLAB/software/libsvm-3.22/svm.cpp:395:2: warning: Member variable 'Solver::G_bar' is not initialized in the constructor. [uninitMemberVar]
 Solver() {};
 ^
MATLAB/software/libsvm-3.22/svm.cpp:395:2: warning: Member variable 'Solver::l' is not initialized in the constructor. [uninitMemberVar]
 Solver() {};
 ^
MATLAB/software/libsvm-3.22/svm.cpp:395:2: warning: Member variable 'Solver::unshrink' is not initialized in the constructor. [uninitMemberVar]
 Solver() {};
 ^
MATLAB/software/libsvm-3.22/svm.cpp:1012:2: warning: Member variable 'Solver_NU::si' is not initialized in the constructor. [uninitMemberVar]
 Solver_NU() {}
 ^
MATLAB/software/libsvm-3.22/svm.cpp:90:7: performance:inconclusive: Technically the member function 'Cache::lru_delete' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void lru_delete(head_t *h);
      ^
MATLAB/software/libsvm-3.22/svm.cpp:110:13: note: Technically the member function 'Cache::lru_delete' can be static (but you may consider moving to unnamed namespace).
void Cache::lru_delete(head_t *h)
            ^
MATLAB/software/libsvm-3.22/svm.cpp:90:7: note: Technically the member function 'Cache::lru_delete' can be static (but you may consider moving to unnamed namespace).
 void lru_delete(head_t *h);
      ^
MATLAB/software/libsvm-3.22/svm.cpp:426:9: style:inconclusive: Technically the member function 'Solver::get_C' can be const. [functionConst]
 double get_C(int i)
        ^
MATLAB/software/libsvm-3.22/svm.cpp:438:7: style:inconclusive: Technically the member function 'Solver::is_upper_bound' can be const. [functionConst]
 bool is_upper_bound(int i) { return alpha_status[i] == UPPER_BOUND; }
      ^
MATLAB/software/libsvm-3.22/svm.cpp:439:7: style:inconclusive: Technically the member function 'Solver::is_lower_bound' can be const. [functionConst]
 bool is_lower_bound(int i) { return alpha_status[i] == LOWER_BOUND; }
      ^
MATLAB/software/libsvm-3.22/svm.cpp:440:7: style:inconclusive: Technically the member function 'Solver::is_free' can be const. [functionConst]
 bool is_free(int i) { return alpha_status[i] == FREE; }
      ^
MATLAB/software/libsvm-3.22/svm.cpp:280:3: warning: Class 'Kernel' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
  x_square = new double[l];
  ^
MATLAB/software/libsvm-3.22/svm.cpp:280:3: warning: Class 'Kernel' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
  x_square = new double[l];
  ^
MATLAB/software/libsvm-3.22/svm.cpp:1273:3: warning: Class 'SVC_Q' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
  cache = new Cache(prob.l,(long int)(param.cache_size*(1<<20)));
  ^
MATLAB/software/libsvm-3.22/svm.cpp:1273:3: warning: Class 'SVC_Q' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
  cache = new Cache(prob.l,(long int)(param.cache_size*(1<<20)));
  ^
MATLAB/software/libsvm-3.22/svm.cpp:1322:3: warning: Class 'ONE_CLASS_Q' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
  cache = new Cache(prob.l,(long int)(param.cache_size*(1<<20)));
  ^
MATLAB/software/libsvm-3.22/svm.cpp:1322:3: warning: Class 'ONE_CLASS_Q' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
  cache = new Cache(prob.l,(long int)(param.cache_size*(1<<20)));
  ^
MATLAB/software/libsvm-3.22/svm.cpp:1369:3: warning: Class 'SVR_Q' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
  cache = new Cache(l,(long int)(param.cache_size*(1<<20)));
  ^
MATLAB/software/libsvm-3.22/svm.cpp:1369:3: warning: Class 'SVR_Q' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
  cache = new Cache(l,(long int)(param.cache_size*(1<<20)));
  ^
MATLAB/software/libsvm-3.22/svm.cpp:209:18: style: The function 'get_Q' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual Qfloat *get_Q(int column, int len) const = 0;
                 ^
MATLAB/software/libsvm-3.22/svm.cpp:196:18: note: Virtual function in base class
 virtual Qfloat *get_Q(int column, int len) const = 0;
                 ^
MATLAB/software/libsvm-3.22/svm.cpp:209:18: note: Function in derived class
 virtual Qfloat *get_Q(int column, int len) const = 0;
                 ^
MATLAB/software/libsvm-3.22/svm.cpp:210:18: style: The function 'get_QD' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual double *get_QD() const = 0;
                 ^
MATLAB/software/libsvm-3.22/svm.cpp:197:18: note: Virtual function in base class
 virtual double *get_QD() const = 0;
                 ^
MATLAB/software/libsvm-3.22/svm.cpp:210:18: note: Function in derived class
 virtual double *get_QD() const = 0;
                 ^
MATLAB/software/libsvm-3.22/svm.cpp:211:15: style: The function 'swap_index' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual void swap_index(int i, int j) const // no so const...
              ^
MATLAB/software/libsvm-3.22/svm.cpp:198:15: note: Virtual function in base class
 virtual void swap_index(int i, int j) const = 0;
              ^
MATLAB/software/libsvm-3.22/svm.cpp:211:15: note: Function in derived class
 virtual void swap_index(int i, int j) const // no so const...
              ^
MATLAB/software/libsvm-3.22/svm.cpp:1022:6: style: The function 'select_working_set' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 int select_working_set(int &i, int &j);
     ^
MATLAB/software/libsvm-3.22/svm.cpp:443:14: note: Virtual function in base class
 virtual int select_working_set(int &i, int &j);
             ^
MATLAB/software/libsvm-3.22/svm.cpp:1022:6: note: Function in derived class
 int select_working_set(int &i, int &j);
     ^
MATLAB/software/libsvm-3.22/svm.cpp:1023:9: style: The function 'calculate_rho' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 double calculate_rho();
        ^
MATLAB/software/libsvm-3.22/svm.cpp:444:17: note: Virtual function in base class
 virtual double calculate_rho();
                ^
MATLAB/software/libsvm-3.22/svm.cpp:1023:9: note: Function in derived class
 double calculate_rho();
        ^
MATLAB/software/libsvm-3.22/svm.cpp:1025:7: style: The function 'do_shrinking' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void do_shrinking();
      ^
MATLAB/software/libsvm-3.22/svm.cpp:445:15: note: Virtual function in base class
 virtual void do_shrinking();
              ^
MATLAB/software/libsvm-3.22/svm.cpp:1025:7: note: Function in derived class
 void do_shrinking();
      ^
MATLAB/software/libsvm-3.22/svm.cpp:1279:10: style: The function 'get_Q' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 Qfloat *get_Q(int i, int len) const
         ^
MATLAB/software/libsvm-3.22/svm.cpp:209:18: note: Virtual function in base class
 virtual Qfloat *get_Q(int column, int len) const = 0;
                 ^
MATLAB/software/libsvm-3.22/svm.cpp:1279:10: note: Function in derived class
 Qfloat *get_Q(int i, int len) const
         ^
MATLAB/software/libsvm-3.22/svm.cpp:1291:10: style: The function 'get_QD' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 double *get_QD() const
         ^
MATLAB/software/libsvm-3.22/svm.cpp:210:18: note: Virtual function in base class
 virtual double *get_QD() const = 0;
                 ^
MATLAB/software/libsvm-3.22/svm.cpp:1291:10: note: Function in derived class
 double *get_QD() const
         ^
MATLAB/software/libsvm-3.22/svm.cpp:1296:7: style: The function 'swap_index' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void swap_index(int i, int j) const
      ^
MATLAB/software/libsvm-3.22/svm.cpp:211:15: note: Virtual function in base class
 virtual void swap_index(int i, int j) const // no so const...
              ^
MATLAB/software/libsvm-3.22/svm.cpp:1296:7: note: Function in derived class
 void swap_index(int i, int j) const
      ^
MATLAB/software/libsvm-3.22/svm.cpp:1328:10: style: The function 'get_Q' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 Qfloat *get_Q(int i, int len) const
         ^
MATLAB/software/libsvm-3.22/svm.cpp:209:18: note: Virtual function in base class
 virtual Qfloat *get_Q(int column, int len) const = 0;
                 ^
MATLAB/software/libsvm-3.22/svm.cpp:1328:10: note: Function in derived class
 Qfloat *get_Q(int i, int len) const
         ^
MATLAB/software/libsvm-3.22/svm.cpp:1340:10: style: The function 'get_QD' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 double *get_QD() const
         ^
MATLAB/software/libsvm-3.22/svm.cpp:210:18: note: Virtual function in base class
 virtual double *get_QD() const = 0;
                 ^
MATLAB/software/libsvm-3.22/svm.cpp:1340:10: note: Function in derived class
 double *get_QD() const
         ^
MATLAB/software/libsvm-3.22/svm.cpp:1345:7: style: The function 'swap_index' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void swap_index(int i, int j) const
      ^
MATLAB/software/libsvm-3.22/svm.cpp:211:15: note: Virtual function in base class
 virtual void swap_index(int i, int j) const // no so const...
              ^
MATLAB/software/libsvm-3.22/svm.cpp:1345:7: note: Function in derived class
 void swap_index(int i, int j) const
      ^
MATLAB/software/libsvm-3.22/svm.cpp:1387:7: style: The function 'swap_index' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void swap_index(int i, int j) const
      ^
MATLAB/software/libsvm-3.22/svm.cpp:211:15: note: Virtual function in base class
 virtual void swap_index(int i, int j) const // no so const...
              ^
MATLAB/software/libsvm-3.22/svm.cpp:1387:7: note: Function in derived class
 void swap_index(int i, int j) const
      ^
MATLAB/software/libsvm-3.22/svm.cpp:1394:10: style: The function 'get_Q' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 Qfloat *get_Q(int i, int len) const
         ^
MATLAB/software/libsvm-3.22/svm.cpp:209:18: note: Virtual function in base class
 virtual Qfloat *get_Q(int column, int len) const = 0;
                 ^
MATLAB/software/libsvm-3.22/svm.cpp:1394:10: note: Function in derived class
 Qfloat *get_Q(int i, int len) const
         ^
MATLAB/software/libsvm-3.22/svm.cpp:1413:10: style: The function 'get_QD' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 double *get_QD() const
         ^
MATLAB/software/libsvm-3.22/svm.cpp:210:18: note: Virtual function in base class
 virtual double *get_QD() const = 0;
                 ^
MATLAB/software/libsvm-3.22/svm.cpp:1413:10: note: Function in derived class
 double *get_QD() const
         ^
MATLAB/software/libsvm-3.22/svm.cpp:2042:5: error: Common realloc mistake: 'label' nulled but not freed upon failure [memleakOnRealloc]
    label = (int *)realloc(label,max_nr_class*sizeof(int));
    ^
MATLAB/software/libsvm-3.22/svm.cpp:2043:5: error: Common realloc mistake: 'count' nulled but not freed upon failure [memleakOnRealloc]
    count = (int *)realloc(count,max_nr_class*sizeof(int));
    ^
MATLAB/software/libsvm-3.22/svm.cpp:2757:3: error: Common realloc mistake: 'line' nulled but not freed upon failure [memleakOnRealloc]
  line = (char *) realloc(line,max_line_len);
  ^
MATLAB/software/libsvm-3.22/svm.cpp:3137:6: error: Common realloc mistake: 'label' nulled but not freed upon failure [memleakOnRealloc]
     label = (int *)realloc(label,max_nr_class*sizeof(int));
     ^
MATLAB/software/libsvm-3.22/svm.cpp:3138:6: error: Common realloc mistake: 'count' nulled but not freed upon failure [memleakOnRealloc]
     count = (int *)realloc(count,max_nr_class*sizeof(int));
     ^
MATLAB/software/libsvm-3.22/svm.cpp:96:9: style: C-style pointer casting [cstyleCast]
 head = (head_t *)calloc(l,sizeof(head_t)); // initialized to 0
        ^
MATLAB/software/libsvm-3.22/svm.cpp:2094:21: style: C-style pointer casting [cstyleCast]
 svm_model *model = Malloc(svm_model,1);
                    ^
MATLAB/software/libsvm-3.22/svm.cpp:2183:26: style: C-style pointer casting [cstyleCast]
  decision_function *f = Malloc(decision_function,nr_class*(nr_class-1)/2);
                         ^
MATLAB/software/libsvm-3.22/svm.cpp:2900:21: style: C-style pointer casting [cstyleCast]
 svm_model *model = Malloc(svm_model,1);
                    ^
MATLAB/software/libsvm-3.22/svm.cpp:2953:20: style: C-style pointer casting [cstyleCast]
 if(l>0) x_space = Malloc(svm_node,elements);
                   ^
MATLAB/software/libsvm-3.22/svm.cpp:1491:9: style: Same expression used in consecutive assignments of 'sum_pos' and 'sum_neg'. [duplicateAssignExpression]
 double sum_pos = nu*l/2;
        ^
MATLAB/software/libsvm-3.22/svm.cpp:1492:9: note: Same expression used in consecutive assignments of 'sum_pos' and 'sum_neg'.
 double sum_neg = nu*l/2;
        ^
MATLAB/software/libsvm-3.22/svm.cpp:1491:9: note: Same expression used in consecutive assignments of 'sum_pos' and 'sum_neg'.
 double sum_pos = nu*l/2;
        ^
MATLAB/software/libsvm-3.22/svm.cpp:1282:14: style: The scope of the variable 'j' can be reduced. [variableScope]
  int start, j;
             ^
MATLAB/software/libsvm-3.22/svm.cpp:1331:14: style: The scope of the variable 'j' can be reduced. [variableScope]
  int start, j;
             ^
MATLAB/software/libsvm-3.22/svm.cpp:1723:18: style: The scope of the variable 'h11' can be reduced. [variableScope]
 double fApB,p,q,h11,h22,h21,g1,g2,det,dA,dB,gd,stepsize;
                 ^
MATLAB/software/libsvm-3.22/svm.cpp:1723:22: style: The scope of the variable 'h22' can be reduced. [variableScope]
 double fApB,p,q,h11,h22,h21,g1,g2,det,dA,dB,gd,stepsize;
                     ^
MATLAB/software/libsvm-3.22/svm.cpp:1723:26: style: The scope of the variable 'h21' can be reduced. [variableScope]
 double fApB,p,q,h11,h22,h21,g1,g2,det,dA,dB,gd,stepsize;
                         ^
MATLAB/software/libsvm-3.22/svm.cpp:1723:30: style: The scope of the variable 'g1' can be reduced. [variableScope]
 double fApB,p,q,h11,h22,h21,g1,g2,det,dA,dB,gd,stepsize;
                             ^
MATLAB/software/libsvm-3.22/svm.cpp:1723:33: style: The scope of the variable 'g2' can be reduced. [variableScope]
 double fApB,p,q,h11,h22,h21,g1,g2,det,dA,dB,gd,stepsize;
                                ^
MATLAB/software/libsvm-3.22/svm.cpp:1723:36: style: The scope of the variable 'det' can be reduced. [variableScope]
 double fApB,p,q,h11,h22,h21,g1,g2,det,dA,dB,gd,stepsize;
                                   ^
MATLAB/software/libsvm-3.22/svm.cpp:1723:40: style: The scope of the variable 'dA' can be reduced. [variableScope]
 double fApB,p,q,h11,h22,h21,g1,g2,det,dA,dB,gd,stepsize;
                                       ^
MATLAB/software/libsvm-3.22/svm.cpp:1723:43: style: The scope of the variable 'dB' can be reduced. [variableScope]
 double fApB,p,q,h11,h22,h21,g1,g2,det,dA,dB,gd,stepsize;
                                          ^
MATLAB/software/libsvm-3.22/svm.cpp:1723:46: style: The scope of the variable 'gd' can be reduced. [variableScope]
 double fApB,p,q,h11,h22,h21,g1,g2,det,dA,dB,gd,stepsize;
                                             ^
MATLAB/software/libsvm-3.22/svm.cpp:1723:49: style: The scope of the variable 'stepsize' can be reduced. [variableScope]
 double fApB,p,q,h11,h22,h21,g1,g2,det,dA,dB,gd,stepsize;
                                                ^
MATLAB/software/libsvm-3.22/svm.cpp:1835:9: style: The scope of the variable 'pQp' can be reduced. [variableScope]
 double pQp, eps=0.005/k;
        ^
MATLAB/software/libsvm-3.22/svm.cpp:2749:6: style: The scope of the variable 'len' can be reduced. [variableScope]
 int len;
     ^
MATLAB/software/libsvm-3.22/svm.cpp:94:18: style:inconclusive: Function 'Cache' argument 1 names different: declaration 'l' definition 'l_'. [funcArgNamesDifferent]
Cache::Cache(int l_,long int size_):l(l_),size(size_)
                 ^
MATLAB/software/libsvm-3.22/svm.cpp:70:12: note: Function 'Cache' argument 1 names different: declaration 'l' definition 'l_'.
 Cache(int l,long int size);
           ^
MATLAB/software/libsvm-3.22/svm.cpp:94:18: note: Function 'Cache' argument 1 names different: declaration 'l' definition 'l_'.
Cache::Cache(int l_,long int size_):l(l_),size(size_)
                 ^
MATLAB/software/libsvm-3.22/svm.cpp:94:30: style:inconclusive: Function 'Cache' argument 2 names different: declaration 'size' definition 'size_'. [funcArgNamesDifferent]
Cache::Cache(int l_,long int size_):l(l_),size(size_)
                             ^
MATLAB/software/libsvm-3.22/svm.cpp:70:23: note: Function 'Cache' argument 2 names different: declaration 'size' definition 'size_'.
 Cache(int l,long int size);
                      ^
MATLAB/software/libsvm-3.22/svm.cpp:94:30: note: Function 'Cache' argument 2 names different: declaration 'size' definition 'size_'.
Cache::Cache(int l_,long int size_):l(l_),size(size_)
                             ^
MATLAB/software/libsvm-3.22/svm.cpp:253:42: style:inconclusive: Function 'Kernel' argument 2 names different: declaration 'x' definition 'x_'. [funcArgNamesDifferent]
Kernel::Kernel(int l, svm_node * const * x_, const svm_parameter& param)
                                         ^
MATLAB/software/libsvm-3.22/svm.cpp:204:35: note: Function 'Kernel' argument 2 names different: declaration 'x' definition 'x_'.
 Kernel(int l, svm_node * const * x, const svm_parameter& param);
                                  ^
MATLAB/software/libsvm-3.22/svm.cpp:253:42: note: Function 'Kernel' argument 2 names different: declaration 'x' definition 'x_'.
Kernel::Kernel(int l, svm_node * const * x_, const svm_parameter& param)
                                         ^
MATLAB/software/libsvm-3.22/svm.cpp:786:37: style:inconclusive: Function 'select_working_set' argument 1 names different: declaration 'i' definition 'out_i'. [funcArgNamesDifferent]
int Solver::select_working_set(int &out_i, int &out_j)
                                    ^
MATLAB/software/libsvm-3.22/svm.cpp:443:38: note: Function 'select_working_set' argument 1 names different: declaration 'i' definition 'out_i'.
 virtual int select_working_set(int &i, int &j);
                                     ^
MATLAB/software/libsvm-3.22/svm.cpp:786:37: note: Function 'select_working_set' argument 1 names different: declaration 'i' definition 'out_i'.
int Solver::select_working_set(int &out_i, int &out_j)
                                    ^
MATLAB/software/libsvm-3.22/svm.cpp:786:49: style:inconclusive: Function 'select_working_set' argument 2 names different: declaration 'j' definition 'out_j'. [funcArgNamesDifferent]
int Solver::select_working_set(int &out_i, int &out_j)
                                                ^
MATLAB/software/libsvm-3.22/svm.cpp:443:46: note: Function 'select_working_set' argument 2 names different: declaration 'j' definition 'out_j'.
 virtual int select_working_set(int &i, int &j);
                                             ^
MATLAB/software/libsvm-3.22/svm.cpp:786:49: note: Function 'select_working_set' argument 2 names different: declaration 'j' definition 'out_j'.
int Solver::select_working_set(int &out_i, int &out_j)
                                                ^
MATLAB/software/libsvm-3.22/svm.cpp:1029:40: style:inconclusive: Function 'select_working_set' argument 1 names different: declaration 'i' definition 'out_i'. [funcArgNamesDifferent]
int Solver_NU::select_working_set(int &out_i, int &out_j)
                                       ^
MATLAB/software/libsvm-3.22/svm.cpp:1022:30: note: Function 'select_working_set' argument 1 names different: declaration 'i' definition 'out_i'.
 int select_working_set(int &i, int &j);
                             ^
MATLAB/software/libsvm-3.22/svm.cpp:1029:40: note: Function 'select_working_set' argument 1 names different: declaration 'i' definition 'out_i'.
int Solver_NU::select_working_set(int &out_i, int &out_j)
                                       ^
MATLAB/software/libsvm-3.22/svm.cpp:1029:52: style:inconclusive: Function 'select_working_set' argument 2 names different: declaration 'j' definition 'out_j'. [funcArgNamesDifferent]
int Solver_NU::select_working_set(int &out_i, int &out_j)
                                                   ^
MATLAB/software/libsvm-3.22/svm.cpp:1022:38: note: Function 'select_working_set' argument 2 names different: declaration 'j' definition 'out_j'.
 int select_working_set(int &i, int &j);
                                     ^
MATLAB/software/libsvm-3.22/svm.cpp:1029:52: note: Function 'select_working_set' argument 2 names different: declaration 'j' definition 'out_j'.
int Solver_NU::select_working_set(int &out_i, int &out_j)
                                                   ^
MATLAB/software/libsvm-3.22/svm.cpp:2932:5: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
  p = strtok(line,":");
    ^
MATLAB/software/nauty26r7/NRswitchg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/NRswitchg.c:162:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 t = CPUTIME;
^
MATLAB/software/nauty26r7/NRswitchg.c:189:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 t = CPUTIME - t;
^
MATLAB/software/nauty26r7/NRswitchg.c:87:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/NRswitchg.c:26:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 set Nset[MAXM];
^
MATLAB/software/nauty26r7/NRswitchg.c:27:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 set Rset[MAXM];
^
MATLAB/software/nauty26r7/NRswitchg.c:81:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 graph gc[MAXN*MAXM],h[MAXN*MAXM];
^
MATLAB/software/nauty26r7/addedgeg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/addedgeg.c:31:11: style: The scope of the variable 'gv1' can be reduced. [variableScope]
 set *gv,*gv1,*gv2;
          ^
MATLAB/software/nauty26r7/addedgeg.c:54:18: style: The scope of the variable 'gv1' can be reduced. [variableScope]
        set *gv,*gv1,*gv2,*gv3;
                 ^
MATLAB/software/nauty26r7/addedgeg.c:199:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 t = CPUTIME;
^
MATLAB/software/nauty26r7/addedgeg.c:273:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 t = CPUTIME - t;
^
MATLAB/software/nauty26r7/addedgeg.c:105:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/addedgeg.c:95:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 graph h[MAXN*MAXM];
^
MATLAB/software/nauty26r7/addedgeg.c:96:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int deg[MAXN],dist[MAXN];
^
MATLAB/software/nauty26r7/addedgeg.c:97:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 boolean okdist[MAXN+1];
^
MATLAB/software/nauty26r7/amtog.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/amtog.c:212:37: style:inconclusive: Boolean expression 'i!=j' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
                    val = ((i != j) & compl) ^ (s[0] == ochar);
                                    ^
MATLAB/software/nauty26r7/amtog.c:164:12: warning:inconclusive: Width 1 given in format string (no. 1) is smaller than destination buffer 's[10]'. [invalidScanfFormatWidth_smaller]
    while (fscanf(infile,"%1s",s) == 1)
           ^
MATLAB/software/nauty26r7/amtog.c:204:21: warning:inconclusive: Width 1 given in format string (no. 1) is smaller than destination buffer 's[10]'. [invalidScanfFormatWidth_smaller]
                if (fscanf(infile,"%1s",s) != 1)
                    ^
MATLAB/software/nauty26r7/amtog.c:61:12: style: Variable 'nowarn' is assigned a value that is never used. [unreadVariable]
    nowarn = qswitch = nswitch = hswitch = FALSE;
           ^
MATLAB/software/nauty26r7/amtog.c:80:22: style: Variable 'nowarn' is assigned a value that is never used. [unreadVariable]
                else SWBOOLEAN('w',nowarn)
                     ^
MATLAB/software/nauty26r7/amtog.c:58:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/amtog.c:53:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    graph g[MAXN*MAXM];
^
MATLAB/software/nauty26r7/amtog.c:146:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (nswitch && n > MAXN)
^
MATLAB/software/nauty26r7/amtog.c:175:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            if (n < 1 || n > MAXN || m > MAXM)
^
MATLAB/software/nauty26r7/biplabg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/biplabg.c:114:2: error: Uninitialized variable: codetype [uninitvar]
 NODIGRAPHSYET(codetype);
 ^
MATLAB/software/nauty26r7/biplabg.c:144:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 t = CPUTIME;
^
MATLAB/software/nauty26r7/biplabg.c:161:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 t = CPUTIME - t;
^
MATLAB/software/nauty26r7/biplabg.c:69:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/biplabg.c:28:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int colour[MAXN];
^
MATLAB/software/nauty26r7/biplabg.c:29:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int lab[MAXN];
^
MATLAB/software/nauty26r7/biplabg.c:64:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 graph h[MAXN*MAXM];
^
MATLAB/software/nauty26r7/bliss2dre.c:44:9: style: Unused variable: haveptn [unusedVariable]
    int haveptn;
        ^
MATLAB/software/nauty26r7/blisstog.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/blisstog.c:138:11: style: The scope of the variable 'infile' can be reduced. [variableScope]
    FILE *infile;
          ^
MATLAB/software/nauty26r7/blisstog.c:139:9: style: The scope of the variable 'j' can be reduced. [variableScope]
    int j,firstarg;
        ^
MATLAB/software/nauty26r7/blisstog.c:141:12: style: The scope of the variable 'flen' can be reduced. [variableScope]
    size_t flen;
           ^
MATLAB/software/nauty26r7/blisstog.c:142:13: style: The scope of the variable 'ispipe' can be reduced. [variableScope]
    boolean ispipe;
            ^
MATLAB/software/nauty26r7/blisstog.c:144:10: style: The scope of the variable 'zcmd' can be reduced. [variableScope]
    char zcmd[515];
         ^
MATLAB/software/nauty26r7/blisstog.c:40:9: style: Unused variable: haveptn [unusedVariable]
    int haveptn;
        ^
MATLAB/software/nauty26r7/blisstog.c:146:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/callgeng.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/canonical.c:68:7: style: The scope of the variable 'k' can be reduced. [variableScope]
  int k = 0;
      ^
MATLAB/software/nauty26r7/canonical.c:68:9: style: Variable 'k' is assigned a value that is never used. [unreadVariable]
  int k = 0;
        ^
MATLAB/software/nauty26r7/catg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/catg.c:75:17: error: Common realloc mistake: 'head' nulled but not freed upon failure [memleakOnRealloc]
                DYNREALLOC(char,head,head_sz,head_sz+100,"catg");
                ^
MATLAB/software/nauty26r7/catg.c:133:17: error: Common realloc mistake: 'filename' nulled but not freed upon failure [memleakOnRealloc]
                DYNREALLOC(char*,filename,filename_sz,
                ^
MATLAB/software/nauty26r7/catg.c:25:11: style: The scope of the variable 'i' can be reduced. [variableScope]
    int c,i;
          ^
MATLAB/software/nauty26r7/catg.c:98:11: style: The scope of the variable 'infilename' can be reduced. [variableScope]
    char *infilename,*head;
          ^
MATLAB/software/nauty26r7/catg.c:99:11: style: The scope of the variable 'infile' can be reduced. [variableScope]
    FILE *infile;
          ^
MATLAB/software/nauty26r7/catg.c:105:12: style: The scope of the variable 'nr' can be reduced. [variableScope]
    size_t nr;
           ^
MATLAB/software/nauty26r7/catg.c:108:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/checks6.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/checks6.c:26:7: style: The scope of the variable 'gj' can be reduced. [variableScope]
 set *gj;
      ^
MATLAB/software/nauty26r7/checks6.c:137:16: style: The scope of the variable 's' can be reduced. [variableScope]
 char *arg,sw,*s;
               ^
MATLAB/software/nauty26r7/checks6.c:25:19: style: Unused variable: pq [unusedVariable]
        char *p,x,pq;
                  ^
MATLAB/software/nauty26r7/checks6.c:27:7: style: Unused variable: ii [unusedVariable]
 long ii;
      ^
MATLAB/software/nauty26r7/checks6.c:184:30: style: Variable 'infilename' is assigned a value that is never used. [unreadVariable]
 if (!infilename) infilename = "stdin";
                             ^
MATLAB/software/nauty26r7/checks6.c:188:18: style: Variable 'outfilename' is assigned a value that is never used. [unreadVariable]
     outfilename = "stdout";
                 ^
MATLAB/software/nauty26r7/checks6.c:131:6: style: Unused variable: m [unusedVariable]
 int m,n,codetype;
     ^
MATLAB/software/nauty26r7/checks6.c:131:8: style: Unused variable: n [unusedVariable]
 int m,n,codetype;
       ^
MATLAB/software/nauty26r7/checks6.c:143:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/complg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/complg.c:193:17: warning:inconclusive: Found suspicious operator '~' [constStatement]
                compl(g,m,n,gc,Lswitch);
                ^
MATLAB/software/nauty26r7/complg.c:220:17: warning:inconclusive: Found suspicious operator '~' [constStatement]
                compl(g,m,n,gc,Lswitch);
                ^
MATLAB/software/nauty26r7/complg.c:241:13: warning:inconclusive: Found suspicious operator '~' [constStatement]
            compl(g,m,n,gc,Lswitch);
            ^
MATLAB/software/nauty26r7/complg.c:164:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME;
^
MATLAB/software/nauty26r7/complg.c:259:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME - t;
^
MATLAB/software/nauty26r7/complg.c:78:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/complg.c:32:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    set all[MAXM];
^
MATLAB/software/nauty26r7/complg.c:71:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    graph gc[MAXN*MAXM],h[MAXN*MAXM],hc[MAXN*MAXM];
^
MATLAB/software/nauty26r7/converseg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/converseg.c:47:12: style: The scope of the variable 'g' can be reduced. [variableScope]
    graph *g;
           ^
MATLAB/software/nauty26r7/converseg.c:129:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME;
^
MATLAB/software/nauty26r7/converseg.c:144:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME - t;
^
MATLAB/software/nauty26r7/converseg.c:53:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/copyg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/copyg.c:51:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/cubhamg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/cubhamg.c:200:48: style: The scope of the variable 'gv' can be reduced. [variableScope]
    int xdin[MAXN],xdout[MAXN],xnin,v,i,j,k,l,*gv,xin,xout,has1;
                                               ^
MATLAB/software/nauty26r7/cubhamg.c:200:51: style: The scope of the variable 'xin' can be reduced. [variableScope]
    int xdin[MAXN],xdout[MAXN],xnin,v,i,j,k,l,*gv,xin,xout,has1;
                                                  ^
MATLAB/software/nauty26r7/cubhamg.c:200:55: style: The scope of the variable 'xout' can be reduced. [variableScope]
    int xdin[MAXN],xdout[MAXN],xnin,v,i,j,k,l,*gv,xin,xout,has1;
                                                      ^
MATLAB/software/nauty26r7/cubhamg.c:283:24: style: The scope of the variable 'enop' can be reduced. [variableScope]
        int *gpx,*gpy,*enop,x,y,i,j,n,en;
                       ^
MATLAB/software/nauty26r7/cubhamg.c:318:13: style: The scope of the variable 'v' can be reduced. [variableScope]
        int v,w,i,status;
            ^
MATLAB/software/nauty26r7/cubhamg.c:320:18: style: The scope of the variable 'enop' can be reduced. [variableScope]
        int *gp,*enop,*class,*din,*dout;
                 ^
MATLAB/software/nauty26r7/cubhamg.c:549:15: style: The scope of the variable 'j' can be reduced. [variableScope]
        int i,j,status,nin,v,w;
              ^
MATLAB/software/nauty26r7/cubhamg.c:1137:6: style: The scope of the variable 'vi' can be reduced. [variableScope]
 int vi,nbad,pluswhy;
     ^
MATLAB/software/nauty26r7/cubhamg.c:1537:8: style: The scope of the variable 'j' can be reduced. [variableScope]
 int i,j,nde;
       ^
MATLAB/software/nauty26r7/cubhamg.c:1573:12: style: The scope of the variable 'vi' can be reduced. [variableScope]
 int n,i,j,vi;
           ^
MATLAB/software/nauty26r7/cubhamg.c:1333:39: style: Local variable 'stack' shadows outer variable [shadowVariable]
        int numvis,num[MAXN],lp[MAXN],stack[MAXN];
                                      ^
MATLAB/software/nauty26r7/cubhamg.c:174:24: note: Shadowed declaration
static vertvec onstack,stack;       /* stack contains vertex numbers */
                       ^
MATLAB/software/nauty26r7/cubhamg.c:1333:39: note: Shadow variable
        int numvis,num[MAXN],lp[MAXN],stack[MAXN];
                                      ^
MATLAB/software/nauty26r7/cubhamg.c:1391:39: style: Local variable 'stack' shadows outer variable [shadowVariable]
        int numvis,num[MAXN],lp[MAXN],stack[MAXN];
                                      ^
MATLAB/software/nauty26r7/cubhamg.c:174:24: note: Shadowed declaration
static vertvec onstack,stack;       /* stack contains vertex numbers */
                       ^
MATLAB/software/nauty26r7/cubhamg.c:1391:39: note: Shadow variable
        int numvis,num[MAXN],lp[MAXN],stack[MAXN];
                                      ^
MATLAB/software/nauty26r7/cubhamg.c:1453:39: style: Local variable 'stack' shadows outer variable [shadowVariable]
        int numvis,num[MAXN],lp[MAXN],stack[MAXN];
                                      ^
MATLAB/software/nauty26r7/cubhamg.c:174:24: note: Shadowed declaration
static vertvec onstack,stack;       /* stack contains vertex numbers */
                       ^
MATLAB/software/nauty26r7/cubhamg.c:1453:39: note: Shadow variable
        int numvis,num[MAXN],lp[MAXN],stack[MAXN];
                                      ^
MATLAB/software/nauty26r7/cubhamg.c:1055:8: style: Variable 'a' is assigned a value that is never used. [unreadVariable]
     a = cub[x][1];
       ^
MATLAB/software/nauty26r7/cubhamg.c:1061:15: style: Variable 'a' is assigned a value that is never used. [unreadVariable]
            a = cub[x][0];
              ^
MATLAB/software/nauty26r7/cubhamg.c:1067:15: style: Variable 'a' is assigned a value that is never used. [unreadVariable]
            a = cub[x][0];
              ^
MATLAB/software/nauty26r7/cubhamg.c:1604:23: style: Unused variable: m [unusedVariable]
        int ch,weight,m,n,ne,i,namesgot,nl;
                      ^
MATLAB/software/nauty26r7/cubhamg.c:1786:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 t0 = CPUTIME;
^
MATLAB/software/nauty26r7/cubhamg.c:1954:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 t1 = CPUTIME;
^
MATLAB/software/nauty26r7/deledgeg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/deledgeg.c:129:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME;
^
MATLAB/software/nauty26r7/deledgeg.c:209:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME - t;
^
MATLAB/software/nauty26r7/deledgeg.c:45:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/deledgeg.c:38:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    graph h[MAXN*MAXM];
^
MATLAB/software/nauty26r7/deledgeg.c:39:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int deg[MAXN];
^
MATLAB/software/nauty26r7/delptg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/delptg.c:225:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME;
^
MATLAB/software/nauty26r7/delptg.c:254:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME - t;
^
MATLAB/software/nauty26r7/delptg.c:133:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/delptg.c:36:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    graph gx[MAXN*MAXM];
^
MATLAB/software/nauty26r7/delptg.c:37:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    graph hx[MAXN*MAXM];
^
MATLAB/software/nauty26r7/delptg.c:38:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int lab[MAXN];
^
MATLAB/software/nauty26r7/delptg.c:126:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    boolean degok[MAXN];
^
MATLAB/software/nauty26r7/delptg.c:127:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    boolean del[MAXN];
^
MATLAB/software/nauty26r7/directg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/directg.c:143:13: style: The scope of the variable 'k' can be reduced. [variableScope]
    int i,j,k;
            ^
MATLAB/software/nauty26r7/directg.c:181:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
MATLAB/software/nauty26r7/directg.c:682:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME;
^
MATLAB/software/nauty26r7/directg.c:708:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME - t;
^
MATLAB/software/nauty26r7/directg.c:105:0: information: Skipping configuration 'DEGPRUNE' since the value of 'DEGPRUNE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern int DEGPRUNE(int*,int*,int,int);
^
MATLAB/software/nauty26r7/directg.c:326:0: information: Skipping configuration 'DEGPRUNE' since the value of 'DEGPRUNE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        if (lastlev[w0] == level && DEGPRUNE(indeg,outdeg,w0,n)
^
MATLAB/software/nauty26r7/directg.c:327:0: information: Skipping configuration 'DEGPRUNE' since the value of 'DEGPRUNE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
         || lastlev[w1] == level && DEGPRUNE(indeg,outdeg,w1,n))
^
MATLAB/software/nauty26r7/directg.c:342:0: information: Skipping configuration 'DEGPRUNE' since the value of 'DEGPRUNE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        if (lastlev[w0] == level && DEGPRUNE(indeg,outdeg,w0,n)
^
MATLAB/software/nauty26r7/directg.c:343:0: information: Skipping configuration 'DEGPRUNE' since the value of 'DEGPRUNE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
         || lastlev[w1] == level && DEGPRUNE(indeg,outdeg,w1,n))
^
MATLAB/software/nauty26r7/directg.c:365:0: information: Skipping configuration 'DEGPRUNE' since the value of 'DEGPRUNE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        if (lastlev[w0] == level && DEGPRUNE(indeg,outdeg,w0,n)
^
MATLAB/software/nauty26r7/directg.c:366:0: information: Skipping configuration 'DEGPRUNE' since the value of 'DEGPRUNE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
         || lastlev[w1] == level && DEGPRUNE(indeg,outdeg,w1,n))
^
MATLAB/software/nauty26r7/directg.c:441:0: information: Skipping configuration 'DEGPRUNE' since the value of 'DEGPRUNE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     if (DEGPRUNE(indeg,outdeg,i,n)) break;
^
MATLAB/software/nauty26r7/directg.c:502:0: information: Skipping configuration 'DEGPRUNE' since the value of 'DEGPRUNE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        if (DEGPRUNE(indeg,outdeg,lab[i],n)) return;
^
MATLAB/software/nauty26r7/directg.c:545:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/directg.c:109:0: information: Skipping configuration 'INPUTGRAPH' since the value of 'INPUTGRAPH' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern int INPUTGRAPH(graph*,int,int);
^
MATLAB/software/nauty26r7/directg.c:695:0: information: Skipping configuration 'INPUTGRAPH' since the value of 'INPUTGRAPH' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (!INPUTGRAPH(g,m,n))
^
MATLAB/software/nauty26r7/dreadnaut.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/dreadnaut.c:442:7: style: Variable 'n' is reassigned a value before the old one has been used. [redundantAssignment]
    n = WORDSIZE;
      ^
MATLAB/software/nauty26r7/dreadnaut.c:438:7: note: n is assigned
    n = m = 1;
      ^
MATLAB/software/nauty26r7/dreadnaut.c:442:7: note: n is overwritten
    n = WORDSIZE;
      ^
MATLAB/software/nauty26r7/sorttemplates.c:199:21: style: The scope of the variable 'nn' can be reduced. [variableScope]
    int a,d,ba,dc,s,nn;
                    ^
MATLAB/software/nauty26r7/dreadnaut.c:220:0: information: Skipping configuration 'AUTOMPROC' since the value of 'AUTOMPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern void AUTOMPROC(int,int*,int*,int,int,int);
^
MATLAB/software/nauty26r7/dreadnaut.c:1588:0: information: Skipping configuration 'AUTOMPROC' since the value of 'AUTOMPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                    if (umask & U_AUTOM) options.userautomproc = AUTOMPROC;
^
MATLAB/software/nauty26r7/dreadnaut.c:1661:0: information: Skipping configuration 'AUTOMPROC' since the value of 'AUTOMPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                    if (umask & U_AUTOM) options_sg.userautomproc = AUTOMPROC;
^
MATLAB/software/nauty26r7/dreadnaut.c:238:0: information: Skipping configuration 'CANONPROC' since the value of 'CANONPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern int CANONPROC(graph*,int*,graph*,int,int,int,int);
^
MATLAB/software/nauty26r7/dreadnaut.c:1594:0: information: Skipping configuration 'CANONPROC' since the value of 'CANONPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                    if (umask & U_CANON) options.usercanonproc = CANONPROC;
^
MATLAB/software/nauty26r7/dreadnaut.c:1667:0: information: Skipping configuration 'CANONPROC' since the value of 'CANONPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                    if (umask & U_CANON) options_sg.usercanonproc = CANONPROC;
^
MATLAB/software/nauty26r7/dreadnaut.c:1285:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            timebefore = CPUTIME;
^
MATLAB/software/nauty26r7/dreadnaut.c:1313:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            timeafter = CPUTIME;
^
MATLAB/software/nauty26r7/dreadnaut.c:1365:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            timebefore = CPUTIME;
^
MATLAB/software/nauty26r7/dreadnaut.c:1398:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        && CPUTIME >= timebefore+mintime)
^
MATLAB/software/nauty26r7/dreadnaut.c:1403:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            timeafter = CPUTIME;
^
MATLAB/software/nauty26r7/dreadnaut.c:1455:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                        timebefore = CPUTIME;
^
MATLAB/software/nauty26r7/dreadnaut.c:1469:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                        timeafter = CPUTIME;
^
MATLAB/software/nauty26r7/dreadnaut.c:1479:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                timebefore = CPUTIME;
^
MATLAB/software/nauty26r7/dreadnaut.c:1495:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
             && CPUTIME >= timebefore+mintime)
^
MATLAB/software/nauty26r7/dreadnaut.c:1501:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                timeafter = CPUTIME;
^
MATLAB/software/nauty26r7/dreadnaut.c:1606:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                    timebefore = CPUTIME;
^
MATLAB/software/nauty26r7/dreadnaut.c:1622:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
             && CPUTIME >= timebefore+mintime)
^
MATLAB/software/nauty26r7/dreadnaut.c:1628:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                    timeafter = CPUTIME;
^
MATLAB/software/nauty26r7/dreadnaut.c:1678:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                    timebefore = CPUTIME;
^
MATLAB/software/nauty26r7/dreadnaut.c:1694:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
             && CPUTIME >= timebefore+mintime)
^
MATLAB/software/nauty26r7/dreadnaut.c:1700:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                    timeafter = CPUTIME;
^
MATLAB/software/nauty26r7/dreadnaut.c:477:9: style: Condition 'prompt' is always false [knownConditionTrueFalse]
    if (prompt)
        ^
MATLAB/software/nauty26r7/dreadnaut.c:417:14: note: Assignment 'prompt=0', assigned value is 0
    prompt = FALSE;
             ^
MATLAB/software/nauty26r7/dreadnaut.c:477:9: note: Condition 'prompt' is always false
    if (prompt)
        ^
MATLAB/software/nauty26r7/dreadnaut.c:305:0: information: Skipping configuration 'EXTRADECLS' since the value of 'EXTRADECLS' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
EXTRADECLS
^
MATLAB/software/nauty26r7/dretodot.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/dretodot.c:648:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (vswitch) fprintf(stderr, ">Z  creating colors...");
        ^
MATLAB/software/nauty26r7/dretodot.c:646:9: note: First condition
    if (vswitch) fprintf(stderr, ".\n");
        ^
MATLAB/software/nauty26r7/dretodot.c:648:9: note: Second condition
    if (vswitch) fprintf(stderr, ">Z  creating colors...");
        ^
MATLAB/software/nauty26r7/dretodot.c:652:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (vswitch) fprintf(stderr, ">Z  drawing size %.2f x %.2f\n", hsize, vsize);
        ^
MATLAB/software/nauty26r7/dretodot.c:650:9: note: First condition
    if (vswitch) fprintf(stderr, "done\n");
        ^
MATLAB/software/nauty26r7/dretodot.c:652:9: note: Second condition
    if (vswitch) fprintf(stderr, ">Z  drawing size %.2f x %.2f\n", hsize, vsize);
        ^
MATLAB/software/nauty26r7/dretodot.c:711:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (vswitch) fprintf(stderr, ">Z  drawing edges...");
        ^
MATLAB/software/nauty26r7/dretodot.c:708:9: note: First condition
    if (vswitch) fprintf(stderr, "done\n");
        ^
MATLAB/software/nauty26r7/dretodot.c:711:9: note: Second condition
    if (vswitch) fprintf(stderr, ">Z  drawing edges...");
        ^
MATLAB/software/nauty26r7/dretodot.c:371:9: warning:inconclusive: Width 1 given in format string (no. 1) is smaller than destination buffer 's[10]'. [invalidScanfFormatWidth_smaller]
 while (fscanf(infile, "%1s", s) == 1)
        ^
MATLAB/software/nauty26r7/dretodot.c:375:17: warning:inconclusive: Width 1 given in format string (no. 1) is smaller than destination buffer 's[10]'. [invalidScanfFormatWidth_smaller]
            if (fscanf(infile, "%1s", s) == 1 && s[0] != '=')
                ^
MATLAB/software/nauty26r7/dretodot.c:625:9: portability: %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
        fprintf(stderr, ">E Too many edges (%lu, max: %d; use -E# (at your own risk))\n", e_count, MaxE);
        ^
MATLAB/software/nauty26r7/dretodot.c:111:17: style: The scope of the variable 'ind1' can be reduced. [variableScope]
 int i=0, ind0, ind1, ind2;
                ^
MATLAB/software/nauty26r7/dretodot.c:215:9: style: The scope of the variable 'ndigits' can be reduced. [variableScope]
    int ndigits;
        ^
MATLAB/software/nauty26r7/dretodot.c:271:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/dretodot.c:87:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int lab[MAXN];
^
MATLAB/software/nauty26r7/dretodot.c:88:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int invlab[MAXN];
^
MATLAB/software/nauty26r7/dretodot.c:89:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int ptn[MAXN];
^
MATLAB/software/nauty26r7/dretodot.c:90:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
NodeShape NShape[MAXN];
^
MATLAB/software/nauty26r7/dretodot.c:91:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int CurrVertices[MAXN];
^
MATLAB/software/nauty26r7/dretodot.c:92:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int DistStack[MAXN];
^
MATLAB/software/nauty26r7/dretodot.c:93:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int Ranks[MAXN];
^
MATLAB/software/nauty26r7/dretodot.c:94:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int orbits[MAXN];
^
MATLAB/software/nauty26r7/dretodot.c:414:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            if (n > MAXN || m > MAXM)
^
MATLAB/software/nauty26r7/dretog.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/dretog.c:151:9: warning:inconclusive: Width 1 given in format string (no. 1) is smaller than destination buffer 's[10]'. [invalidScanfFormatWidth_smaller]
 while (fscanf(infile,"%1s",s) == 1)
        ^
MATLAB/software/nauty26r7/dretog.c:155:7: warning:inconclusive: Width 1 given in format string (no. 1) is smaller than destination buffer 's[10]'. [invalidScanfFormatWidth_smaller]
  if (fscanf(infile,"%1s",s) == 1 && s[0] != '=')
      ^
MATLAB/software/nauty26r7/dretog.c:58:40: style: Variable 'oswitch' is assigned a value that is never used. [unreadVariable]
 zswitch = sswitch = gswitch = oswitch = FALSE;
                                       ^
MATLAB/software/nauty26r7/dretog.c:59:20: style: Variable 'nswitch' is assigned a value that is never used. [unreadVariable]
 qswitch = nswitch = hswitch = FALSE;
                   ^
MATLAB/software/nauty26r7/dretog.c:80:12: style: Variable 'oswitch' is assigned a value that is never used. [unreadVariable]
      else SWINT('o',oswitch,initorg,">E dretog -o")
           ^
MATLAB/software/nauty26r7/dretog.c:81:12: style: Variable 'nswitch' is assigned a value that is never used. [unreadVariable]
      else SWINT('n',nswitch,n,">E dretog -n")
           ^
MATLAB/software/nauty26r7/dretog.c:56:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/dretog.c:51:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 graph g[MAXN*MAXM];
^
MATLAB/software/nauty26r7/dretog.c:196:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if (n > MAXN || m > MAXM)
^
MATLAB/software/nauty26r7/genbg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/genbg.c:1509:21: style: Condition '!gotf' is always true [knownConditionTrueFalse]
                if (!gotf)
                    ^
MATLAB/software/nauty26r7/genbg.c:1481:22: note: Assuming that condition 'gotf' is not redundant
            else if (gotf)
                     ^
MATLAB/software/nauty26r7/genbg.c:1509:21: note: Condition '!gotf' is always true
                if (!gotf)
                    ^
MATLAB/software/nauty26r7/genbg.c:332:13: style: The scope of the variable 'gi' can be reduced. [variableScope]
    setword gi;
            ^
MATLAB/software/nauty26r7/genbg.c:402:18: style: The scope of the variable 'v' can be reduced. [variableScope]
    int allx,i,j,v;
                 ^
MATLAB/software/nauty26r7/genbg.c:403:9: style: The scope of the variable 'vbit' can be reduced. [variableScope]
    int vbit,nw,w[MAXN];
        ^
MATLAB/software/nauty26r7/genbg.c:403:14: style: The scope of the variable 'nw' can be reduced. [variableScope]
    int vbit,nw,w[MAXN];
             ^
MATLAB/software/nauty26r7/genbg.c:404:13: style: The scope of the variable 'done' can be reduced. [variableScope]
    boolean done;
            ^
MATLAB/software/nauty26r7/genbg.c:450:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
MATLAB/software/nauty26r7/genbg.c:476:21: style: The scope of the variable 'frontier' can be reduced. [variableScope]
    setword workset,frontier;
                    ^
MATLAB/software/nauty26r7/genbg.c:477:13: style: The scope of the variable 'sofar' can be reduced. [variableScope]
    setword sofar;
            ^
MATLAB/software/nauty26r7/genbg.c:478:9: style: The scope of the variable 'inv' can be reduced. [variableScope]
    int inv,d,v;
        ^
MATLAB/software/nauty26r7/genbg.c:611:9: style: The scope of the variable 'w' can be reduced. [variableScope]
    int w,lo,hi;
        ^
MATLAB/software/nauty26r7/genbg.c:1611:21: style: Variable 'outfilename' is assigned a value that is never used. [unreadVariable]
        outfilename = "stdout";
                    ^
MATLAB/software/nauty26r7/genbg.c:1666:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t1 = CPUTIME;
^
MATLAB/software/nauty26r7/genbg.c:1704:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t2 = CPUTIME;
^
MATLAB/software/nauty26r7/genbg.c:1398:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/genbg.c:163:0: information: Skipping configuration 'OUTPROC' since the value of 'OUTPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern void OUTPROC(FILE*,graph*,int,int);
^
MATLAB/software/nauty26r7/genbg.c:1589:0: information: Skipping configuration 'OUTPROC' since the value of 'OUTPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    outproc = OUTPROC;
^
MATLAB/software/nauty26r7/genbg.c:371:0: information: Skipping configuration 'OUTPROC1' since the value of 'OUTPROC1' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    OUTPROC1(f,g,1,n1+n2);
^
MATLAB/software/nauty26r7/genbg.c:261:0: error: No header in #include [preprocessorErrorDirective]
#include PLUGIN
^
MATLAB/software/nauty26r7/genbg.c:1602:0: information: Skipping configuration 'PLUGIN_INIT' since the value of 'PLUGIN_INIT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PLUGIN_INIT
^
MATLAB/software/nauty26r7/geng.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/geng.c:2357:27: style: Redundant condition: mod>1. 'mod<=1 || (mod>1 && splitlevel>2||res==0)' is equivalent to 'mod<=1 || splitlevel>2||res==0' [redundantCondition]
                (mod <= 1 || (mod > 1 && (splitlevel > 2 || res == 0))))
                          ^
MATLAB/software/nauty26r7/geng.c:2050:50: style: Condition 'testxword<1' is always false [knownConditionTrueFalse]
        || (MAXN == 8*sizeof(xword) && testxword < 1))
                                                 ^
MATLAB/software/nauty26r7/geng.c:2048:17: note: Assignment 'testxword=(unsigned int)(-1)', assigned value is 4294967295
    testxword = (xword)(-1);
                ^
MATLAB/software/nauty26r7/geng.c:2050:50: note: Condition 'testxword<1' is always false
        || (MAXN == 8*sizeof(xword) && testxword < 1))
                                                 ^
MATLAB/software/nauty26r7/geng.c:2154:21: style: Condition '!gotf' is always true [knownConditionTrueFalse]
                if (!gotf)
                    ^
MATLAB/software/nauty26r7/geng.c:2126:22: note: Assuming that condition 'gotf' is not redundant
            else if (gotf)
                     ^
MATLAB/software/nauty26r7/geng.c:2154:21: note: Condition '!gotf' is always true
                if (!gotf)
                    ^
MATLAB/software/nauty26r7/geng.c:625:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
MATLAB/software/nauty26r7/geng.c:649:13: style: The scope of the variable 'sw' can be reduced. [variableScope]
    setword sw;
            ^
MATLAB/software/nauty26r7/geng.c:713:21: style: The scope of the variable 'frontier' can be reduced. [variableScope]
    setword workset,frontier;
                    ^
MATLAB/software/nauty26r7/geng.c:714:13: style: The scope of the variable 'sofar' can be reduced. [variableScope]
    setword sofar;
            ^
MATLAB/software/nauty26r7/geng.c:715:9: style: The scope of the variable 'inv' can be reduced. [variableScope]
    int inv,d,v;
        ^
MATLAB/software/nauty26r7/geng.c:746:13: style: The scope of the variable 'gi' can be reduced. [variableScope]
    setword gi;
            ^
MATLAB/software/nauty26r7/geng.c:748:11: style: The scope of the variable 'hi' can be reduced. [variableScope]
    xword hi;
          ^
MATLAB/software/nauty26r7/geng.c:781:34: style: The scope of the variable 'w' can be reduced. [variableScope]
    setword seen1,seen2,expanded,w;
                                 ^
MATLAB/software/nauty26r7/geng.c:849:13: style: The scope of the variable 'w' can be reduced. [variableScope]
    setword w,x;
            ^
MATLAB/software/nauty26r7/geng.c:849:15: style: The scope of the variable 'x' can be reduced. [variableScope]
    setword w,x;
              ^
MATLAB/software/nauty26r7/geng.c:850:11: style: The scope of the variable 'hi' can be reduced. [variableScope]
    xword hi;
          ^
MATLAB/software/nauty26r7/geng.c:883:13: style: The scope of the variable 'w' can be reduced. [variableScope]
    setword w,x;
            ^
MATLAB/software/nauty26r7/geng.c:883:15: style: The scope of the variable 'x' can be reduced. [variableScope]
    setword w,x;
              ^
MATLAB/software/nauty26r7/geng.c:884:11: style: The scope of the variable 'hi' can be reduced. [variableScope]
    xword hi;
          ^
MATLAB/software/nauty26r7/geng.c:915:13: style: The scope of the variable 'w' can be reduced. [variableScope]
    setword w,x;
            ^
MATLAB/software/nauty26r7/geng.c:915:15: style: The scope of the variable 'x' can be reduced. [variableScope]
    setword w,x;
              ^
MATLAB/software/nauty26r7/geng.c:916:11: style: The scope of the variable 'hi' can be reduced. [variableScope]
    xword hi;
          ^
MATLAB/software/nauty26r7/geng.c:948:11: style: The scope of the variable 'nn' can be reduced. [variableScope]
    int n,nn;
          ^
MATLAB/software/nauty26r7/geng.c:949:10: style: The scope of the variable 'ncj' can be reduced. [variableScope]
    long ncj;
         ^
MATLAB/software/nauty26r7/geng.c:952:20: style: The scope of the variable 'tttn' can be reduced. [variableScope]
    xword *xset,xw,tttn,nxsets;
                   ^
MATLAB/software/nauty26r7/geng.c:952:25: style: The scope of the variable 'nxsets' can be reduced. [variableScope]
    xword *xset,xw,tttn,nxsets;
                        ^
MATLAB/software/nauty26r7/geng.c:1060:29: style: The scope of the variable 'w' can be reduced. [variableScope]
    xword *xorb,*xinv,*xset,w;
                            ^
MATLAB/software/nauty26r7/geng.c:1105:36: style: The scope of the variable 'x' can be reduced. [variableScope]
    xword j1,j2,moved,pi,pxi,lo,hi,x;
                                   ^
MATLAB/software/nauty26r7/geng.c:1106:23: style: The scope of the variable 'w' can be reduced. [variableScope]
    xword i,*xorb,*xx,w,xlim,xlb;
                      ^
MATLAB/software/nauty26r7/geng.c:1106:30: style: The scope of the variable 'xlb' can be reduced. [variableScope]
    xword i,*xorb,*xx,w,xlim,xlb;
                             ^
MATLAB/software/nauty26r7/geng.c:1184:9: style: The scope of the variable 'split1' can be reduced. [variableScope]
    int split1,split2,cell1,cell2;
        ^
MATLAB/software/nauty26r7/geng.c:1756:17: style: The scope of the variable 'd' can be reduced. [variableScope]
    int xlb,xub,d,nn,m,xc;
                ^
MATLAB/software/nauty26r7/geng.c:2244:21: style: Variable 'outfilename' is assigned a value that is never used. [unreadVariable]
        outfilename = "stdout";
                    ^
MATLAB/software/nauty26r7/geng.c:2312:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t1 = CPUTIME;
^
MATLAB/software/nauty26r7/geng.c:2391:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t2 = CPUTIME;
^
MATLAB/software/nauty26r7/geng.c:2026:0: information: Skipping configuration 'GENG_MAIN' since the value of 'GENG_MAIN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
GENG_MAIN(int argc, char *argv[])
^
MATLAB/software/nauty26r7/geng.c:2045:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/geng.c:524:0: information: Skipping configuration 'OUTPROC' since the value of 'OUTPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern void OUTPROC(FILE*,graph*,int);
^
MATLAB/software/nauty26r7/geng.c:2224:0: information: Skipping configuration 'OUTPROC' since the value of 'OUTPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    outproc = OUTPROC;
^
MATLAB/software/nauty26r7/geng.c:520:0: error: No header in #include [preprocessorErrorDirective]
#include PLUGIN
^
MATLAB/software/nauty26r7/geng.c:2234:0: information: Skipping configuration 'PLUGIN_INIT' since the value of 'PLUGIN_INIT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PLUGIN_INIT
^
MATLAB/software/nauty26r7/genquarticg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/genquarticg.c:1383:21: style: Condition '!gotf' is always true [knownConditionTrueFalse]
                if (!gotf)
                    ^
MATLAB/software/nauty26r7/genquarticg.c:1371:22: note: Assuming that condition 'gotf' is not redundant
            else if (gotf)
                     ^
MATLAB/software/nauty26r7/genquarticg.c:1383:21: note: Condition '!gotf' is always true
                if (!gotf)
                    ^
MATLAB/software/nauty26r7/genquarticg.c:613:37: style: Variable 'vt1' is reassigned a value before the old one has been used. [redundantAssignment]
                                vt1 = l[dovi[i].first1];
                                    ^
MATLAB/software/nauty26r7/genquarticg.c:612:37: note: vt1 is assigned
                                vt1 = l[dovi[i].first1];
                                    ^
MATLAB/software/nauty26r7/genquarticg.c:613:37: note: vt1 is overwritten
                                vt1 = l[dovi[i].first1];
                                    ^
MATLAB/software/nauty26r7/genquarticg.c:316:30: style: Opposite expression on both sides of '&'. [oppositeExpression]
                    bitj2 = x&(-x); x ^= bitj2; j2 = FIRSTBITNZ(bitj2);
                             ^
MATLAB/software/nauty26r7/genquarticg.c:317:30: style: Opposite expression on both sides of '&'. [oppositeExpression]
                    biti2 = x&(-x); x ^= biti2; i2 = FIRSTBITNZ(biti2);
                             ^
MATLAB/software/nauty26r7/genquarticg.c:318:30: style: Opposite expression on both sides of '&'. [oppositeExpression]
                    bitj1 = x&(-x); x ^= bitj1; j1 = FIRSTBITNZ(bitj1);
                             ^
MATLAB/software/nauty26r7/genquarticg.c:686:38: style: Opposite expression on both sides of '&'. [oppositeExpression]
                                y = x&(-x);
                                     ^
MATLAB/software/nauty26r7/genquarticg.c:159:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
MATLAB/software/nauty26r7/genquarticg.c:183:13: style: The scope of the variable 'sw' can be reduced. [variableScope]
    setword sw;
            ^
MATLAB/software/nauty26r7/genquarticg.c:360:28: style: The scope of the variable 'col00y' can be reduced. [variableScope]
                int col00x,col00y,v;
                           ^
MATLAB/software/nauty26r7/genquarticg.c:360:35: style: The scope of the variable 'v' can be reduced. [variableScope]
                int col00x,col00y,v;
                                  ^
MATLAB/software/nauty26r7/genquarticg.c:932:10: style: The scope of the variable 'vn1' can be reduced. [variableScope]
    int  vn1, vn2, vn3, vn4, etmp, i, e1, e2;
         ^
MATLAB/software/nauty26r7/genquarticg.c:932:15: style: The scope of the variable 'vn2' can be reduced. [variableScope]
    int  vn1, vn2, vn3, vn4, etmp, i, e1, e2;
              ^
MATLAB/software/nauty26r7/genquarticg.c:932:20: style: The scope of the variable 'vn3' can be reduced. [variableScope]
    int  vn1, vn2, vn3, vn4, etmp, i, e1, e2;
                   ^
MATLAB/software/nauty26r7/genquarticg.c:932:25: style: The scope of the variable 'vn4' can be reduced. [variableScope]
    int  vn1, vn2, vn3, vn4, etmp, i, e1, e2;
                        ^
MATLAB/software/nauty26r7/genquarticg.c:932:39: style: The scope of the variable 'e1' can be reduced. [variableScope]
    int  vn1, vn2, vn3, vn4, etmp, i, e1, e2;
                                      ^
MATLAB/software/nauty26r7/genquarticg.c:932:43: style: The scope of the variable 'e2' can be reduced. [variableScope]
    int  vn1, vn2, vn3, vn4, etmp, i, e1, e2;
                                          ^
MATLAB/software/nauty26r7/genquarticg.c:985:21: style: The scope of the variable 'vn1' can be reduced. [variableScope]
    int             vn1, vn2, vn3, vn4, vnb, i, etmp;
                    ^
MATLAB/software/nauty26r7/genquarticg.c:985:26: style: The scope of the variable 'vn2' can be reduced. [variableScope]
    int             vn1, vn2, vn3, vn4, vnb, i, etmp;
                         ^
MATLAB/software/nauty26r7/genquarticg.c:985:31: style: The scope of the variable 'vn3' can be reduced. [variableScope]
    int             vn1, vn2, vn3, vn4, vnb, i, etmp;
                              ^
MATLAB/software/nauty26r7/genquarticg.c:985:36: style: The scope of the variable 'vn4' can be reduced. [variableScope]
    int             vn1, vn2, vn3, vn4, vnb, i, etmp;
                                   ^
MATLAB/software/nauty26r7/genquarticg.c:985:41: style: The scope of the variable 'vnb' can be reduced. [variableScope]
    int             vn1, vn2, vn3, vn4, vnb, i, etmp;
                                        ^
MATLAB/software/nauty26r7/genquarticg.c:1035:41: style: The scope of the variable 'vnb' can be reduced. [variableScope]
    int             vn1, vn2, vn3, vn4, vnb, i, etmp, e1, e2;
                                        ^
MATLAB/software/nauty26r7/genquarticg.c:1035:55: style: The scope of the variable 'e1' can be reduced. [variableScope]
    int             vn1, vn2, vn3, vn4, vnb, i, etmp, e1, e2;
                                                      ^
MATLAB/software/nauty26r7/genquarticg.c:1035:59: style: The scope of the variable 'e2' can be reduced. [variableScope]
    int             vn1, vn2, vn3, vn4, vnb, i, etmp, e1, e2;
                                                          ^
MATLAB/software/nauty26r7/genquarticg.c:1125:24: style: The scope of the variable 'ci' can be reduced. [variableScope]
    register int i, j, ci, ncell;
                       ^
MATLAB/software/nauty26r7/genquarticg.c:235:64: style: Unused variable: mcol [unusedVariable]
    int   vm1, vm2, vm3, vm4, vt1, vt2, vt3, vt4, c, b, mcol1, mcol,
                                                               ^
MATLAB/software/nauty26r7/genquarticg.c:236:32: style: Unused variable: k [unusedVariable]
          tcol, got_one, i, j, k, numpair1, numdovi, maxdovi, i1, j1, i2, j2,
                               ^
MATLAB/software/nauty26r7/genquarticg.c:237:11: style: Unused variable: numrival [unusedVariable]
          numrival, temp, mult, multm, mult2, rely, numedge, dcol, dcolp, e1, e2;
          ^
MATLAB/software/nauty26r7/genquarticg.c:237:40: style: Unused variable: mult2 [unusedVariable]
          numrival, temp, mult, multm, mult2, rely, numedge, dcol, dcolp, e1, e2;
                                       ^
MATLAB/software/nauty26r7/genquarticg.c:238:46: style: Unused variable: mult2i [unusedVariable]
    int   firsttime[MAXN], firsttimey[MAXN], mult2i[MAXN], multar1[MAXN],
                                             ^
MATLAB/software/nauty26r7/genquarticg.c:239:39: style: Unused variable: rival [unusedVariable]
          col00[MAXN], col00w1[MAXN], rival[MAXN], tagriv[MAXN], doviorbit[3*MAXN],
                                      ^
MATLAB/software/nauty26r7/genquarticg.c:239:52: style: Unused variable: tagriv [unusedVariable]
          col00[MAXN], col00w1[MAXN], rival[MAXN], tagriv[MAXN], doviorbit[3*MAXN],
                                                   ^
MATLAB/software/nauty26r7/genquarticg.c:242:26: style: Unused variable: x1 [unusedVariable]
    setword     x, y, z, x1, bitj1, bitj2, biti2;
                         ^
MATLAB/software/nauty26r7/genquarticg.c:266:32: style: Unused variable: zz [unusedVariable]
            setword zval[MAXN],zz,eqcol0;
                               ^
MATLAB/software/nauty26r7/genquarticg.c:1011:17: style: Variable 'vn1' is assigned a value that is never used. [unreadVariable]
            vn1 = vn3;
                ^
MATLAB/software/nauty26r7/genquarticg.c:1012:17: style: Variable 'vn3' is assigned a value that is never used. [unreadVariable]
            vn3 = etmp;
                ^
MATLAB/software/nauty26r7/genquarticg.c:1016:17: style: Variable 'vn4' is assigned a value that is never used. [unreadVariable]
            vn4 = etmp;
                ^
MATLAB/software/nauty26r7/genquarticg.c:1060:17: style: Variable 'vn1' is assigned a value that is never used. [unreadVariable]
            vn1 = vn3;
                ^
MATLAB/software/nauty26r7/genquarticg.c:1061:17: style: Variable 'vn3' is assigned a value that is never used. [unreadVariable]
            vn3 = etmp;
                ^
MATLAB/software/nauty26r7/genquarticg.c:1065:17: style: Variable 'vn4' is assigned a value that is never used. [unreadVariable]
            vn4 = etmp;
                ^
MATLAB/software/nauty26r7/genquarticg.c:1181:12: style: Variable 'split1' is assigned a value that is never used. [unreadVariable]
    split1 = -1;
           ^
MATLAB/software/nauty26r7/genquarticg.c:1304:17: style: Unused variable: y [unusedVariable]
    setword  x, y;
                ^
MATLAB/software/nauty26r7/genquarticg.c:1505:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    timebefore = CPUTIME;
^
MATLAB/software/nauty26r7/genquarticg.c:1607:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    timeafter=CPUTIME;
^
MATLAB/software/nauty26r7/genquarticg.c:1314:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/genquarticg.c:32:0: information: Skipping configuration 'OUTPROC' since the value of 'OUTPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern void OUTPROC(FILE*, graph*, int);
^
MATLAB/software/nauty26r7/genquarticg.c:1439:0: information: Skipping configuration 'OUTPROC' since the value of 'OUTPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    outproc = OUTPROC;
^
MATLAB/software/nauty26r7/genquarticg.c:1448:0: information: Skipping configuration 'PLUGIN_INIT' since the value of 'PLUGIN_INIT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    PLUGIN_INIT
^
MATLAB/software/nauty26r7/genquarticg.c:1356:0: information: Skipping configuration 'PLUGIN_SWITCHES' since the value of 'PLUGIN_SWITCHES' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                                PLUGIN_SWITCHES
^
MATLAB/software/nauty26r7/genrang.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/genrang.c:517:5: warning: %ld in format string (no. 2) requires 'long' but the argument type is 'signed int'. [invalidPrintfArgType_sint]
    fprintf(f,"%d %ld\n",n,n*(long)degree/2);
    ^
MATLAB/software/nauty26r7/genrang.c:57:14: style: The scope of the variable 'gpi' can be reduced. [variableScope]
    set *gi,*gpi;
             ^
MATLAB/software/nauty26r7/genrang.c:150:10: style: The scope of the variable 'gi' can be reduced. [variableScope]
    set *gi,*gj;
         ^
MATLAB/software/nauty26r7/genrang.c:151:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i,j;
        ^
MATLAB/software/nauty26r7/genrang.c:188:10: style: The scope of the variable 'gi' can be reduced. [variableScope]
    set *gi,*gj;
         ^
MATLAB/software/nauty26r7/genrang.c:189:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i,j,n;
        ^
MATLAB/software/nauty26r7/genrang.c:189:11: style: The scope of the variable 'j' can be reduced. [variableScope]
    int i,j,n;
          ^
MATLAB/software/nauty26r7/genrang.c:330:10: style: The scope of the variable 'gi' can be reduced. [variableScope]
    set *gi;
         ^
MATLAB/software/nauty26r7/genrang.c:331:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i,j;
        ^
MATLAB/software/nauty26r7/genrang.c:187:12: style: Unused variable: ln [unusedVariable]
    size_t ln,li,nc2,ned,sofar;
           ^
MATLAB/software/nauty26r7/genrang.c:926:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/genrang.c:86:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    set mask[MAXM];
^
MATLAB/software/nauty26r7/genrang.c:122:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    set mask[MAXM];
^
MATLAB/software/nauty26r7/genrang.c:370:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int deg[MAXN],p[MAXLREG*MAXN];
^
MATLAB/software/nauty26r7/genrang.c:440:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int deg[MAXN],avail[MAXN*MAXLREG];
^
MATLAB/software/nauty26r7/genrang.c:509:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int cub[MAXLREG*MAXN];
^
MATLAB/software/nauty26r7/genrang.c:544:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int cub[MAXLREG*MAXN];
^
MATLAB/software/nauty26r7/genrang.c:574:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int cub[MAXLREG*MAXN];
^
MATLAB/software/nauty26r7/genrang.c:617:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int cub[MAXLREG*MAXN];
^
MATLAB/software/nauty26r7/genrang.c:618:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    boolean adj[MAXN];
^
MATLAB/software/nauty26r7/genrang.c:686:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int deg[MAXN],avail[MAXN*MAXLREG];
^
MATLAB/software/nauty26r7/genrang.c:759:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int cub[MAXLREG*MAXN];
^
MATLAB/software/nauty26r7/genrang.c:760:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    boolean adj[MAXN];
^
MATLAB/software/nauty26r7/genrang.c:850:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int ed[2*MAXN];
^
MATLAB/software/nauty26r7/genrang.c:919:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    graph g[MAXM*1L*MAXN];
^
MATLAB/software/nauty26r7/genrang.c:920:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int perm[MAXN];
^
MATLAB/software/nauty26r7/genspecialg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/genspecialg.c:96:11: style: The scope of the variable 'nki' can be reduced. [variableScope]
    int i,nki,ans;
          ^
MATLAB/software/nauty26r7/genspecialg.c:124:11: style: The scope of the variable 'p' can be reduced. [variableScope]
    int i,p;
          ^
MATLAB/software/nauty26r7/genspecialg.c:168:15: style: The scope of the variable 'k' can be reduced. [variableScope]
    size_t *v,k;
              ^
MATLAB/software/nauty26r7/genspecialg.c:292:19: style: The scope of the variable 'j' can be reduced. [variableScope]
    int n,*d,*e,i,j;
                  ^
MATLAB/software/nauty26r7/genspecialg.c:354:16: style: The scope of the variable 'ep' can be reduced. [variableScope]
    int *d,*e,*ep,nv,deg,i,j,s,t,u;
               ^
MATLAB/software/nauty26r7/genspecialg.c:527:17: style: The scope of the variable 'ntemp' can be reduced. [variableScope]
    int i,j,k,n,ntemp,*d,*e;
                ^
MATLAB/software/nauty26r7/genspecialg.c:614:25: style: The scope of the variable 'oldn' can be reduced. [variableScope]
    int *d,*e,i,j,deg,n,oldn;
                        ^
MATLAB/software/nauty26r7/genspecialg.c:705:15: style: The scope of the variable 'k' can be reduced. [variableScope]
    size_t *v,k;
              ^
MATLAB/software/nauty26r7/genspecialg.c:464:18: style: Checking if unsigned expression '(*sg).elen' is less than zero. [unsignedLessThanZero]
    else         SG_ALLOC(*sg,n,0,"genspecialg");
                 ^
MATLAB/software/nauty26r7/genspecialg.c:506:14: error: Shifting by a negative value is undefined behaviour [shiftNegative]
    nv = 1UL << deg;
             ^
MATLAB/software/nauty26r7/genspecialg.c:506:17: warning: Expression 'deg' can have a negative value. That is converted to an unsigned value and used in an unsigned calculation. [signConversionCond]
    nv = 1UL << deg;
                ^
MATLAB/software/nauty26r7/genspecialg.c:501:13: note: Assuming that condition 'deg<0' is not redundant
    if (deg < 0 || deg > 30)
            ^
MATLAB/software/nauty26r7/genspecialg.c:506:17: note: Negative value is converted to an unsigned value
    nv = 1UL << deg;
                ^
MATLAB/software/nauty26r7/genspecialg.c:512:15: warning: Expression 'deg' can have a negative value. That is converted to an unsigned value and used in an unsigned calculation. [signConversionCond]
    sg->nde = deg*nv;
              ^
MATLAB/software/nauty26r7/genspecialg.c:501:13: note: Assuming that condition 'deg<0' is not redundant
    if (deg < 0 || deg > 30)
            ^
MATLAB/software/nauty26r7/genspecialg.c:512:15: note: Negative value is converted to an unsigned value
    sg->nde = deg*nv;
              ^
MATLAB/software/nauty26r7/genspecialg.c:219:15: style: Unused variable: k [unusedVariable]
    size_t *v,k;
              ^
MATLAB/software/nauty26r7/genspecialg.c:761:17: style: Unused variable: j [unusedVariable]
    int *d,*e,i,j,n;
                ^
MATLAB/software/nauty26r7/genspecialg.c:956:21: style: Variable 'outfilename' is assigned a value that is never used. [unreadVariable]
        outfilename = "stdout";
                    ^
MATLAB/software/nauty26r7/genspecialg.c:859:9: style: Unused variable: n [unusedVariable]
    int n,codetype;
        ^
MATLAB/software/nauty26r7/genspecialg.c:860:16: style: Unused variable: i [unusedVariable]
    int argnum,i,j,nreq;
               ^
MATLAB/software/nauty26r7/genspecialg.c:870:13: style: Unused variable: usesparse [unusedVariable]
    boolean usesparse,digraph;
            ^
MATLAB/software/nauty26r7/genspecialg.c:870:23: style: Unused variable: digraph [unusedVariable]
    boolean usesparse,digraph;
                      ^
MATLAB/software/nauty26r7/genspecialg.c:874:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/gentourng.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/gentourng.c:1271:11: style: Condition '!gotf' is always true [knownConditionTrueFalse]
      if (!gotf)
          ^
MATLAB/software/nauty26r7/gentourng.c:1259:12: note: Assuming that condition 'gotf' is not redundant
  else if (gotf)
           ^
MATLAB/software/nauty26r7/gentourng.c:1271:11: note: Condition '!gotf' is always true
      if (!gotf)
          ^
MATLAB/software/nauty26r7/gentourng.c:401:15: style: The scope of the variable 'dmax' can be reduced. [variableScope]
        int n,dmax,dmin;
              ^
MATLAB/software/nauty26r7/gentourng.c:401:20: style: The scope of the variable 'dmin' can be reduced. [variableScope]
        int n,dmax,dmin;
                   ^
MATLAB/software/nauty26r7/gentourng.c:402:14: style: The scope of the variable 'ncj' can be reduced. [variableScope]
        long ncj;
             ^
MATLAB/software/nauty26r7/gentourng.c:403:20: style: The scope of the variable 'd' can be reduced. [variableScope]
        leveldata *d;
                   ^
MATLAB/software/nauty26r7/gentourng.c:405:17: style: The scope of the variable 'tttn' can be reduced. [variableScope]
 xword *xset,xw,tttn,nxsets;
                ^
MATLAB/software/nauty26r7/gentourng.c:405:22: style: The scope of the variable 'nxsets' can be reduced. [variableScope]
 xword *xset,xw,tttn,nxsets;
                     ^
MATLAB/software/nauty26r7/gentourng.c:502:33: style: The scope of the variable 'w' can be reduced. [variableScope]
        xword *xorb,*xinv,*xset,w;
                                ^
MATLAB/software/nauty26r7/gentourng.c:811:17: style: The scope of the variable 'x' can be reduced. [variableScope]
        setword x,y,z;
                ^
MATLAB/software/nauty26r7/gentourng.c:811:19: style: The scope of the variable 'y' can be reduced. [variableScope]
        setword x,y,z;
                  ^
MATLAB/software/nauty26r7/gentourng.c:812:13: style: The scope of the variable 'inv' can be reduced. [variableScope]
        int inv,i,v,d;
            ^
MATLAB/software/nauty26r7/gentourng.c:572:16: style: Variable 'split1' is assigned a value that is never used. [unreadVariable]
        split1 = -1;
               ^
MATLAB/software/nauty26r7/gentourng.c:1347:25: style: Variable 'outfilename' is assigned a value that is never used. [unreadVariable]
            outfilename = "stdout";
                        ^
MATLAB/software/nauty26r7/gentourng.c:1382:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        t1 = CPUTIME;
^
MATLAB/software/nauty26r7/gentourng.c:1427:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        t2 = CPUTIME;
^
MATLAB/software/nauty26r7/gentourng.c:1179:0: information: Skipping configuration 'GENG_MAIN' since the value of 'GENG_MAIN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
GENG_MAIN(int argc, char *argv[])
^
MATLAB/software/nauty26r7/gentourng.c:1195:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/gentourng.c:273:0: information: Skipping configuration 'OUTPROC' since the value of 'OUTPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern void OUTPROC(FILE*,graph*,int);
^
MATLAB/software/nauty26r7/gentourng.c:1328:0: information: Skipping configuration 'OUTPROC' since the value of 'OUTPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        outproc = OUTPROC;
^
MATLAB/software/nauty26r7/gentourng.c:269:0: error: No header in #include [preprocessorErrorDirective]
#include PLUGIN
^
MATLAB/software/nauty26r7/gentourng.c:1338:0: information: Skipping configuration 'PLUGIN_INIT' since the value of 'PLUGIN_INIT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PLUGIN_INIT
^
MATLAB/software/nauty26r7/gentreeg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/gentreeg.c:474:11: style: Condition '!gotf' is always true [knownConditionTrueFalse]
      if (!gotf)
          ^
MATLAB/software/nauty26r7/gentreeg.c:462:12: note: Assuming that condition 'gotf' is not redundant
  else if (gotf)
           ^
MATLAB/software/nauty26r7/gentreeg.c:474:11: note: Condition '!gotf' is always true
      if (!gotf)
          ^
MATLAB/software/nauty26r7/gentreeg.c:136:10: style: The scope of the variable 'j' can be reduced. [variableScope]
   int i,j;
         ^
MATLAB/software/nauty26r7/gentreeg.c:163:10: style: The scope of the variable 'j' can be reduced. [variableScope]
   int i,j;
         ^
MATLAB/software/nauty26r7/gentreeg.c:320:7: style: The scope of the variable 'hh' can be reduced. [variableScope]
  int hh,flag,entry,temp;
      ^
MATLAB/software/nauty26r7/gentreeg.c:320:10: style: The scope of the variable 'flag' can be reduced. [variableScope]
  int hh,flag,entry,temp;
         ^
MATLAB/software/nauty26r7/gentreeg.c:320:15: style: The scope of the variable 'entry' can be reduced. [variableScope]
  int hh,flag,entry,temp;
              ^
MATLAB/software/nauty26r7/gentreeg.c:320:21: style: The scope of the variable 'temp' can be reduced. [variableScope]
  int hh,flag,entry,temp;
                    ^
MATLAB/software/nauty26r7/gentreeg.c:137:18: style: Variable 'one' is not assigned a value. [unassignedVariable]
   char *pout,*p,one[8];
                 ^
MATLAB/software/nauty26r7/gentreeg.c:164:18: style: Variable 'one' is not assigned a value. [unassignedVariable]
   char *pout,*p,one[8];
                 ^
MATLAB/software/nauty26r7/gentreeg.c:284:8: style: Unused variable: i [unusedVariable]
   int i;
       ^
MATLAB/software/nauty26r7/gentreeg.c:540:25: style: Variable 'outfilename' is assigned a value that is never used. [unreadVariable]
            outfilename = "stdout";
                        ^
MATLAB/software/nauty26r7/gentreeg.c:566:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        t1 = CPUTIME;
^
MATLAB/software/nauty26r7/gentreeg.c:602:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        t2 = CPUTIME;
^
MATLAB/software/nauty26r7/gentreeg.c:404:0: information: Skipping configuration 'GENTREEG_MAIN' since the value of 'GENTREEG_MAIN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
GENTREEG_MAIN(int argc, char *argv[])
^
MATLAB/software/nauty26r7/gentreeg.c:421:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/gentreeg.c:127:0: information: Skipping configuration 'OUTPROC' since the value of 'OUTPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern void OUTPROC(FILE *f, int vpar[], int n);
^
MATLAB/software/nauty26r7/gentreeg.c:524:0: information: Skipping configuration 'OUTPROC' since the value of 'OUTPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        outproc = OUTPROC;
^
MATLAB/software/nauty26r7/gtnauty.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/sorttemplates.c:330:21: style: The scope of the variable 'nn' can be reduced. [variableScope]
    int a,d,ba,dc,s,nn;
                    ^
MATLAB/software/nauty26r7/gtnauty.c:134:15: style: The scope of the variable 'vi' can be reduced. [variableScope]
    size_t *v,vi,j;
              ^
MATLAB/software/nauty26r7/gtnauty.c:584:12: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i0,i;
           ^
MATLAB/software/nauty26r7/gtnauty.c:124:8: style: Variable 'nl' is assigned a value that is never used. [unreadVariable]
    nl = 0;
       ^
MATLAB/software/nauty26r7/gtnauty.c:73:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int wt[MAXN];
^
MATLAB/software/nauty26r7/gtnauty.c:157:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int lab[MAXN],ptn[MAXN],orbits[MAXN];
^
MATLAB/software/nauty26r7/gtnauty.c:158:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int count[MAXN];
^
MATLAB/software/nauty26r7/gtnauty.c:159:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    set active[MAXM];
^
MATLAB/software/nauty26r7/gtnauty.c:160:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    setword workspace[24*MAXM];
^
MATLAB/software/nauty26r7/gtnauty.c:175:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (n > MAXN || m > MAXM)
^
MATLAB/software/nauty26r7/gtnauty.c:236:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int lab[MAXN],ptn[MAXN],orbits[MAXN];
^
MATLAB/software/nauty26r7/gtnauty.c:237:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int count[MAXN];
^
MATLAB/software/nauty26r7/gtnauty.c:238:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    set active[MAXM];
^
MATLAB/software/nauty26r7/gtnauty.c:239:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    setword workspace[24*MAXM];
^
MATLAB/software/nauty26r7/gtnauty.c:254:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (n > MAXN || m > MAXM)
^
MATLAB/software/nauty26r7/gtnauty.c:320:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int lab[MAXN],ptn[MAXN],orbits[MAXN];
^
MATLAB/software/nauty26r7/gtnauty.c:321:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int count[MAXN];
^
MATLAB/software/nauty26r7/gtnauty.c:322:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    set active[MAXM];
^
MATLAB/software/nauty26r7/gtnauty.c:323:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    setword workspace[24*MAXM];
^
MATLAB/software/nauty26r7/gtnauty.c:338:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (n > MAXN || m > MAXM)
^
MATLAB/software/nauty26r7/gtnauty.c:398:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int lab[MAXN],ptn[MAXN];
^
MATLAB/software/nauty26r7/gtnauty.c:399:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int count[MAXN];
^
MATLAB/software/nauty26r7/gtnauty.c:400:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    set active[MAXM];
^
MATLAB/software/nauty26r7/gtnauty.c:401:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    setword workspace[24*MAXM];
^
MATLAB/software/nauty26r7/gtnauty.c:417:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (n > MAXN || m > MAXM)
^
MATLAB/software/nauty26r7/gtnauty.c:492:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int lab[MAXN],ptn[MAXN];
^
MATLAB/software/nauty26r7/gtnauty.c:493:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int count[MAXN];
^
MATLAB/software/nauty26r7/gtnauty.c:494:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    set active[MAXM];
^
MATLAB/software/nauty26r7/gtnauty.c:495:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    setword workspace[24*MAXM];
^
MATLAB/software/nauty26r7/gtnauty.c:511:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (n > MAXN || m > MAXM)
^
MATLAB/software/nauty26r7/gtnauty.c:624:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int lab[MAXN],ptn[MAXN],orbits[MAXN];
^
MATLAB/software/nauty26r7/gtnauty.c:625:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    long x[MAXN];
^
MATLAB/software/nauty26r7/gtnauty.c:626:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int count[MAXN];
^
MATLAB/software/nauty26r7/gtnauty.c:627:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    setword workspace[24*MAXM];
^
MATLAB/software/nauty26r7/gtnauty.c:628:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    set workset[MAXM];
^
MATLAB/software/nauty26r7/gtnauty.c:629:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    set sofar[MAXM],frontier[MAXM];
^
MATLAB/software/nauty26r7/gtnauty.c:642:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (m > MAXM || n > MAXN)
^
MATLAB/software/nauty26r7/gtnauty.c:716:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int lab[MAXN],ptn[MAXN],orbits[MAXN];
^
MATLAB/software/nauty26r7/gtnauty.c:717:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    set active[MAXM];
^
MATLAB/software/nauty26r7/gtnauty.c:718:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    setword workspace[24*MAXM];
^
MATLAB/software/nauty26r7/gtnauty.c:730:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (n > MAXN || m > MAXM)
^
MATLAB/software/nauty26r7/gtnauty.c:24:0: information: Skipping configuration 'REFINE' since the value of 'REFINE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
void REFINE(graph*,int*,int*,int,int*,int*,set*,int*,int,int);
^
MATLAB/software/nauty26r7/gtnauty.c:210:0: information: Skipping configuration 'REFINE' since the value of 'REFINE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        options.userrefproc = REFINE;
^
MATLAB/software/nauty26r7/gtnauty.c:295:0: information: Skipping configuration 'REFINE' since the value of 'REFINE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        options.userrefproc = REFINE;
^
MATLAB/software/nauty26r7/gtnauty.c:376:0: information: Skipping configuration 'REFINE' since the value of 'REFINE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        options.userrefproc = REFINE;
^
MATLAB/software/nauty26r7/gtnauty.c:467:0: information: Skipping configuration 'REFINE' since the value of 'REFINE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        options.userrefproc = REFINE;
^
MATLAB/software/nauty26r7/gtnauty.c:568:0: information: Skipping configuration 'REFINE' since the value of 'REFINE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        options.userrefproc = REFINE;
^
MATLAB/software/nauty26r7/gtnauty.c:693:0: information: Skipping configuration 'REFINE' since the value of 'REFINE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    options.userrefproc = REFINE;
^
MATLAB/software/nauty26r7/gtnauty.c:746:0: information: Skipping configuration 'REFINE' since the value of 'REFINE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    options.userrefproc = REFINE;
^
MATLAB/software/nauty26r7/gtools.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/gtools.c:386:13: error: Common realloc mistake: 's' nulled but not freed upon failure [memleakOnRealloc]
            DYNREALLOC(char,s,s_sz,3*(s_sz/2)+10000,"gtools_getline");
            ^
MATLAB/software/nauty26r7/gtools.c:1687:21: error: Common realloc mistake: 'gcode' nulled but not freed upon failure [memleakOnRealloc]
                    DYNREALLOC(char,gcode,gcode_sz,
                    ^
MATLAB/software/nauty26r7/gtools.c:1811:21: error: Common realloc mistake: 'gcode' nulled but not freed upon failure [memleakOnRealloc]
                    DYNREALLOC(char,gcode,gcode_sz,
                    ^
MATLAB/software/nauty26r7/gtools.c:2339:5: warning: Either the condition '(sg=(struct sparsegraph*)malloc((unsigned long)(1)*(unsigned long)(sizeof(struct sparsegraph))))==NULL' is redundant or there is possible null pointer dereference: sg. [nullPointerRedundantCheck]
    sg->nv = n;
    ^
MATLAB/software/nauty26r7/gtools.c:2302:64: note: Assuming that condition '(sg=(struct sparsegraph*)malloc((unsigned long)(1)*(unsigned long)(sizeof(struct sparsegraph))))==NULL' is not redundant
        if ((sg = (sparsegraph*)ALLOCS(1,sizeof(sparsegraph))) == NULL)
                                                               ^
MATLAB/software/nauty26r7/gtools.c:2339:5: note: Null pointer dereference
    sg->nv = n;
    ^
MATLAB/software/nauty26r7/gtools.c:2340:5: warning: Either the condition '(sg=(struct sparsegraph*)malloc((unsigned long)(1)*(unsigned long)(sizeof(struct sparsegraph))))==NULL' is redundant or there is possible null pointer dereference: sg. [nullPointerRedundantCheck]
    sg->nde = vi;
    ^
MATLAB/software/nauty26r7/gtools.c:2302:64: note: Assuming that condition '(sg=(struct sparsegraph*)malloc((unsigned long)(1)*(unsigned long)(sizeof(struct sparsegraph))))==NULL' is not redundant
        if ((sg = (sparsegraph*)ALLOCS(1,sizeof(sparsegraph))) == NULL)
                                                               ^
MATLAB/software/nauty26r7/gtools.c:2340:5: note: Null pointer dereference
    sg->nde = vi;
    ^
MATLAB/software/nauty26r7/gtools.c:2427:5: warning: Either the condition '(sg=(struct sparsegraph*)malloc((unsigned long)(1)*(unsigned long)(sizeof(struct sparsegraph))))==NULL' is redundant or there is possible null pointer dereference: sg. [nullPointerRedundantCheck]
    sg->nv = n;
    ^
MATLAB/software/nauty26r7/gtools.c:2390:64: note: Assuming that condition '(sg=(struct sparsegraph*)malloc((unsigned long)(1)*(unsigned long)(sizeof(struct sparsegraph))))==NULL' is not redundant
        if ((sg = (sparsegraph*)ALLOCS(1,sizeof(sparsegraph))) == NULL)
                                                               ^
MATLAB/software/nauty26r7/gtools.c:2427:5: note: Null pointer dereference
    sg->nv = n;
    ^
MATLAB/software/nauty26r7/gtools.c:2428:5: warning: Either the condition '(sg=(struct sparsegraph*)malloc((unsigned long)(1)*(unsigned long)(sizeof(struct sparsegraph))))==NULL' is redundant or there is possible null pointer dereference: sg. [nullPointerRedundantCheck]
    sg->nde = vi;
    ^
MATLAB/software/nauty26r7/gtools.c:2390:64: note: Assuming that condition '(sg=(struct sparsegraph*)malloc((unsigned long)(1)*(unsigned long)(sizeof(struct sparsegraph))))==NULL' is not redundant
        if ((sg = (sparsegraph*)ALLOCS(1,sizeof(sparsegraph))) == NULL)
                                                               ^
MATLAB/software/nauty26r7/gtools.c:2428:5: note: Null pointer dereference
    sg->nde = vi;
    ^
MATLAB/software/nauty26r7/gtools.c:528:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i,j,k,x,nb,v,n,need;
        ^
MATLAB/software/nauty26r7/gtools.c:528:11: style: The scope of the variable 'j' can be reduced. [variableScope]
    int i,j,k,x,nb,v,n,need;
          ^
MATLAB/software/nauty26r7/gtools.c:528:13: style: The scope of the variable 'k' can be reduced. [variableScope]
    int i,j,k,x,nb,v,n,need;
            ^
MATLAB/software/nauty26r7/gtools.c:528:15: style: The scope of the variable 'x' can be reduced. [variableScope]
    int i,j,k,x,nb,v,n,need;
              ^
MATLAB/software/nauty26r7/gtools.c:528:17: style: The scope of the variable 'nb' can be reduced. [variableScope]
    int i,j,k,x,nb,v,n,need;
                ^
MATLAB/software/nauty26r7/gtools.c:528:20: style: The scope of the variable 'v' can be reduced. [variableScope]
    int i,j,k,x,nb,v,n,need;
                   ^
MATLAB/software/nauty26r7/gtools.c:528:24: style: The scope of the variable 'need' can be reduced. [variableScope]
    int i,j,k,x,nb,v,n,need;
                       ^
MATLAB/software/nauty26r7/gtools.c:530:13: style: The scope of the variable 'done' can be reduced. [variableScope]
    boolean done;
            ^
MATLAB/software/nauty26r7/gtools.c:618:14: style: The scope of the variable 'gj' can be reduced. [variableScope]
    set *gi,*gj;
             ^
MATLAB/software/nauty26r7/gtools.c:760:10: style: The scope of the variable 'gi' can be reduced. [variableScope]
    set *gi,*gj;
         ^
MATLAB/software/nauty26r7/gtools.c:1566:10: style: The scope of the variable 'gj' can be reduced. [variableScope]
    set *gj;
         ^
MATLAB/software/nauty26r7/gtools.c:1612:10: style: The scope of the variable 'gj' can be reduced. [variableScope]
    set *gj;
         ^
MATLAB/software/nauty26r7/gtools.c:1657:10: style: The scope of the variable 'gj' can be reduced. [variableScope]
    set *gj;
         ^
MATLAB/software/nauty26r7/gtools.c:1772:14: style: The scope of the variable 'pgj' can be reduced. [variableScope]
    set *gj,*pgj;
             ^
MATLAB/software/nauty26r7/gtools.c:1775:33: style: The scope of the variable 'nwords' can be reduced. [variableScope]
    int r,rr,topbit,nb,lastj,iw,nwords;
                                ^
MATLAB/software/nauty26r7/gtools.c:1899:9: style: The scope of the variable 'dj' can be reduced. [variableScope]
    int dj,k,lastj;
        ^
MATLAB/software/nauty26r7/gtools.c:1901:18: style: The scope of the variable 'vj' can be reduced. [variableScope]
    size_t ii,*v,vj,l;
                 ^
MATLAB/software/nauty26r7/gtools.c:2274:19: style: The scope of the variable 'di' can be reduced. [variableScope]
    int i,j,*d,*e,di;
                  ^
MATLAB/software/nauty26r7/gtools.c:2362:19: style: The scope of the variable 'di' can be reduced. [variableScope]
    int i,j,*d,*e,di;
                  ^
MATLAB/software/nauty26r7/gtools.c:2447:16: style: The scope of the variable 'last' can be reduced. [variableScope]
    long sofar,last;
               ^
MATLAB/software/nauty26r7/gtools.c:2492:18: style: The scope of the variable 'weight' can be reduced. [variableScope]
    double sofar,weight;
                 ^
MATLAB/software/nauty26r7/gtools.c:2666:9: style: The scope of the variable 'code' can be reduced. [variableScope]
    int code,ival;
        ^
MATLAB/software/nauty26r7/gtools.c:2560:10: style: Local variable 'longval' shadows outer function [shadowFunction]
    long longval;
         ^
MATLAB/software/nauty26r7/gtools.h:243:12: note: Shadowed declaration
extern int longval(char**,long*);
           ^
MATLAB/software/nauty26r7/gtools.c:2560:10: note: Shadow variable
    long longval;
         ^
MATLAB/software/nauty26r7/gtools.c:559:18: error: Uninitialized variable: x [uninitvar]
            if ((x & B(k))) ++v;
                 ^
MATLAB/software/nauty26r7/gtools.c:547:19: note: Assuming condition is false
            if (k == 0)
                  ^
MATLAB/software/nauty26r7/gtools.c:559:18: note: Uninitialized variable: x
            if ((x & B(k))) ++v;
                 ^
MATLAB/software/nauty26r7/gtools.c:1328:18: error: Uninitialized variable: x [uninitvar]
            if ((x & B(k))) ++vv;
                 ^
MATLAB/software/nauty26r7/gtools.c:1316:19: note: Assuming condition is false
            if (k == 0)
                  ^
MATLAB/software/nauty26r7/gtools.c:1328:18: note: Uninitialized variable: x
            if ((x & B(k))) ++vv;
                 ^
MATLAB/software/nauty26r7/gtools.c:2806:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (m > MAXM)
^
MATLAB/software/nauty26r7/gtools.c:2812:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (n > MAXN)
^
MATLAB/software/nauty26r7/gutil1.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/gutil1.c:19:13: style: The scope of the variable 'd' can be reduced. [variableScope]
    int i,j,d,dor;
            ^
MATLAB/software/nauty26r7/gutil1.c:244:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
MATLAB/software/nauty26r7/gutil1.c:365:13: style: The scope of the variable 'sw' can be reduced. [variableScope]
    setword sw;
            ^
MATLAB/software/nauty26r7/gutil1.c:816:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
MATLAB/software/nauty26r7/gutil1.c:835:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
MATLAB/software/nauty26r7/gutil1.c:69:33: style:inconclusive: Function 'degstats2' argument 6 names different: declaration 'l' definition 'loops'. [funcArgNamesDifferent]
     unsigned long *edges, int *loops,
                                ^
MATLAB/software/nauty26r7/gutils.h:9:65: note: Function 'degstats2' argument 6 names different: declaration 'l' definition 'loops'.
extern void degstats2(graph*,boolean,int,int,unsigned long*,int*l,
                                                                ^
MATLAB/software/nauty26r7/gutil1.c:69:33: note: Function 'degstats2' argument 6 names different: declaration 'l' definition 'loops'.
     unsigned long *edges, int *loops,
                                ^
MATLAB/software/nauty26r7/gutil1.c:91:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int indeg[MAXN];
^
MATLAB/software/nauty26r7/gutil1.c:92:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int outdeg[MAXN];
^
MATLAB/software/nauty26r7/gutil1.c:268:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int queue[MAXN],visited[MAXN];
^
MATLAB/software/nauty26r7/gutil1.c:314:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int queue[MAXN],visited[MAXN];
^
MATLAB/software/nauty26r7/gutil1.c:315:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    setword subw[MAXM];
^
MATLAB/software/nauty26r7/gutil1.c:417:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int num[MAXN],lp[MAXN],stack[MAXN];
^
MATLAB/software/nauty26r7/gutil1.c:481:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int queue[MAXN];
^
MATLAB/software/nauty26r7/gutil1.c:560:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int colour[MAXN];
^
MATLAB/software/nauty26r7/gutil1.c:582:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int colour[MAXN];
^
MATLAB/software/nauty26r7/gutil1.c:611:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int dist[MAXN],queue[MAXN];
^
MATLAB/software/nauty26r7/gutil1.c:668:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int queue[MAXN];
^
MATLAB/software/nauty26r7/gutil1.c:709:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int queue[MAXN];
^
MATLAB/software/nauty26r7/gutil1.c:752:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int queue[MAXN],dist[MAXN];
^
MATLAB/software/nauty26r7/gutil2.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/gutil2.c:31:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
MATLAB/software/nauty26r7/gutil2.c:54:18: style: The scope of the variable 'nbhd' can be reduced. [variableScope]
    setword body,nbhd;
                 ^
MATLAB/software/nauty26r7/gutil2.c:97:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
MATLAB/software/nauty26r7/gutil2.c:119:18: style: The scope of the variable 'last' can be reduced. [variableScope]
    setword body,last,cni;
                 ^
MATLAB/software/nauty26r7/gutil2.c:119:23: style: The scope of the variable 'cni' can be reduced. [variableScope]
    setword body,last,cni;
                      ^
MATLAB/software/nauty26r7/gutil2.c:507:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int num[MAXN],lowlink[MAXN],stack[MAXN];
^
MATLAB/software/nauty26r7/hamheuristic.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/hamheuristic.c:49:21: style: The scope of the variable 'd0' can be reduced. [variableScope]
    int n,*e,*d,len,d0,*e0,d1,*e1,dx,*ex;
                    ^
MATLAB/software/nauty26r7/hamheuristic.c:49:28: style: The scope of the variable 'd1' can be reduced. [variableScope]
    int n,*e,*d,len,d0,*e0,d1,*e1,dx,*ex;
                           ^
MATLAB/software/nauty26r7/hamheuristic.c:50:25: style: The scope of the variable 'exts' can be reduced. [variableScope]
    int i,ix,x,j,w,vext,exts;
                        ^
MATLAB/software/nauty26r7/hamheuristic.c:52:18: style: The scope of the variable 'cycle' can be reduced. [variableScope]
    boolean left,cycle;
                 ^
MATLAB/software/nauty26r7/hamheuristic.c:53:10: style: The scope of the variable 'ran' can be reduced. [variableScope]
    long ran;
         ^
MATLAB/software/nauty26r7/hamheuristic.c:254:9: style: The scope of the variable 'n' can be reduced. [variableScope]
    int n,codetype;
        ^
MATLAB/software/nauty26r7/hamheuristic.c:264:9: style: The scope of the variable 'status' can be reduced. [variableScope]
    int status;
        ^
MATLAB/software/nauty26r7/hamheuristic.c:371:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME;
^
MATLAB/software/nauty26r7/hamheuristic.c:415:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME - t;
^
MATLAB/software/nauty26r7/hamheuristic.c:267:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/labelg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/labelg.c:252:14: style:inconclusive: Boolean expression '!Wswitch' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
 if (Cswitch & !Wswitch)
             ^
MATLAB/software/nauty26r7/labelg.c:252:14: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
 if (Cswitch & !Wswitch)
             ^
MATLAB/software/nauty26r7/labelg.c:313:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 t = CPUTIME;
^
MATLAB/software/nauty26r7/labelg.c:409:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 t = CPUTIME - t;
^
MATLAB/software/nauty26r7/labelg.c:129:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/labelg.c:119:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 graph h[MAXN*MAXM];
^
MATLAB/software/nauty26r7/labelg.c:120:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int lab[MAXN],ptn[MAXN],orbits[MAXN];
^
MATLAB/software/nauty26r7/linegraphg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/linegraphg.c:29:28: style: The scope of the variable 'xhnde' can be reduced. [variableScope]
    size_t i,j,k,gnde,hnde,xhnde,num;
                           ^
MATLAB/software/nauty26r7/linegraphg.c:115:28: style: The scope of the variable 'xhnde' can be reduced. [variableScope]
    size_t i,j,k,gnde,hnde,xhnde,num;
                           ^
MATLAB/software/nauty26r7/linegraphg.c:299:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME;
^
MATLAB/software/nauty26r7/linegraphg.c:314:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME - t;
^
MATLAB/software/nauty26r7/linegraphg.c:221:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/listg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/listg.c:74:9: style: The scope of the variable 'slen' can be reduced. [variableScope]
    int slen,j1,j2;
        ^
MATLAB/software/nauty26r7/listg.c:74:17: style: The scope of the variable 'j2' can be reduced. [variableScope]
    int slen,j1,j2;
                ^
MATLAB/software/nauty26r7/listg.c:219:18: style: The scope of the variable 'j0' can be reduced. [variableScope]
    int i,curlen,j0;
                 ^
MATLAB/software/nauty26r7/listg.c:260:13: style: The scope of the variable 'x' can be reduced. [variableScope]
    setword x,*pg;
            ^
MATLAB/software/nauty26r7/listg.c:278:13: style: The scope of the variable 'first' can be reduced. [variableScope]
    boolean first;
            ^
MATLAB/software/nauty26r7/listg.c:335:13: style: The scope of the variable 'x' can be reduced. [variableScope]
    setword x,*pg;
            ^
MATLAB/software/nauty26r7/listg.c:360:13: style: The scope of the variable 'first' can be reduced. [variableScope]
    boolean first;
            ^
MATLAB/software/nauty26r7/listg.c:382:13: style: The scope of the variable 'j0' can be reduced. [variableScope]
    int i,j,j0;
            ^
MATLAB/software/nauty26r7/listg.c:384:13: style: The scope of the variable 'first' can be reduced. [variableScope]
    boolean first;
            ^
MATLAB/software/nauty26r7/listg.c:195:13: style: Unused variable: curlen [unusedVariable]
    int i,j,curlen,ne;
            ^
MATLAB/software/nauty26r7/listg.c:195:20: style: Unused variable: ne [unusedVariable]
    int i,j,curlen,ne;
                   ^
MATLAB/software/nauty26r7/listg.c:196:10: style: Unused variable: s [unusedVariable]
    char s[20];
         ^
MATLAB/software/nauty26r7/listg.c:311:13: style: Unused variable: first [unusedVariable]
    boolean first;
            ^
MATLAB/software/nauty26r7/listg.c:461:23: style: Variable 'lswitch' is assigned a value that is never used. [unreadVariable]
    aswitch = lswitch = oswitch = Fswitch = FALSE;
                      ^
MATLAB/software/nauty26r7/listg.c:461:33: style: Variable 'oswitch' is assigned a value that is never used. [unreadVariable]
    aswitch = lswitch = oswitch = Fswitch = FALSE;
                                ^
MATLAB/software/nauty26r7/listg.c:498:22: style: Variable 'lswitch' is assigned a value that is never used. [unreadVariable]
                else SWINT('l',lswitch,linelength,"listg -l")
                     ^
MATLAB/software/nauty26r7/listg.c:499:22: style: Variable 'oswitch' is assigned a value that is never used. [unreadVariable]
                else SWINT('o',oswitch,labelorg,"listg -o")
                     ^
MATLAB/software/nauty26r7/listg.c:541:33: style: Variable 'infilename' is assigned a value that is never used. [unreadVariable]
    if (!infilename) infilename = "stdin";
                                ^
MATLAB/software/nauty26r7/listg.c:545:21: style: Variable 'outfilename' is assigned a value that is never used. [unreadVariable]
        outfilename = "stdout";
                    ^
MATLAB/software/nauty26r7/listg.c:458:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/multig.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/multig.c:494:30: style: Redundant condition: lswitch. '!lswitch || (lswitch && (maxdeg&1)==0)' is equivalent to '!lswitch || (maxdeg&1)==0' [redundantCondition]
                && (!lswitch || (lswitch && (maxdeg&1) == 0)))
                             ^
MATLAB/software/nauty26r7/multig.c:124:11: style: The scope of the variable 'k' can be reduced. [variableScope]
    int i,k;
          ^
MATLAB/software/nauty26r7/multig.c:144:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
MATLAB/software/nauty26r7/multig.c:753:17: style: Variable 'eswitch' is assigned a value that is never used. [unreadVariable]
        eswitch = Dswitch = TRUE;
                ^
MATLAB/software/nauty26r7/multig.c:759:17: style: Variable 'eswitch' is assigned a value that is never used. [unreadVariable]
        eswitch = Dswitch = TRUE;
                ^
MATLAB/software/nauty26r7/multig.c:788:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME;
^
MATLAB/software/nauty26r7/multig.c:826:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME - t;
^
MATLAB/software/nauty26r7/multig.c:629:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/multig.c:95:0: information: Skipping configuration 'INPUTGRAPH' since the value of 'INPUTGRAPH' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern int INPUTGRAPH(graph*,int,int);
^
MATLAB/software/nauty26r7/multig.c:797:0: information: Skipping configuration 'INPUTGRAPH' since the value of 'INPUTGRAPH' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        if (!INPUTGRAPH(g,m,n))
^
MATLAB/software/nauty26r7/multig.c:99:0: information: Skipping configuration 'OUTPROC' since the value of 'OUTPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern void OUTPROC(FILE*,int,int,unsigned long,int*,int*,int*);
^
MATLAB/software/nauty26r7/multig.c:247:0: information: Skipping configuration 'OUTPROC' since the value of 'OUTPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            OUTPROC(outfile,n,ne2,newgroupsize,v0,v1,ix);
^
MATLAB/software/nauty26r7/naugraph.c:204:38: style: Variable 'split1' is reassigned a value before the old one has been used. [redundantAssignment]
    while (*numcells < n && ((split1 = hint, ISELEMENT(active,split1))
                                     ^
MATLAB/software/nauty26r7/naugraph.c:202:12: note: split1 is assigned
    split1 = -1;
           ^
MATLAB/software/nauty26r7/naugraph.c:204:38: note: split1 is overwritten
    while (*numcells < n && ((split1 = hint, ISELEMENT(active,split1))
                                     ^
MATLAB/software/nauty26r7/naugraph.c:360:38: style: Variable 'split1' is reassigned a value before the old one has been used. [redundantAssignment]
    while (*numcells < n && ((split1 = hint, ISELEMENT1(active,split1))
                                     ^
MATLAB/software/nauty26r7/naugraph.c:357:12: note: split1 is assigned
    split1 = -1;
           ^
MATLAB/software/nauty26r7/naugraph.c:360:38: note: split1 is overwritten
    while (*numcells < n && ((split1 = hint, ISELEMENT1(active,split1))
                                     ^
MATLAB/software/nauty26r7/naugraph.c:70:9: style: The scope of the variable 'pos' can be reduced. [variableScope]
    int pos;
        ^
MATLAB/software/nauty26r7/naugraph.c:71:10: style: The scope of the variable 'pgp' can be reduced. [variableScope]
    set *pgp;
         ^
MATLAB/software/nauty26r7/naugraph.c:53:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR set workset[MAXM];   /* used for scratch work */
^
MATLAB/software/nauty26r7/naugraph.c:54:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int workperm[MAXN];
^
MATLAB/software/nauty26r7/naugraph.c:55:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int bucket[MAXN+2];
^
MATLAB/software/nauty26r7/naugraph.c:56:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR set dnwork[40*MAXM];
^
MATLAB/software/nauty26r7/naugraph.c:677:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (m > MAXM)
^
MATLAB/software/nauty26r7/naugraph.c:683:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (n > MAXN)
^
MATLAB/software/nauty26r7/naugroup.c:180:17: error: Common realloc mistake: 'group' nulled but not freed upon failure [memleakOnRealloc]
     if (group) group = (grouprec*)realloc((void*)group,sz);
                ^
MATLAB/software/nauty26r7/naugroup.c:64:14: style: The scope of the variable 'q' can be reduced. [variableScope]
    permrec *q;
             ^
MATLAB/software/nauty26r7/naugroup.c:113:17: style: The scope of the variable 'qq' can be reduced. [variableScope]
    permrec *q,*qq;
                ^
MATLAB/software/nauty26r7/naugroup.c:167:9: style: The scope of the variable 'depth' can be reduced. [variableScope]
    int depth;
        ^
MATLAB/software/nauty26r7/naugroup.c:168:12: style: The scope of the variable 'sz' can be reduced. [variableScope]
    size_t sz;
           ^
MATLAB/software/nauty26r7/naugroup.c:211:11: style: The scope of the variable 'index' can be reduced. [variableScope]
    int l,index;
          ^
MATLAB/software/nauty26r7/naugroup.c:215:9: style: The scope of the variable 'head' can be reduced. [variableScope]
    int head,tail;
        ^
MATLAB/software/nauty26r7/naugroup.c:215:14: style: The scope of the variable 'tail' can be reduced. [variableScope]
    int head,tail;
             ^
MATLAB/software/nauty26r7/naugroup.c:282:17: style: The scope of the variable 'h' can be reduced. [variableScope]
    int m,i,j,k,h,nc,leni;
                ^
MATLAB/software/nauty26r7/naugroup.c:282:22: style: The scope of the variable 'leni' can be reduced. [variableScope]
    int m,i,j,k,h,nc,leni;
                     ^
MATLAB/software/nauty26r7/naugroup.c:339:15: style: Local variable 'coset' shadows outer variable [shadowVariable]
    cosetrec *coset;
              ^
MATLAB/software/nauty26r7/naugroup.c:13:1: note: Shadowed declaration
DYNALLSTAT(cosetrec,coset,coset_sz);
^
MATLAB/software/nauty26r7/naugroup.c:339:15: note: Shadow variable
    cosetrec *coset;
              ^
MATLAB/software/nauty26r7/naugroup.c:400:15: style: Local variable 'coset' shadows outer variable [shadowVariable]
    cosetrec *coset;
              ^
MATLAB/software/nauty26r7/naugroup.c:13:1: note: Shadowed declaration
DYNALLSTAT(cosetrec,coset,coset_sz);
^
MATLAB/software/nauty26r7/naugroup.c:400:15: note: Shadow variable
    cosetrec *coset;
              ^
MATLAB/software/nauty26r7/naugroup.c:469:15: style: Local variable 'coset' shadows outer variable [shadowVariable]
    cosetrec *coset;
              ^
MATLAB/software/nauty26r7/naugroup.c:13:1: note: Shadowed declaration
DYNALLSTAT(cosetrec,coset,coset_sz);
^
MATLAB/software/nauty26r7/naugroup.c:469:15: note: Shadow variable
    cosetrec *coset;
              ^
MATLAB/software/nauty26r7/naugstrings.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/naugstrings.c:466:13: style: Variable 'ii' is reassigned a value before the old one has been used. [redundantAssignment]
    for (ii = 0; ii < bodylen; ++ii) p[ii] = 0;
            ^
MATLAB/software/nauty26r7/naugstrings.c:460:8: note: ii is assigned
    ii = G6LEN(n)+3;
       ^
MATLAB/software/nauty26r7/naugstrings.c:466:13: note: ii is overwritten
    for (ii = 0; ii < bodylen; ++ii) p[ii] = 0;
            ^
MATLAB/software/nauty26r7/naugstrings.c:507:13: style: Variable 'ii' is reassigned a value before the old one has been used. [redundantAssignment]
    for (ii = 0; ii < bodylen; ++ii) p[ii] = 0;
            ^
MATLAB/software/nauty26r7/naugstrings.c:501:8: note: ii is assigned
    ii = G6LEN(n)+3;
       ^
MATLAB/software/nauty26r7/naugstrings.c:507:13: note: ii is overwritten
    for (ii = 0; ii < bodylen; ++ii) p[ii] = 0;
            ^
MATLAB/software/nauty26r7/naugstrings.c:49:10: style: The scope of the variable 'gj' can be reduced. [variableScope]
    set *gj;
         ^
MATLAB/software/nauty26r7/naugstrings.c:91:10: style: The scope of the variable 'gj' can be reduced. [variableScope]
    set *gj;
         ^
MATLAB/software/nauty26r7/naugstrings.c:134:14: style: The scope of the variable 'pgj' can be reduced. [variableScope]
    set *gj,*pgj;
             ^
MATLAB/software/nauty26r7/naugstrings.c:136:33: style: The scope of the variable 'nwords' can be reduced. [variableScope]
    int r,rr,topbit,nb,lastj,iw,nwords;
                                ^
MATLAB/software/nauty26r7/naugstrings.c:246:10: style: The scope of the variable 'gj' can be reduced. [variableScope]
    set *gj;
         ^
MATLAB/software/nauty26r7/naugstrings.c:347:9: style: The scope of the variable 'dj' can be reduced. [variableScope]
    int dj,k,lastj;
        ^
MATLAB/software/nauty26r7/naugstrings.c:349:18: style: The scope of the variable 'vj' can be reduced. [variableScope]
    size_t ii,*v,vj,l;
                 ^
MATLAB/software/nauty26r7/naugstrings.c:52:8: style: Variable 'ii' is assigned a value that is never used. [unreadVariable]
    ii = G6LEN(n)+3;
       ^
MATLAB/software/nauty26r7/naugstrings.c:94:8: style: Variable 'ii' is assigned a value that is never used. [unreadVariable]
    ii = D6LEN(n)+3;
       ^
MATLAB/software/nauty26r7/naugstrings.c:355:8: style: Variable 'ii' is assigned a value that is never used. [unreadVariable]
    ii = (size_t)(nb+1)*(n/6+sg->nde/3);
       ^
MATLAB/software/nauty26r7/nausparse.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/nausparse.c:276:21: style: Array index 'k' is used before limits check. [arrayIndexThenCheck]
                if (ISMARKED1(k) && k < mina) return -1;
                    ^
MATLAB/software/nauty26r7/nausparse.c:386:29: style: Array index 'k' is used before limits check. [arrayIndexThenCheck]
                        if (ISMARKED1(k) && k < mina) return -1;
                            ^
MATLAB/software/nauty26r7/nausparse.c:455:21: style: Array index 'k' is used before limits check. [arrayIndexThenCheck]
                if (ISMARKED1(k) && k < mina) return -1;
                    ^
MATLAB/software/nauty26r7/nausparse.c:190:13: style: The scope of the variable 'di' can be reduced. [variableScope]
    int n,i,di;
            ^
MATLAB/software/nauty26r7/nausparse.c:191:12: style: The scope of the variable 'vi' can be reduced. [variableScope]
    size_t vi,*v1,*v2,j;
           ^
MATLAB/software/nauty26r7/nausparse.c:413:11: style: The scope of the variable 'di' can be reduced. [variableScope]
    int i,di,dli;
          ^
MATLAB/software/nauty26r7/nausparse.c:413:14: style: The scope of the variable 'dli' can be reduced. [variableScope]
    int i,di,dli;
             ^
MATLAB/software/nauty26r7/nausparse.c:415:19: style: The scope of the variable 'vi' can be reduced. [variableScope]
    size_t *v,*cv,vi,vli,j;
                  ^
MATLAB/software/nauty26r7/nausparse.c:415:22: style: The scope of the variable 'vli' can be reduced. [variableScope]
    size_t *v,*cv,vi,vli,j;
                     ^
MATLAB/software/nauty26r7/nausparse.c:416:9: style: The scope of the variable 'mina' can be reduced. [variableScope]
    int mina;
        ^
MATLAB/software/nauty26r7/nausparse.c:480:11: style: The scope of the variable 'dli' can be reduced. [variableScope]
    int i,dli,n;
          ^
MATLAB/software/nauty26r7/nausparse.c:481:19: style: The scope of the variable 'vli' can be reduced. [variableScope]
    size_t *v,*cv,vli,j,k;
                  ^
MATLAB/software/nauty26r7/sorttemplates.c:79:21: style: The scope of the variable 'nn' can be reduced. [variableScope]
    int a,d,ba,dc,s,nn;
                    ^
MATLAB/software/nauty26r7/nausparse.c:536:22: style: The scope of the variable 'sh' can be reduced. [variableScope]
    sparsegraph *sg,*sh;
                     ^
MATLAB/software/nauty26r7/nausparse.c:561:22: style: The scope of the variable 'sh' can be reduced. [variableScope]
    sparsegraph *sg,*sh;
                     ^
MATLAB/software/nauty26r7/nausparse.c:1325:11: style: The scope of the variable 'di' can be reduced. [variableScope]
    int n,di;
          ^
MATLAB/software/nauty26r7/nausparse.c:1327:15: style: The scope of the variable 'vi' can be reduced. [variableScope]
    size_t *v,vi,j;
              ^
MATLAB/software/nauty26r7/nausparse.c:1373:15: style: The scope of the variable 'di' can be reduced. [variableScope]
    int m,n,i,di;
              ^
MATLAB/software/nauty26r7/nausparse.c:1374:15: style: The scope of the variable 'vi' can be reduced. [variableScope]
    size_t *v,vi,j;
              ^
MATLAB/software/nauty26r7/nausparse.c:561:18: style: Unused variable: sg [unusedVariable]
    sparsegraph *sg,*sh;
                 ^
MATLAB/software/nauty26r7/nausparse.c:70:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR short vmark1[MAXN];
^
MATLAB/software/nauty26r7/nausparse.c:71:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR short vmark2[MAXN];
^
MATLAB/software/nauty26r7/nausparse.c:72:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int work1[MAXN];
^
MATLAB/software/nauty26r7/nausparse.c:73:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int work2[MAXN];
^
MATLAB/software/nauty26r7/nausparse.c:74:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int work3[MAXN];
^
MATLAB/software/nauty26r7/nausparse.c:75:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int work4[MAXN];
^
MATLAB/software/nauty26r7/nausparse.c:76:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR set snwork[40*MAXM];
^
MATLAB/software/nauty26r7/nausparse.c:171:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        RESETMARKS1;
^
MATLAB/software/nauty26r7/nausparse.c:207:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        RESETMARKS1;
^
MATLAB/software/nauty26r7/nausparse.c:261:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        RESETMARKS1;
^
MATLAB/software/nauty26r7/nausparse.c:371:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                RESETMARKS1;
^
MATLAB/software/nauty26r7/nausparse.c:439:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        RESETMARKS1;
^
MATLAB/software/nauty26r7/nausparse.c:874:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            RESETMARKS1;
^
MATLAB/software/nauty26r7/nausparse.c:875:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            RESETMARKS2;
^
MATLAB/software/nauty26r7/nausparse.c:946:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            RESETMARKS1;
^
MATLAB/software/nauty26r7/nausparse.c:1573:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            RESETMARKS1;
^
MATLAB/software/nauty26r7/nausparse.c:1703:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (m > MAXM)
^
MATLAB/software/nauty26r7/nausparse.c:1709:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (n > MAXN)
^
MATLAB/software/nauty26r7/nautaux.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/nautaux.c:89:21: style: Variable 'cellend' is assigned a value that is never used. [unreadVariable]
            cellend = workperm[v1+1] - 1;
                    ^
MATLAB/software/nauty26r7/nautaux.c:39:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR set workset[MAXM];   /* used for scratch work */
^
MATLAB/software/nauty26r7/nautaux.c:40:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int workperm[MAXN+2];
^
MATLAB/software/nauty26r7/nautaux.c:170:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    set newverts[MAXM],*gx;
^
MATLAB/software/nauty26r7/nautaux.c:219:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (m > MAXM)
^
MATLAB/software/nauty26r7/nautaux.c:225:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (n > MAXN)
^
MATLAB/software/nauty26r7/nautest.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/nautest.c:132:10: style: Variable 'curfile' is assigned a value that is never used. [unreadVariable]
 curfile = 0;
         ^
MATLAB/software/nauty26r7/nautest.c:11:12: style: Unused variable: ww [unusedVariable]
 setword w,ww;
           ^
MATLAB/software/nauty26r7/nautest.c:140:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        printf("CPUTIME = %f\n",CPUTIME);
^
MATLAB/software/nauty26r7/nautest.c:21:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  MAXN,MAXM,WORDSIZE,NAUTY_INFINITY);
^
MATLAB/software/nauty26r7/nauthread1.c:105:5: style:inconclusive: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
    for (started = finished = 0; finished < THREADS; )
    ^
MATLAB/software/nauty26r7/nauthread1.c:32:10: style: Unused variable: gv [unusedVariable]
    set *gv;
         ^
MATLAB/software/nauty26r7/nauthread1.c:94:9: style: Unused variable: n [unusedVariable]
    int n,ret;
        ^
MATLAB/software/nauty26r7/nauthread2.c:111:5: style:inconclusive: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
    for (started = finished = 0; finished < THREADS; )
    ^
MATLAB/software/nauty26r7/nauthread2.c:100:9: style: Unused variable: n [unusedVariable]
    int n,ret;
        ^
MATLAB/software/nauty26r7/nautil.c:212:9: style: The scope of the variable 'digit' can be reduced. [variableScope]
    int digit,j,k;
        ^
MATLAB/software/nauty26r7/nautil.c:213:10: style: The scope of the variable 'c' can be reduced. [variableScope]
    char c;
         ^
MATLAB/software/nauty26r7/nautil.c:613:16: style: The scope of the variable 'next' can be reduced. [variableScope]
    int i,prev,next;
               ^
MATLAB/software/nauty26r7/nautil.c:90:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int workperm[MAXN];
^
MATLAB/software/nauty26r7/nautil.c:702:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (m > MAXM)
^
MATLAB/software/nauty26r7/nautil.c:708:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (n > MAXN)
^
MATLAB/software/nauty26r7/nautinv.c:1580:35: style: Variable 'split1' is reassigned a value before the old one has been used. [redundantAssignment]
 while (*numcells < n && ((split1 = hint, ISELEMENT(active,split1))
                                  ^
MATLAB/software/nauty26r7/nautinv.c:1578:9: note: split1 is assigned
 split1 = -1;
        ^
MATLAB/software/nauty26r7/nautinv.c:1580:35: note: split1 is overwritten
 while (*numcells < n && ((split1 = hint, ISELEMENT(active,split1))
                                  ^
MATLAB/software/nauty26r7/nautinv.c:735:10: style: The scope of the variable 'w' can be reduced. [variableScope]
 setword w;
         ^
MATLAB/software/nauty26r7/nautinv.c:73:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int workshort[MAXN+2];
^
MATLAB/software/nauty26r7/nautinv.c:74:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int vv[MAXN],ww[MAXN];
^
MATLAB/software/nauty26r7/nautinv.c:75:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int workperm[MAXN];
^
MATLAB/software/nauty26r7/nautinv.c:76:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int bucket[MAXN+2];
^
MATLAB/software/nauty26r7/nautinv.c:77:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int count[MAXN];
^
MATLAB/software/nauty26r7/nautinv.c:78:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR set workset[MAXM];
^
MATLAB/software/nauty26r7/nautinv.c:79:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR set w01[MAXM],w02[MAXM],w03[MAXM],w12[MAXM],w13[MAXM],w23[MAXM];
^
MATLAB/software/nauty26r7/nautinv.c:80:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR set pt0[MAXM],pt1[MAXM],pt2[MAXM];
^
MATLAB/software/nauty26r7/nautinv.c:81:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR set wss[MAXCLIQUE-1][MAXM];
^
MATLAB/software/nauty26r7/nautinv.c:82:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR set ws1[MAXM],ws2[MAXM];
^
MATLAB/software/nauty26r7/nautinv.c:1190:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 set wss[MAXCLIQUE-1][MAXM];
^
MATLAB/software/nauty26r7/nautinv.c:1492:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        if (m > MAXM)
^
MATLAB/software/nauty26r7/nautinv.c:1498:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        if (n > MAXN)
^
MATLAB/software/nauty26r7/naututil.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/naututil.c:847:22: warning: Either the condition 'iec==1000' is redundant or the array 'ec->edge[1000]' is accessed at index 1000, which is out of bounds. [arrayIndexOutOfBoundsCond]
        ww = ec->edge[iec++];
                     ^
MATLAB/software/nauty26r7/naututil.c:876:17: note: Assuming that condition 'iec==1000' is not redundant
        if (iec == ECHUNKSIZE) { iec = 0; ec = ec->next; }
                ^
MATLAB/software/nauty26r7/naututil.c:847:22: note: Array index out of bounds
        ww = ec->edge[iec++];
                     ^
MATLAB/software/nauty26r7/naututil.c:743:29: warning: Either the condition '!ecnext' is redundant or there is possible null pointer dereference: ecnext. [nullPointerRedundantCheck]
                            ecnext->next = NULL;
                            ^
MATLAB/software/nauty26r7/naututil.c:742:33: note: Assuming that condition '!ecnext' is not redundant
                            if (!ecnext) alloc_error("malloc");
                                ^
MATLAB/software/nauty26r7/naututil.c:743:29: note: Null pointer dereference
                            ecnext->next = NULL;
                            ^
MATLAB/software/nauty26r7/naututil.c:749:21: warning: Either the condition '!ecnext' is redundant or there is possible null pointer dereference: ec. [nullPointerRedundantCheck]
                    ec->edge[iec++] = vv;
                    ^
MATLAB/software/nauty26r7/naututil.c:742:33: note: Assuming that condition '!ecnext' is not redundant
                            if (!ecnext) alloc_error("malloc");
                                ^
MATLAB/software/nauty26r7/naututil.c:744:40: note: Assignment 'ec->next=ecnext', assigned value is 0
                            ec->next = ecnext;
                                       ^
MATLAB/software/nauty26r7/naututil.c:746:32: note: Assignment 'ec=ec->next', assigned value is 0
                        ec = ec->next;
                               ^
MATLAB/software/nauty26r7/naututil.c:749:21: note: Null pointer dereference
                    ec->edge[iec++] = vv;
                    ^
MATLAB/software/nauty26r7/naututil.c:750:21: warning: Either the condition '!ecnext' is redundant or there is possible null pointer dereference: ec. [nullPointerRedundantCheck]
                    ec->edge[iec++] = -1 - ww;
                    ^
MATLAB/software/nauty26r7/naututil.c:742:33: note: Assuming that condition '!ecnext' is not redundant
                            if (!ecnext) alloc_error("malloc");
                                ^
MATLAB/software/nauty26r7/naututil.c:744:40: note: Assignment 'ec->next=ecnext', assigned value is 0
                            ec->next = ecnext;
                                       ^
MATLAB/software/nauty26r7/naututil.c:746:32: note: Assignment 'ec=ec->next', assigned value is 0
                        ec = ec->next;
                               ^
MATLAB/software/nauty26r7/naututil.c:750:21: note: Null pointer dereference
                    ec->edge[iec++] = -1 - ww;
                    ^
MATLAB/software/nauty26r7/naututil.c:781:33: warning: Either the condition '!ecnext' is redundant or there is possible null pointer dereference: ecnext. [nullPointerRedundantCheck]
                                ecnext->next = NULL;
                                ^
MATLAB/software/nauty26r7/naututil.c:780:37: note: Assuming that condition '!ecnext' is not redundant
                                if (!ecnext) alloc_error("malloc");
                                    ^
MATLAB/software/nauty26r7/naututil.c:781:33: note: Null pointer dereference
                                ecnext->next = NULL;
                                ^
MATLAB/software/nauty26r7/naututil.c:787:25: warning: Either the condition '!ecnext' is redundant or there is possible null pointer dereference: ec. [nullPointerRedundantCheck]
                        ec->edge[iec++] = vv;
                        ^
MATLAB/software/nauty26r7/naututil.c:780:37: note: Assuming that condition '!ecnext' is not redundant
                                if (!ecnext) alloc_error("malloc");
                                    ^
MATLAB/software/nauty26r7/naututil.c:782:44: note: Assignment 'ec->next=ecnext', assigned value is 0
                                ec->next = ecnext;
                                           ^
MATLAB/software/nauty26r7/naututil.c:784:36: note: Assignment 'ec=ec->next', assigned value is 0
                            ec = ec->next;
                                   ^
MATLAB/software/nauty26r7/naututil.c:787:25: note: Null pointer dereference
                        ec->edge[iec++] = vv;
                        ^
MATLAB/software/nauty26r7/naututil.c:788:25: warning: Either the condition '!ecnext' is redundant or there is possible null pointer dereference: ec. [nullPointerRedundantCheck]
                        ec->edge[iec++] = ww;
                        ^
MATLAB/software/nauty26r7/naututil.c:780:37: note: Assuming that condition '!ecnext' is not redundant
                                if (!ecnext) alloc_error("malloc");
                                    ^
MATLAB/software/nauty26r7/naututil.c:782:44: note: Assignment 'ec->next=ecnext', assigned value is 0
                                ec->next = ecnext;
                                           ^
MATLAB/software/nauty26r7/naututil.c:784:36: note: Assignment 'ec=ec->next', assigned value is 0
                            ec = ec->next;
                                   ^
MATLAB/software/nauty26r7/naututil.c:788:25: note: Null pointer dereference
                        ec->edge[iec++] = ww;
                        ^
MATLAB/software/nauty26r7/naututil.c:972:29: warning: Either the condition '!ecnext' is redundant or there is possible null pointer dereference: ecnext. [nullPointerRedundantCheck]
                            ecnext->next = NULL;
                            ^
MATLAB/software/nauty26r7/naututil.c:971:33: note: Assuming that condition '!ecnext' is not redundant
                            if (!ecnext) alloc_error("malloc");
                                ^
MATLAB/software/nauty26r7/naututil.c:972:29: note: Null pointer dereference
                            ecnext->next = NULL;
                            ^
MATLAB/software/nauty26r7/naututil.c:978:21: warning: Either the condition '!ecnext' is redundant or there is possible null pointer dereference: ec. [nullPointerRedundantCheck]
                    ec->edge[iec].v1 = vv;
                    ^
MATLAB/software/nauty26r7/naututil.c:971:33: note: Assuming that condition '!ecnext' is not redundant
                            if (!ecnext) alloc_error("malloc");
                                ^
MATLAB/software/nauty26r7/naututil.c:973:40: note: Assignment 'ec->next=ecnext', assigned value is 0
                            ec->next = ecnext;
                                       ^
MATLAB/software/nauty26r7/naututil.c:975:32: note: Assignment 'ec=ec->next', assigned value is 0
                        ec = ec->next;
                               ^
MATLAB/software/nauty26r7/naututil.c:978:21: note: Null pointer dereference
                    ec->edge[iec].v1 = vv;
                    ^
MATLAB/software/nauty26r7/naututil.c:979:21: warning: Either the condition '!ecnext' is redundant or there is possible null pointer dereference: ec. [nullPointerRedundantCheck]
                    ec->edge[iec].v2 = -1 - ww;
                    ^
MATLAB/software/nauty26r7/naututil.c:971:33: note: Assuming that condition '!ecnext' is not redundant
                            if (!ecnext) alloc_error("malloc");
                                ^
MATLAB/software/nauty26r7/naututil.c:973:40: note: Assignment 'ec->next=ecnext', assigned value is 0
                            ec->next = ecnext;
                                       ^
MATLAB/software/nauty26r7/naututil.c:975:32: note: Assignment 'ec=ec->next', assigned value is 0
                        ec = ec->next;
                               ^
MATLAB/software/nauty26r7/naututil.c:979:21: note: Null pointer dereference
                    ec->edge[iec].v2 = -1 - ww;
                    ^
MATLAB/software/nauty26r7/naututil.c:980:21: warning: Either the condition '!ecnext' is redundant or there is possible null pointer dereference: ec. [nullPointerRedundantCheck]
                    ec->edge[iec].wt = currwt;
                    ^
MATLAB/software/nauty26r7/naututil.c:971:33: note: Assuming that condition '!ecnext' is not redundant
                            if (!ecnext) alloc_error("malloc");
                                ^
MATLAB/software/nauty26r7/naututil.c:973:40: note: Assignment 'ec->next=ecnext', assigned value is 0
                            ec->next = ecnext;
                                       ^
MATLAB/software/nauty26r7/naututil.c:975:32: note: Assignment 'ec=ec->next', assigned value is 0
                        ec = ec->next;
                               ^
MATLAB/software/nauty26r7/naututil.c:980:21: note: Null pointer dereference
                    ec->edge[iec].wt = currwt;
                    ^
MATLAB/software/nauty26r7/naututil.c:1013:33: warning: Either the condition '!ecnext' is redundant or there is possible null pointer dereference: ecnext. [nullPointerRedundantCheck]
                                ecnext->next = NULL;
                                ^
MATLAB/software/nauty26r7/naututil.c:1012:37: note: Assuming that condition '!ecnext' is not redundant
                                if (!ecnext) alloc_error("malloc");
                                    ^
MATLAB/software/nauty26r7/naututil.c:1013:33: note: Null pointer dereference
                                ecnext->next = NULL;
                                ^
MATLAB/software/nauty26r7/naututil.c:1019:25: warning: Either the condition '!ecnext' is redundant or there is possible null pointer dereference: ec. [nullPointerRedundantCheck]
                        ec->edge[iec].v1 = vv;
                        ^
MATLAB/software/nauty26r7/naututil.c:1012:37: note: Assuming that condition '!ecnext' is not redundant
                                if (!ecnext) alloc_error("malloc");
                                    ^
MATLAB/software/nauty26r7/naututil.c:1014:44: note: Assignment 'ec->next=ecnext', assigned value is 0
                                ec->next = ecnext;
                                           ^
MATLAB/software/nauty26r7/naututil.c:1016:36: note: Assignment 'ec=ec->next', assigned value is 0
                            ec = ec->next;
                                   ^
MATLAB/software/nauty26r7/naututil.c:1019:25: note: Null pointer dereference
                        ec->edge[iec].v1 = vv;
                        ^
MATLAB/software/nauty26r7/naututil.c:1020:25: warning: Either the condition '!ecnext' is redundant or there is possible null pointer dereference: ec. [nullPointerRedundantCheck]
                        ec->edge[iec].v2 = ww;
                        ^
MATLAB/software/nauty26r7/naututil.c:1012:37: note: Assuming that condition '!ecnext' is not redundant
                                if (!ecnext) alloc_error("malloc");
                                    ^
MATLAB/software/nauty26r7/naututil.c:1014:44: note: Assignment 'ec->next=ecnext', assigned value is 0
                                ec->next = ecnext;
                                           ^
MATLAB/software/nauty26r7/naututil.c:1016:36: note: Assignment 'ec=ec->next', assigned value is 0
                            ec = ec->next;
                                   ^
MATLAB/software/nauty26r7/naututil.c:1020:25: note: Null pointer dereference
                        ec->edge[iec].v2 = ww;
                        ^
MATLAB/software/nauty26r7/naututil.c:1021:25: warning: Either the condition '!ecnext' is redundant or there is possible null pointer dereference: ec. [nullPointerRedundantCheck]
                        ec->edge[iec].wt = currwt;
                        ^
MATLAB/software/nauty26r7/naututil.c:1012:37: note: Assuming that condition '!ecnext' is not redundant
                                if (!ecnext) alloc_error("malloc");
                                    ^
MATLAB/software/nauty26r7/naututil.c:1014:44: note: Assignment 'ec->next=ecnext', assigned value is 0
                                ec->next = ecnext;
                                           ^
MATLAB/software/nauty26r7/naututil.c:1016:36: note: Assignment 'ec=ec->next', assigned value is 0
                            ec = ec->next;
                                   ^
MATLAB/software/nauty26r7/naututil.c:1021:25: note: Null pointer dereference
                        ec->edge[iec].wt = currwt;
                        ^
MATLAB/software/nauty26r7/naututil.c:175:13: style: The scope of the variable 'x' can be reduced. [variableScope]
    setword x;
            ^
MATLAB/software/nauty26r7/naututil.c:395:9: style: The scope of the variable 'slen' can be reduced. [variableScope]
    int slen,j1,j2;
        ^
MATLAB/software/nauty26r7/naututil.c:395:17: style: The scope of the variable 'j2' can be reduced. [variableScope]
    int slen,j1,j2;
                ^
MATLAB/software/nauty26r7/naututil.c:440:9: style: The scope of the variable 'slen' can be reduced. [variableScope]
    int slen,slen1,j1,j2;
        ^
MATLAB/software/nauty26r7/naututil.c:440:14: style: The scope of the variable 'slen1' can be reduced. [variableScope]
    int slen,slen1,j1,j2;
             ^
MATLAB/software/nauty26r7/naututil.c:440:23: style: The scope of the variable 'j2' can be reduced. [variableScope]
    int slen,slen1,j1,j2;
                      ^
MATLAB/software/nauty26r7/naututil.c:441:16: style: The scope of the variable 'c' can be reduced. [variableScope]
    char s[50],c;
               ^
MATLAB/software/nauty26r7/naututil.c:1212:13: style: The scope of the variable 'curlen' can be reduced. [variableScope]
    int i,n,curlen,slen;
            ^
MATLAB/software/nauty26r7/naututil.c:2021:24: style: The scope of the variable 'val' can be reduced. [variableScope]
    unsigned long lkey,val,accum;
                       ^
MATLAB/software/nauty26r7/naututil.c:2087:19: style: The scope of the variable 'val' can be reduced. [variableScope]
    unsigned long val,accum;
                  ^
MATLAB/software/nauty26r7/naututil.c:2241:11: style: The scope of the variable 'j' can be reduced. [variableScope]
    int i,j,t;
          ^
MATLAB/software/nauty26r7/naututil.c:2241:13: style: The scope of the variable 't' can be reduced. [variableScope]
    int i,j,t;
            ^
MATLAB/software/nauty26r7/naututil.c:2335:14: style: The scope of the variable 'wgi' can be reduced. [variableScope]
    set *gi,*wgi;
             ^
MATLAB/software/nauty26r7/naututil.c:2828:13: style: The scope of the variable 'k' can be reduced. [variableScope]
    int i,j,k;
            ^
MATLAB/software/nauty26r7/naututil.c:2914:9: style: The scope of the variable 'j' can be reduced. [variableScope]
    int j,v1,v2,xval,curlen;
        ^
MATLAB/software/nauty26r7/naututil.c:2914:17: style: The scope of the variable 'xval' can be reduced. [variableScope]
    int j,v1,v2,xval,curlen;
                ^
MATLAB/software/nauty26r7/naututil.c:2953:17: style: The scope of the variable 'xval' can be reduced. [variableScope]
    int j,v1,v2,xval,curlen;
                ^
MATLAB/software/nauty26r7/naututil.c:97:0: information: Skipping configuration 'MAXN;SORT_TYPE2' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int workperm[MAXN+2];   /* used for scratch purposes */
^
MATLAB/software/nauty26r7/naututil.c:98:0: information: Skipping configuration 'MAXN;SORT_TYPE2' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR set workset[MAXM];      /* used for scratch purposes */
^
MATLAB/software/nauty26r7/naututil.c:623:0: information: Skipping configuration 'MAXN;SORT_TYPE2' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int p[MAXREG*MAXN];
^
MATLAB/software/nauty26r7/naututil.c:3149:0: information: Skipping configuration 'MAXN;SORT_TYPE2' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (m > MAXM)
^
MATLAB/software/nauty26r7/naututil.c:3155:0: information: Skipping configuration 'MAXN;SORT_TYPE2' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (n > MAXN)
^
MATLAB/software/nauty26r7/nauty.c:185:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR set defltwork[2*MAXM];   /* workspace in case none provided */
^
MATLAB/software/nauty26r7/nauty.c:186:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int workperm[MAXN];   /* various scratch uses */
^
MATLAB/software/nauty26r7/nauty.c:187:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR set fixedpts[MAXM];      /* points which were explicitly
^
MATLAB/software/nauty26r7/nauty.c:189:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int firstlab[MAXN],   /* label from first leaf */
^
MATLAB/software/nauty26r7/nauty.c:190:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
               canonlab[MAXN];   /* label from bsf leaf */
^
MATLAB/software/nauty26r7/nauty.c:191:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR short firstcode[MAXN+2],      /* codes for first leaf */
^
MATLAB/software/nauty26r7/nauty.c:192:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
         canoncode[MAXN+2];      /* codes for bsf leaf */
^
MATLAB/software/nauty26r7/nauty.c:193:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int firsttc[MAXN+2];  /* index of target cell for left path */
^
MATLAB/software/nauty26r7/nauty.c:194:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR set active[MAXM];     /* used to contain index to cells now
^
MATLAB/software/nauty26r7/nauty.c:303:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (m_arg > MAXM)
^
MATLAB/software/nauty26r7/nauty.c:306:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        fprintf(ERRFILE,"nauty: need m <= %d\n\n",MAXM);
^
MATLAB/software/nauty26r7/nauty.c:309:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (n_arg > MAXN || n_arg > WORDSIZE * m_arg)
^
MATLAB/software/nauty26r7/nauty.c:313:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                "nauty: need n <= min(%d,%d*m)\n\n",MAXM,WORDSIZE);
^
MATLAB/software/nauty26r7/nauty.c:573:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    set tcell[MAXM];
^
MATLAB/software/nauty26r7/nauty.c:726:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    set tcell[MAXM];
^
MATLAB/software/nauty26r7/nauty.c:1142:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (m > MAXM)
^
MATLAB/software/nauty26r7/nauty.c:1148:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (n > MAXN)
^
MATLAB/software/nauty26r7/nautyex1.c:18:11: style: The scope of the variable 'm' can be reduced. [variableScope]
    int n,m,v;
          ^
MATLAB/software/nauty26r7/nautyex10.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/nautyex2.c:25:10: style: Unused variable: gv [unusedVariable]
    set *gv;
         ^
MATLAB/software/nauty26r7/nautyex7.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/nautyex9.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/newedgeg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/newedgeg.c:215:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 t = CPUTIME;
^
MATLAB/software/nauty26r7/newedgeg.c:233:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 t = CPUTIME - t;
^
MATLAB/software/nauty26r7/newedgeg.c:138:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/newedgeg.c:83:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 graph h[MAXN*MAXM];
^
MATLAB/software/nauty26r7/newedgeg.c:84:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 grapg g2[MAXN*MAXM];
^
MATLAB/software/nauty26r7/newedgeg.c:220:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     if (n > MAXN-2)
^
MATLAB/software/nauty26r7/planarg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/planarg.c:178:13: style: The scope of the variable 'k' can be reduced. [variableScope]
    int i,j,k,n,argnum,ne,loops;
            ^
MATLAB/software/nauty26r7/planarg.c:178:15: style: The scope of the variable 'n' can be reduced. [variableScope]
    int i,j,k,n,argnum,ne,loops;
              ^
MATLAB/software/nauty26r7/planarg.c:178:24: style: The scope of the variable 'ne' can be reduced. [variableScope]
    int i,j,k,n,argnum,ne,loops;
                       ^
MATLAB/software/nauty26r7/planarg.c:179:18: style: The scope of the variable 'outcode' can be reduced. [variableScope]
    int codetype,outcode;
                 ^
MATLAB/software/nauty26r7/planarg.c:186:12: style: The scope of the variable 't0' can be reduced. [variableScope]
    double t0,tp,tnp,netotalp,netotalnp;
           ^
MATLAB/software/nauty26r7/planarg.c:333:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        t0 = CPUTIME;
^
MATLAB/software/nauty26r7/planarg.c:338:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            tp += CPUTIME - t0;
^
MATLAB/software/nauty26r7/planarg.c:354:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            tnp += CPUTIME - t0;
^
MATLAB/software/nauty26r7/planarg.c:190:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/planarity.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/planarity.c:1754:23: warning: The address of local variable 'embed_graph' might be accessed at non-zero index. [objectIndex]
    return embed_graph[r].link[0] == prev ?
                      ^
MATLAB/software/nauty26r7/planarity.c:74:34: note: Address of variable taken here.
                                 &embed_graph, &edge_pos, &v, &w);
                                 ^
MATLAB/software/nauty26r7/planarity.c:74:34: note: Calling function 'sparseg_adjl_is_planar', 8th argument '&embed_graph' value is lifetime=embed_graph
                                 &embed_graph, &edge_pos, &v, &w);
                                 ^
MATLAB/software/nauty26r7/planarity.c:2759:5: note: Calling function 'embedg_VES_are_adj_lists_consistent', 1st argument '*embed_graph' value is lifetime=embed_graph
    ASSERT(embedg_VES_are_adj_lists_consistent(*embed_graph, n));
    ^
MATLAB/software/nauty26r7/planarity.c:1936:48: note: Calling function 'embedg_VES_is_adj_list_consistent', 1st argument 'embed_graph' value is lifetime=embed_graph
        if (!embedg_VES_is_adj_list_consistent(embed_graph, n, i))
                                               ^
MATLAB/software/nauty26r7/planarity.c:1892:48: note: Calling function 'embedg_VES_get_next_in_dlcl', 1st argument 'embed_graph' value is lifetime=embed_graph
            next = embedg_VES_get_next_in_dlcl(embed_graph, n,
                                               ^
MATLAB/software/nauty26r7/planarity.c:1754:23: note: The address of local variable 'embed_graph' might be accessed at non-zero index.
    return embed_graph[r].link[0] == prev ?
                      ^
MATLAB/software/nauty26r7/planarity.c:1755:20: warning: The address of local variable 'embed_graph' might be accessed at non-zero index. [objectIndex]
        embed_graph[r].link[1] : embed_graph[r].link[0];
                   ^
MATLAB/software/nauty26r7/planarity.c:74:34: note: Address of variable taken here.
                                 &embed_graph, &edge_pos, &v, &w);
                                 ^
MATLAB/software/nauty26r7/planarity.c:74:34: note: Calling function 'sparseg_adjl_is_planar', 8th argument '&embed_graph' value is lifetime=embed_graph
                                 &embed_graph, &edge_pos, &v, &w);
                                 ^
MATLAB/software/nauty26r7/planarity.c:2759:5: note: Calling function 'embedg_VES_are_adj_lists_consistent', 1st argument '*embed_graph' value is lifetime=embed_graph
    ASSERT(embedg_VES_are_adj_lists_consistent(*embed_graph, n));
    ^
MATLAB/software/nauty26r7/planarity.c:1936:48: note: Calling function 'embedg_VES_is_adj_list_consistent', 1st argument 'embed_graph' value is lifetime=embed_graph
        if (!embedg_VES_is_adj_list_consistent(embed_graph, n, i))
                                               ^
MATLAB/software/nauty26r7/planarity.c:1892:48: note: Calling function 'embedg_VES_get_next_in_dlcl', 1st argument 'embed_graph' value is lifetime=embed_graph
            next = embedg_VES_get_next_in_dlcl(embed_graph, n,
                                               ^
MATLAB/software/nauty26r7/planarity.c:1755:20: note: The address of local variable 'embed_graph' might be accessed at non-zero index.
        embed_graph[r].link[1] : embed_graph[r].link[0];
                   ^
MATLAB/software/nauty26r7/planarity.c:1871:27: warning: The address of local variable 'embed_graph' might be accessed at non-zero index. [objectIndex]
        next = embed_graph[r].link[0];
                          ^
MATLAB/software/nauty26r7/planarity.c:74:34: note: Address of variable taken here.
                                 &embed_graph, &edge_pos, &v, &w);
                                 ^
MATLAB/software/nauty26r7/planarity.c:74:34: note: Calling function 'sparseg_adjl_is_planar', 8th argument '&embed_graph' value is lifetime=embed_graph
                                 &embed_graph, &edge_pos, &v, &w);
                                 ^
MATLAB/software/nauty26r7/planarity.c:2759:5: note: Calling function 'embedg_VES_are_adj_lists_consistent', 1st argument '*embed_graph' value is lifetime=embed_graph
    ASSERT(embedg_VES_are_adj_lists_consistent(*embed_graph, n));
    ^
MATLAB/software/nauty26r7/planarity.c:1936:48: note: Calling function 'embedg_VES_is_adj_list_consistent', 1st argument 'embed_graph' value is lifetime=embed_graph
        if (!embedg_VES_is_adj_list_consistent(embed_graph, n, i))
                                               ^
MATLAB/software/nauty26r7/planarity.c:1871:27: note: The address of local variable 'embed_graph' might be accessed at non-zero index.
        next = embed_graph[r].link[0];
                          ^
MATLAB/software/nauty26r7/planarity.c:1875:31: warning: The address of local variable 'embed_graph' might be accessed at non-zero index. [objectIndex]
            next = embed_graph[next].link[0];
                              ^
MATLAB/software/nauty26r7/planarity.c:74:34: note: Address of variable taken here.
                                 &embed_graph, &edge_pos, &v, &w);
                                 ^
MATLAB/software/nauty26r7/planarity.c:74:34: note: Calling function 'sparseg_adjl_is_planar', 8th argument '&embed_graph' value is lifetime=embed_graph
                                 &embed_graph, &edge_pos, &v, &w);
                                 ^
MATLAB/software/nauty26r7/planarity.c:2759:5: note: Calling function 'embedg_VES_are_adj_lists_consistent', 1st argument '*embed_graph' value is lifetime=embed_graph
    ASSERT(embedg_VES_are_adj_lists_consistent(*embed_graph, n));
    ^
MATLAB/software/nauty26r7/planarity.c:1936:48: note: Calling function 'embedg_VES_is_adj_list_consistent', 1st argument 'embed_graph' value is lifetime=embed_graph
        if (!embedg_VES_is_adj_list_consistent(embed_graph, n, i))
                                               ^
MATLAB/software/nauty26r7/planarity.c:1875:31: note: The address of local variable 'embed_graph' might be accessed at non-zero index.
            next = embed_graph[next].link[0];
                              ^
MATLAB/software/nauty26r7/planarity.c:1887:26: warning: The address of local variable 'embed_graph' might be accessed at non-zero index. [objectIndex]
        cur = embed_graph[r].link[0];
                         ^
MATLAB/software/nauty26r7/planarity.c:74:34: note: Address of variable taken here.
                                 &embed_graph, &edge_pos, &v, &w);
                                 ^
MATLAB/software/nauty26r7/planarity.c:74:34: note: Calling function 'sparseg_adjl_is_planar', 8th argument '&embed_graph' value is lifetime=embed_graph
                                 &embed_graph, &edge_pos, &v, &w);
                                 ^
MATLAB/software/nauty26r7/planarity.c:2759:5: note: Calling function 'embedg_VES_are_adj_lists_consistent', 1st argument '*embed_graph' value is lifetime=embed_graph
    ASSERT(embedg_VES_are_adj_lists_consistent(*embed_graph, n));
    ^
MATLAB/software/nauty26r7/planarity.c:1936:48: note: Calling function 'embedg_VES_is_adj_list_consistent', 1st argument 'embed_graph' value is lifetime=embed_graph
        if (!embedg_VES_is_adj_list_consistent(embed_graph, n, i))
                                               ^
MATLAB/software/nauty26r7/planarity.c:1887:26: note: The address of local variable 'embed_graph' might be accessed at non-zero index.
        cur = embed_graph[r].link[0];
                         ^
MATLAB/software/nauty26r7/planarity.c:6546:14: warning: The address of local variable 'path_v' might be accessed at non-zero index. [objectIndex]
    (*path_v)[++(*nbr_v)] = s;
             ^
MATLAB/software/nauty26r7/planarity.c:6082:37: note: Address of variable taken here.
                                    &path_v, &path_e,
                                    ^
MATLAB/software/nauty26r7/planarity.c:6082:37: note: Calling function 'embedg_iso_get_highest_x_y_path', 11th argument '&path_v' value is lifetime=path_v
                                    &path_v, &path_e,
                                    ^
MATLAB/software/nauty26r7/planarity.c:6546:14: note: The address of local variable 'path_v' might be accessed at non-zero index.
    (*path_v)[++(*nbr_v)] = s;
             ^
MATLAB/software/nauty26r7/planarity.c:6574:22: warning: The address of local variable 'path_v' might be accessed at non-zero index. [objectIndex]
            (*path_v)[++(*nbr_v)] = s;
                     ^
MATLAB/software/nauty26r7/planarity.c:6082:37: note: Address of variable taken here.
                                    &path_v, &path_e,
                                    ^
MATLAB/software/nauty26r7/planarity.c:6082:37: note: Calling function 'embedg_iso_get_highest_x_y_path', 11th argument '&path_v' value is lifetime=path_v
                                    &path_v, &path_e,
                                    ^
MATLAB/software/nauty26r7/planarity.c:6574:22: note: The address of local variable 'path_v' might be accessed at non-zero index.
            (*path_v)[++(*nbr_v)] = s;
                     ^
MATLAB/software/nauty26r7/planarity.c:6676:22: warning: The address of local variable 'path_v' might be accessed at non-zero index. [objectIndex]
            (*path_v)[++(*nbr_v)] = s;
                     ^
MATLAB/software/nauty26r7/planarity.c:6082:37: note: Address of variable taken here.
                                    &path_v, &path_e,
                                    ^
MATLAB/software/nauty26r7/planarity.c:6082:37: note: Calling function 'embedg_iso_get_highest_x_y_path', 11th argument '&path_v' value is lifetime=path_v
                                    &path_v, &path_e,
                                    ^
MATLAB/software/nauty26r7/planarity.c:6676:22: note: The address of local variable 'path_v' might be accessed at non-zero index.
            (*path_v)[++(*nbr_v)] = s;
                     ^
MATLAB/software/nauty26r7/planarity.c:6677:22: warning: The address of local variable 'path_e' might be accessed at non-zero index. [objectIndex]
            (*path_e)[*nbr_v] = s_e;
                     ^
MATLAB/software/nauty26r7/planarity.c:6082:46: note: Address of variable taken here.
                                    &path_v, &path_e,
                                             ^
MATLAB/software/nauty26r7/planarity.c:6082:46: note: Calling function 'embedg_iso_get_highest_x_y_path', 12th argument '&path_e' value is lifetime=path_e
                                    &path_v, &path_e,
                                             ^
MATLAB/software/nauty26r7/planarity.c:6677:22: note: The address of local variable 'path_e' might be accessed at non-zero index.
            (*path_e)[*nbr_v] = s_e;
                     ^
MATLAB/software/nauty26r7/planarity.c:6739:20: warning: The address of local variable 'path_v' might be accessed at non-zero index. [objectIndex]
    p_y = (*path_v)[*nbr_v];
                   ^
MATLAB/software/nauty26r7/planarity.c:6082:37: note: Address of variable taken here.
                                    &path_v, &path_e,
                                    ^
MATLAB/software/nauty26r7/planarity.c:6082:37: note: Calling function 'embedg_iso_get_highest_x_y_path', 11th argument '&path_v' value is lifetime=path_v
                                    &path_v, &path_e,
                                    ^
MATLAB/software/nauty26r7/planarity.c:6739:20: note: The address of local variable 'path_v' might be accessed at non-zero index.
    p_y = (*path_v)[*nbr_v];
                   ^
MATLAB/software/nauty26r7/planarity.c:9586:13: style: Expression is always false because 'else if' condition matches previous condition at line 9560. [multiCondition]
        if (px_attached_high)
            ^
MATLAB/software/nauty26r7/planarity.c:541:17: style: Redundant condition: !digraph. 'digraph || (!digraph && u>v)' is equivalent to 'digraph || u>v' [redundantCondition]
                || (!digraph && u > v))
                ^
MATLAB/software/nauty26r7/planarity.c:549:22: style: Condition '!digraph' is always true [knownConditionTrueFalse]
            else if (!digraph && u == v)
                     ^
MATLAB/software/nauty26r7/planarity.c:540:17: note: Assuming that condition 'digraph' is not redundant
            if (digraph
                ^
MATLAB/software/nauty26r7/planarity.c:549:22: note: Condition '!digraph' is always true
            else if (!digraph && u == v)
                     ^
MATLAB/software/nauty26r7/planarity.c:5150:17: style: Variable 'i_p' is reassigned a value before the old one has been used. [redundantAssignment]
            i_p = embedg_dlcl_find_with_NIL_twin_in_adjl(i_m_l, v);
                ^
MATLAB/software/nauty26r7/planarity.c:5148:17: note: i_p is assigned
            i_p = i_m_l = mult_edges[w];
                ^
MATLAB/software/nauty26r7/planarity.c:5150:17: note: i_p is overwritten
            i_p = embedg_dlcl_find_with_NIL_twin_in_adjl(i_m_l, v);
                ^
MATLAB/software/nauty26r7/planarity.c:225:24: style: The scope of the variable 'e' can be reduced. [variableScope]
    int          m, v, e, i;
                       ^
MATLAB/software/nauty26r7/planarity.c:630:25: style: The scope of the variable 'edge_exists' can be reduced. [variableScope]
    boolean             edge_exists;
                        ^
MATLAB/software/nauty26r7/planarity.c:714:25: style: The scope of the variable 'edge_exists' can be reduced. [variableScope]
    boolean             edge_exists;
                        ^
MATLAB/software/nauty26r7/planarity.c:1064:24: style: The scope of the variable 'prev_e' can be reduced. [variableScope]
    int         cur_e, prev_e;
                       ^
MATLAB/software/nauty26r7/planarity.c:1826:33: style: The scope of the variable 'next' can be reduced. [variableScope]
        int          prev, cur, next;
                                ^
MATLAB/software/nauty26r7/planarity.c:1883:33: style: The scope of the variable 'next' can be reduced. [variableScope]
        int          prev, cur, next;
                                ^
MATLAB/software/nauty26r7/planarity.c:2863:26: style: The scope of the variable 'z' can be reduced. [variableScope]
        int          vz, z, c;
                         ^
MATLAB/software/nauty26r7/planarity.c:2863:29: style: The scope of the variable 'c' can be reduced. [variableScope]
        int          vz, z, c;
                            ^
MATLAB/software/nauty26r7/planarity.c:4707:51: style: The scope of the variable 'next_e' can be reduced. [variableScope]
        int       v_l, orient, in, out, e, cur_e, next_e;
                                                  ^
MATLAB/software/nauty26r7/planarity.c:5605:18: style: The scope of the variable 'a' can be reduced. [variableScope]
        int      a, b, n_x;
                 ^
MATLAB/software/nauty26r7/planarity.c:5605:21: style: The scope of the variable 'b' can be reduced. [variableScope]
        int      a, b, n_x;
                    ^
MATLAB/software/nauty26r7/planarity.c:5605:24: style: The scope of the variable 'n_x' can be reduced. [variableScope]
        int      a, b, n_x;
                       ^
MATLAB/software/nauty26r7/planarity.c:7178:23: style: The scope of the variable 'parent_list' can be reduced. [variableScope]
        t_dlcl       *parent_list, *rep;
                      ^
MATLAB/software/nauty26r7/planarity.c:9260:25: style: The scope of the variable 'te' can be reduced. [variableScope]
    int          cur_v, te, twe;
                        ^
MATLAB/software/nauty26r7/planarity.c:9260:29: style: The scope of the variable 'twe' can be reduced. [variableScope]
    int          cur_v, te, twe;
                            ^
MATLAB/software/nauty26r7/planarity.c:8015:23: style: Local variable 'temp' shadows outer variable [shadowVariable]
            t_dlcl   *temp;
                      ^
MATLAB/software/nauty26r7/planarity.c:7497:22: note: Shadowed declaration
    t_dlcl         **temp, *lowpoint_list, **new_dfs_tree;
                     ^
MATLAB/software/nauty26r7/planarity.c:8015:23: note: Shadow variable
            t_dlcl   *temp;
                      ^
MATLAB/software/nauty26r7/planarity.c:632:17: style: Variable 'edge_exists' is assigned a value that is never used. [unreadVariable]
    edge_exists = FALSE;
                ^
MATLAB/software/nauty26r7/planarity.c:716:17: style: Variable 'edge_exists' is assigned a value that is never used. [unreadVariable]
    edge_exists = FALSE;
                ^
MATLAB/software/nauty26r7/planarity.c:1077:16: style: Variable 'prev_e' is assigned a value that is never used. [unreadVariable]
        prev_e = cur_e;
               ^
MATLAB/software/nauty26r7/planarity.c:5911:16: style: Unused variable: sttime [unusedVariable]
    float      sttime, time_to_now;
               ^
MATLAB/software/nauty26r7/planarity.c:5911:24: style: Unused variable: time_to_now [unusedVariable]
    float      sttime, time_to_now;
                       ^
MATLAB/software/nauty26r7/planarity.c:8636:17: style: Unused variable: v [unusedVariable]
    int         v, f;
                ^
MATLAB/software/nauty26r7/planarity.c:8719:22: style: Unused variable: ein [unusedVariable]
    int        vout, ein, eout, tout;
                     ^
MATLAB/software/nauty26r7/planarity.c:8719:27: style: Unused variable: eout [unusedVariable]
    int        vout, ein, eout, tout;
                          ^
MATLAB/software/nauty26r7/planarity.c:9501:32: style: Unused variable: vz [unusedVariable]
    int          vv, u_x, u_y, vz, u_z, u_max, u_min;
                               ^
MATLAB/software/nauty26r7/planarity.c:9637:9: style: Variable 'p_x' is assigned a value that is never used. [unreadVariable]
    p_x = path_v[0];
        ^
MATLAB/software/nauty26r7/planarity.c:9638:9: style: Variable 'p_y' is assigned a value that is never used. [unreadVariable]
    p_y = path_v[nbr_v];
        ^
MATLAB/software/nauty26r7/planarity.c:9634:18: style: Unused variable: i [unusedVariable]
    int          i, vv, p_x, p_y, u_x, u_y, u;
                 ^
MATLAB/software/nauty26r7/poptest.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/poptest.c:213:0: information: Skipping configuration 'POPC' since the value of 'POPC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          POPC==0 ? "loop" :
^
MATLAB/software/nauty26r7/poptest.c:214:0: information: Skipping configuration 'POPC' since the value of 'POPC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          POPC==1 ? "popcount" :
^
MATLAB/software/nauty26r7/poptest.c:215:0: information: Skipping configuration 'POPC' since the value of 'POPC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          POPC==2 ? "popcountl" :
^
MATLAB/software/nauty26r7/poptest.c:216:0: information: Skipping configuration 'POPC' since the value of 'POPC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          POPC==3 ? "popcountll" :
^
MATLAB/software/nauty26r7/poptest.c:217:0: information: Skipping configuration 'POPC' since the value of 'POPC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          POPC==4 ? "popcnt_u32" :
^
MATLAB/software/nauty26r7/poptest.c:218:0: information: Skipping configuration 'POPC' since the value of 'POPC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          POPC==5 ? "popcnt_u64" : "undefined");
^
MATLAB/software/nauty26r7/poptest.c:50:21: style: The scope of the variable 'rb' can be reduced. [variableScope]
 register setword w,rb;
                    ^
MATLAB/software/nauty26r7/poptest.c:71:15: style: Unused variable: c [unusedVariable]
 register int c,i,j,sum;
              ^
MATLAB/software/nauty26r7/poptest.c:71:19: style: Unused variable: j [unusedVariable]
 register int c,i,j,sum;
                  ^
MATLAB/software/nauty26r7/poptest.c:104:15: style: Unused variable: c [unusedVariable]
 register int c,i,j,sum;
              ^
MATLAB/software/nauty26r7/poptest.c:104:19: style: Unused variable: j [unusedVariable]
 register int c,i,j,sum;
                  ^
MATLAB/software/nauty26r7/poptest.c:137:19: style: Unused variable: j [unusedVariable]
 register int c,i,j,sum;
                  ^
MATLAB/software/nauty26r7/poptest.c:172:19: style: Unused variable: j [unusedVariable]
 register int c,i,j,sum;
                  ^
MATLAB/software/nauty26r7/ranlabg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/ranlabg.c:162:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME;
^
MATLAB/software/nauty26r7/ranlabg.c:183:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME - t;
^
MATLAB/software/nauty26r7/ranlabg.c:74:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/ranlabg.c:29:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int perm[MAXN];
^
MATLAB/software/nauty26r7/ranlabg.c:69:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    graph h[MAXN*MAXM];
^
MATLAB/software/nauty26r7/schreier.c:607:6: style: The if condition is the same as the previous if condition [duplicateCondition]
 if (lchanged) changed = TRUE;
     ^
MATLAB/software/nauty26r7/schreier.c:604:6: note: First condition
 if (lchanged)
     ^
MATLAB/software/nauty26r7/schreier.c:607:6: note: Second condition
 if (lchanged) changed = TRUE;
     ^
MATLAB/software/nauty26r7/schreier.c:262:27: style:inconclusive: Function 'findpermutation' argument 1 names different: declaration 'gens' definition 'pn'. [funcArgNamesDifferent]
findpermutation(permnode *pn, int *p, int n)
                          ^
MATLAB/software/nauty26r7/schreier.h:43:44: note: Function 'findpermutation' argument 1 names different: declaration 'gens' definition 'pn'.
extern permnode *findpermutation(permnode *gens, int *p, int n);
                                           ^
MATLAB/software/nauty26r7/schreier.c:262:27: note: Function 'findpermutation' argument 1 names different: declaration 'gens' definition 'pn'.
findpermutation(permnode *pn, int *p, int n)
                          ^
MATLAB/software/nauty26r7/schreier.c:326:40: style:inconclusive: Function 'addgenerator' argument 2 names different: declaration 'gens' definition 'ring'. [funcArgNamesDifferent]
addgenerator(schreier **gp, permnode **ring, int *p, int n)
                                       ^
MATLAB/software/nauty26r7/schreier.h:44:55: note: Function 'addgenerator' argument 2 names different: declaration 'gens' definition 'ring'.
extern boolean addgenerator(schreier **gp, permnode **gens, int *p, int n);
                                                      ^
MATLAB/software/nauty26r7/schreier.c:326:40: note: Function 'addgenerator' argument 2 names different: declaration 'gens' definition 'ring'.
addgenerator(schreier **gp, permnode **ring, int *p, int n)
                                       ^
MATLAB/software/nauty26r7/schreier.c:340:44: style:inconclusive: Function 'condaddgenerator' argument 2 names different: declaration 'gens' definition 'ring'. [funcArgNamesDifferent]
condaddgenerator(schreier **gp, permnode **ring, int *p, int n)
                                           ^
MATLAB/software/nauty26r7/schreier.h:46:45: note: Function 'condaddgenerator' argument 2 names different: declaration 'gens' definition 'ring'.
 condaddgenerator(schreier **gp, permnode **gens, int *p, int n);
                                            ^
MATLAB/software/nauty26r7/schreier.c:340:44: note: Function 'condaddgenerator' argument 2 names different: declaration 'gens' definition 'ring'.
condaddgenerator(schreier **gp, permnode **ring, int *p, int n)
                                           ^
MATLAB/software/nauty26r7/schreier.c:383:27: style:inconclusive: Function 'deleteunmarked' argument 1 names different: declaration 'gens' definition 'ring'. [funcArgNamesDifferent]
deleteunmarked(permnode **ring)
                          ^
MATLAB/software/nauty26r7/schreier.h:59:39: note: Function 'deleteunmarked' argument 1 names different: declaration 'gens' definition 'ring'.
extern void deleteunmarked(permnode **gens);
                                      ^
MATLAB/software/nauty26r7/schreier.c:383:27: note: Function 'deleteunmarked' argument 1 names different: declaration 'gens' definition 'ring'.
deleteunmarked(permnode **ring)
                          ^
MATLAB/software/nauty26r7/schreier.c:449:21: style:inconclusive: Function 'newgroup' argument 1 names different: declaration 'gp' definition 'sh'. [funcArgNamesDifferent]
newgroup(schreier **sh, permnode **ring, int n)
                    ^
MATLAB/software/nauty26r7/schreier.h:54:33: note: Function 'newgroup' argument 1 names different: declaration 'gp' definition 'sh'.
extern void newgroup(schreier **gp, permnode **gens, int n);
                                ^
MATLAB/software/nauty26r7/schreier.c:449:21: note: Function 'newgroup' argument 1 names different: declaration 'gp' definition 'sh'.
newgroup(schreier **sh, permnode **ring, int n)
                    ^
MATLAB/software/nauty26r7/schreier.c:449:36: style:inconclusive: Function 'newgroup' argument 2 names different: declaration 'gens' definition 'ring'. [funcArgNamesDifferent]
newgroup(schreier **sh, permnode **ring, int n)
                                   ^
MATLAB/software/nauty26r7/schreier.h:54:48: note: Function 'newgroup' argument 2 names different: declaration 'gens' definition 'ring'.
extern void newgroup(schreier **gp, permnode **gens, int n);
                                               ^
MATLAB/software/nauty26r7/schreier.c:449:36: note: Function 'newgroup' argument 2 names different: declaration 'gens' definition 'ring'.
newgroup(schreier **sh, permnode **ring, int n)
                                   ^
MATLAB/software/nauty26r7/schreier.c:660:41: style:inconclusive: Function 'expandschreier' argument 2 names different: declaration 'gens' definition 'ring'. [funcArgNamesDifferent]
expandschreier(schreier *gp, permnode **ring, int n)
                                        ^
MATLAB/software/nauty26r7/schreier.h:47:56: note: Function 'expandschreier' argument 2 names different: declaration 'gens' definition 'ring'.
extern boolean expandschreier(schreier *gp, permnode **gens, int n);
                                                       ^
MATLAB/software/nauty26r7/schreier.c:660:41: note: Function 'expandschreier' argument 2 names different: declaration 'gens' definition 'ring'.
expandschreier(schreier *gp, permnode **ring, int n)
                                        ^
MATLAB/software/nauty26r7/schreier.c:704:56: style:inconclusive: Function 'getorbits' argument 4 names different: declaration 'gens' definition 'ring'. [funcArgNamesDifferent]
getorbits(int *fix, int nfix, schreier *gp, permnode **ring, int n)
                                                       ^
MATLAB/software/nauty26r7/schreier.h:49:29: note: Function 'getorbits' argument 4 names different: declaration 'gens' definition 'ring'.
   schreier *gp, permnode **gens, int n);
                            ^
MATLAB/software/nauty26r7/schreier.c:704:56: note: Function 'getorbits' argument 4 names different: declaration 'gens' definition 'ring'.
getorbits(int *fix, int nfix, schreier *gp, permnode **ring, int n)
                                                       ^
MATLAB/software/nauty26r7/schreier.c:751:59: style:inconclusive: Function 'getorbitsmin' argument 4 names different: declaration 'gens' definition 'ring'. [funcArgNamesDifferent]
getorbitsmin(int *fix, int nfix, schreier *gp, permnode **ring,
                                                          ^
MATLAB/software/nauty26r7/schreier.h:50:70: note: Function 'getorbitsmin' argument 4 names different: declaration 'gens' definition 'ring'.
extern int getorbitsmin(int *fix, int nfix, schreier *gp, permnode **gens,
                                                                     ^
MATLAB/software/nauty26r7/schreier.c:751:59: note: Function 'getorbitsmin' argument 4 names different: declaration 'gens' definition 'ring'.
getorbitsmin(int *fix, int nfix, schreier *gp, permnode **ring,
                                                          ^
MATLAB/software/nauty26r7/schreier.c:878:48: style:inconclusive: Function 'pruneset' argument 3 names different: declaration 'gens' definition 'ring'. [funcArgNamesDifferent]
pruneset(set *fixset, schreier *gp, permnode **ring, set *x, int m, int n)
                                               ^
MATLAB/software/nauty26r7/schreier.h:52:60: note: Function 'pruneset' argument 3 names different: declaration 'gens' definition 'ring'.
extern void pruneset(set *fixset, schreier *gp, permnode **gens,
                                                           ^
MATLAB/software/nauty26r7/schreier.c:878:48: note: Function 'pruneset' argument 3 names different: declaration 'gens' definition 'ring'.
pruneset(set *fixset, schreier *gp, permnode **ring, set *x, int m, int n)
                                               ^
MATLAB/software/nauty26r7/schreier.c:936:25: style:inconclusive: Function 'schreier_gens' argument 1 names different: declaration 'gens' definition 'ring'. [funcArgNamesDifferent]
schreier_gens(permnode *ring)
                        ^
MATLAB/software/nauty26r7/schreier.h:58:36: note: Function 'schreier_gens' argument 1 names different: declaration 'gens' definition 'ring'.
extern int schreier_gens(permnode *gens);
                                   ^
MATLAB/software/nauty26r7/schreier.c:936:25: note: Function 'schreier_gens' argument 1 names different: declaration 'gens' definition 'ring'.
schreier_gens(permnode *ring)
                        ^
MATLAB/software/nauty26r7/schreier.c:951:47: style:inconclusive: Function 'dumpschreier' argument 3 names different: declaration 'gens' definition 'ring'. [funcArgNamesDifferent]
dumpschreier(FILE *f, schreier *gp, permnode *ring, int n)
                                              ^
MATLAB/software/nauty26r7/schreier.h:57:59: note: Function 'dumpschreier' argument 3 names different: declaration 'gens' definition 'ring'.
extern void dumpschreier(FILE *f, schreier *gp, permnode *gens, int n);
                                                          ^
MATLAB/software/nauty26r7/schreier.c:951:47: note: Function 'dumpschreier' argument 3 names different: declaration 'gens' definition 'ring'.
dumpschreier(FILE *f, schreier *gp, permnode *ring, int n)
                                              ^
MATLAB/software/nauty26r7/schreier.c:1031:57: style:inconclusive: Function 'grouporder' argument 4 names different: declaration 'gens' definition 'ring'. [funcArgNamesDifferent]
grouporder(int *fix, int nfix, schreier *gp, permnode **ring,
                                                        ^
MATLAB/software/nauty26r7/schreier.h:60:70: note: Function 'grouporder' argument 4 names different: declaration 'gens' definition 'ring'.
extern void grouporder(int *fix, int nfix,  schreier *gp, permnode **gens,
                                                                     ^
MATLAB/software/nauty26r7/schreier.c:1031:57: note: Function 'grouporder' argument 4 names different: declaration 'gens' definition 'ring'.
grouporder(int *fix, int nfix, schreier *gp, permnode **ring,
                                                        ^
MATLAB/software/nauty26r7/schreier.c:25:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int workperm[MAXN];
^
MATLAB/software/nauty26r7/schreier.c:26:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int workperm2[MAXN];
^
MATLAB/software/nauty26r7/schreier.c:27:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int workpermA[MAXN];
^
MATLAB/software/nauty26r7/schreier.c:28:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR int workpermB[MAXN];
^
MATLAB/software/nauty26r7/schreier.c:29:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR set workset[MAXM];
^
MATLAB/software/nauty26r7/schreier.c:30:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static TLS_ATTR set workset2[MAXM];
^
MATLAB/software/nauty26r7/schreier.c:1090:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        if (m > MAXM)
^
MATLAB/software/nauty26r7/schreier.c:1096:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        if (n > MAXN)
^
MATLAB/software/nauty26r7/shortg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/shortg.c:608:47: style: Condition 'kswitch' is always true [knownConditionTrueFalse]
                            writeline(outfile,kswitch ? dstr : cdstr);
                                              ^
MATLAB/software/nauty26r7/shortg.c:603:25: note: Assuming that condition 'kswitch' is not redundant
                    if (kswitch)
                        ^
MATLAB/software/nauty26r7/shortg.c:608:47: note: Condition 'kswitch' is always true
                            writeline(outfile,kswitch ? dstr : cdstr);
                                              ^
MATLAB/software/nauty26r7/shortg.c:632:47: style: Condition 'kswitch' is always true [knownConditionTrueFalse]
                            writeline(outfile,kswitch ? dstr : cdstr);
                                              ^
MATLAB/software/nauty26r7/shortg.c:627:25: note: Assuming that condition 'kswitch' is not redundant
                    if (kswitch)
                        ^
MATLAB/software/nauty26r7/shortg.c:632:47: note: Condition 'kswitch' is always true
                            writeline(outfile,kswitch ? dstr : cdstr);
                                              ^
MATLAB/software/nauty26r7/shortg.c:375:21: warning: Possible null pointer dereference: tempdir [nullPointer]
    if (Tswitch && *tempdir == '\0')
                    ^
MATLAB/software/nauty26r7/shortg.c:313:15: note: Assignment 'tempdir=NULL', assigned value is 0
    tempdir = NULL;
              ^
MATLAB/software/nauty26r7/shortg.c:375:21: note: Null pointer dereference
    if (Tswitch && *tempdir == '\0')
                    ^
MATLAB/software/nauty26r7/shortg.c:713:26: warning: Either the condition '(outfile=fopen(outfilename,"w"))==NULL' is redundant or there is possible null pointer dereference: outfile. [nullPointerRedundantCheck]
    if (!uswitch) fclose(outfile);
                         ^
MATLAB/software/nauty26r7/shortg.c:563:48: note: Assuming that condition '(outfile=fopen(outfilename,"w"))==NULL' is not redundant
        if ((outfile = fopen(outfilename,"w")) == NULL)
                                               ^
MATLAB/software/nauty26r7/shortg.c:713:26: note: Null pointer dereference
    if (!uswitch) fclose(outfile);
                         ^
MATLAB/software/nauty26r7/shortg.c:452:62: style: Variable 'outcode' is reassigned a value before the old one has been used. [redundantAssignment]
    if (sswitch || (!gswitch && (codetype&SPARSE6))) outcode = SPARSE6;
                                                             ^
MATLAB/software/nauty26r7/shortg.c:439:31: note: outcode is assigned
    if (gswitch)      outcode = GRAPH6;
                              ^
MATLAB/software/nauty26r7/shortg.c:452:62: note: outcode is overwritten
    if (sswitch || (!gswitch && (codetype&SPARSE6))) outcode = SPARSE6;
                                                             ^
MATLAB/software/nauty26r7/shortg.c:452:62: style: Variable 'outcode' is reassigned a value before the old one has been used. [redundantAssignment]
    if (sswitch || (!gswitch && (codetype&SPARSE6))) outcode = SPARSE6;
                                                             ^
MATLAB/software/nauty26r7/shortg.c:440:31: note: outcode is assigned
    else if (sswitch) outcode = SPARSE6;
                              ^
MATLAB/software/nauty26r7/shortg.c:452:62: note: outcode is overwritten
    if (sswitch || (!gswitch && (codetype&SPARSE6))) outcode = SPARSE6;
                                                             ^
MATLAB/software/nauty26r7/shortg.c:452:62: style: Variable 'outcode' is reassigned a value before the old one has been used. [redundantAssignment]
    if (sswitch || (!gswitch && (codetype&SPARSE6))) outcode = SPARSE6;
                                                             ^
MATLAB/software/nauty26r7/shortg.c:441:31: note: outcode is assigned
    else if (zswitch) outcode = DIGRAPH6;
                              ^
MATLAB/software/nauty26r7/shortg.c:452:62: note: outcode is overwritten
    if (sswitch || (!gswitch && (codetype&SPARSE6))) outcode = SPARSE6;
                                                             ^
MATLAB/software/nauty26r7/shortg.c:452:62: style: Variable 'outcode' is reassigned a value before the old one has been used. [redundantAssignment]
    if (sswitch || (!gswitch && (codetype&SPARSE6))) outcode = SPARSE6;
                                                             ^
MATLAB/software/nauty26r7/shortg.c:442:43: note: outcode is assigned
    else if ((codetype&GRAPH6))   outcode = GRAPH6;
                                          ^
MATLAB/software/nauty26r7/shortg.c:452:62: note: outcode is overwritten
    if (sswitch || (!gswitch && (codetype&SPARSE6))) outcode = SPARSE6;
                                                             ^
MATLAB/software/nauty26r7/shortg.c:452:62: style: Variable 'outcode' is reassigned a value before the old one has been used. [redundantAssignment]
    if (sswitch || (!gswitch && (codetype&SPARSE6))) outcode = SPARSE6;
                                                             ^
MATLAB/software/nauty26r7/shortg.c:443:43: note: outcode is assigned
    else if ((codetype&SPARSE6))  outcode = SPARSE6;
                                          ^
MATLAB/software/nauty26r7/shortg.c:452:62: note: outcode is overwritten
    if (sswitch || (!gswitch && (codetype&SPARSE6))) outcode = SPARSE6;
                                                             ^
MATLAB/software/nauty26r7/shortg.c:452:62: style: Variable 'outcode' is reassigned a value before the old one has been used. [redundantAssignment]
    if (sswitch || (!gswitch && (codetype&SPARSE6))) outcode = SPARSE6;
                                                             ^
MATLAB/software/nauty26r7/shortg.c:444:43: note: outcode is assigned
    else if ((codetype&DIGRAPH6)) outcode = DIGRAPH6;
                                          ^
MATLAB/software/nauty26r7/shortg.c:452:62: note: outcode is overwritten
    if (sswitch || (!gswitch && (codetype&SPARSE6))) outcode = SPARSE6;
                                                             ^
MATLAB/software/nauty26r7/shortg.c:452:62: style: Variable 'outcode' is reassigned a value before the old one has been used. [redundantAssignment]
    if (sswitch || (!gswitch && (codetype&SPARSE6))) outcode = SPARSE6;
                                                             ^
MATLAB/software/nauty26r7/shortg.c:447:17: note: outcode is assigned
        outcode = GRAPH6;
                ^
MATLAB/software/nauty26r7/shortg.c:452:62: note: outcode is overwritten
    if (sswitch || (!gswitch && (codetype&SPARSE6))) outcode = SPARSE6;
                                                             ^
MATLAB/software/nauty26r7/shortg.c:305:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/shortg.c:296:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    graph h[MAXN*MAXM];
^
MATLAB/software/nauty26r7/shortg.c:297:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    int lab[MAXN],ptn[MAXN],orbits[MAXN];
^
MATLAB/software/nauty26r7/shortg.c:479:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     if (n > MAXN) gt_abort(">E shortg: graph larger than MAXN read\n");
^
MATLAB/software/nauty26r7/shortg.c:511:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     if (n > MAXN) gt_abort(">E shortg: graph larger than MAXN read\n");
^
MATLAB/software/nauty26r7/showg.c:498:26: error: Common realloc mistake: 's' nulled but not freed upon failure [memleakOnRealloc]
        if (i == s_sz-2) DYNREALLOC(char,s,s_sz,s_sz+1000,"showg_getline");
                         ^
MATLAB/software/nauty26r7/showg.c:228:9: style: The scope of the variable 'digit' can be reduced. [variableScope]
    int digit,j,k;
        ^
MATLAB/software/nauty26r7/showg.c:229:10: style: The scope of the variable 'c' can be reduced. [variableScope]
    char c;
         ^
MATLAB/software/nauty26r7/showg.c:338:10: style: The scope of the variable 'i' can be reduced. [variableScope]
    long i,l,pos,pos1,pos2;
         ^
MATLAB/software/nauty26r7/showg.c:338:12: style: The scope of the variable 'l' can be reduced. [variableScope]
    long i,l,pos,pos1,pos2;
           ^
MATLAB/software/nauty26r7/showg.c:338:14: style: The scope of the variable 'pos' can be reduced. [variableScope]
    long i,l,pos,pos1,pos2;
             ^
MATLAB/software/nauty26r7/showg.c:338:18: style: The scope of the variable 'pos1' can be reduced. [variableScope]
    long i,l,pos,pos1,pos2;
                 ^
MATLAB/software/nauty26r7/showg.c:338:23: style: The scope of the variable 'pos2' can be reduced. [variableScope]
    long i,l,pos,pos1,pos2;
                      ^
MATLAB/software/nauty26r7/showg.c:339:13: style: The scope of the variable 'bad_header' can be reduced. [variableScope]
    boolean bad_header;
            ^
MATLAB/software/nauty26r7/showg.c:541:14: style: The scope of the variable 'gj' can be reduced. [variableScope]
    set *gi,*gj;
             ^
MATLAB/software/nauty26r7/showg.c:744:16: style: The scope of the variable 'last' can be reduced. [variableScope]
    long sofar,last;
               ^
MATLAB/software/nauty26r7/showg.c:885:9: style: The scope of the variable 'slen' can be reduced. [variableScope]
    int slen,j1,j2;
        ^
MATLAB/software/nauty26r7/showg.c:885:17: style: The scope of the variable 'j2' can be reduced. [variableScope]
    int slen,j1,j2;
                ^
MATLAB/software/nauty26r7/showg.c:1005:18: style: The scope of the variable 'j0' can be reduced. [variableScope]
    int i,curlen,j0;
                 ^
MATLAB/software/nauty26r7/showg.c:1047:13: style: The scope of the variable 'first' can be reduced. [variableScope]
    boolean first;
            ^
MATLAB/software/nauty26r7/showg.c:1069:12: style: The scope of the variable 'g' can be reduced. [variableScope]
    graph *g;
           ^
MATLAB/software/nauty26r7/showg.c:1096:23: style: Variable 'lswitch' is assigned a value that is never used. [unreadVariable]
    aswitch = lswitch = oswitch = Fswitch = FALSE;
                      ^
MATLAB/software/nauty26r7/showg.c:1096:33: style: Variable 'oswitch' is assigned a value that is never used. [unreadVariable]
    aswitch = lswitch = oswitch = Fswitch = FALSE;
                                ^
MATLAB/software/nauty26r7/showg.c:1123:22: style: Variable 'lswitch' is assigned a value that is never used. [unreadVariable]
                else SWINT('l',lswitch,linelength,"showg -l")
                     ^
MATLAB/software/nauty26r7/showg.c:1124:22: style: Variable 'oswitch' is assigned a value that is never used. [unreadVariable]
                else SWINT('o',oswitch,labelorg,"listo -o")
                     ^
MATLAB/software/nauty26r7/showg.c:1156:33: style: Variable 'infilename' is assigned a value that is never used. [unreadVariable]
    if (!infilename) infilename = "stdin";
                                ^
MATLAB/software/nauty26r7/showg.c:1160:21: style: Variable 'outfilename' is assigned a value that is never used. [unreadVariable]
        outfilename = "stdout";
                    ^
MATLAB/software/nauty26r7/splay.c:386:15: style: Variable '*to_root' is reassigned a value before the old one has been used. [redundantAssignment]
     *to_root = q;
              ^
MATLAB/software/nauty26r7/splay.c:349:14: note: *to_root is assigned
    *to_root = p;
             ^
MATLAB/software/nauty26r7/splay.c:386:15: note: *to_root is overwritten
     *to_root = q;
              ^
MATLAB/software/nauty26r7/splay.c:249:9: style: Unused variable: i [unusedVariable]
    int i,cmp;
        ^
MATLAB/software/nauty26r7/splay.c:318:9: style: Variable 'cmp' is assigned a value that is never used. [unreadVariable]
    cmp = 0;
        ^
MATLAB/software/nauty26r7/splay.c:314:9: style: Unused variable: i [unusedVariable]
    int i,cmp;   /* i is available for COMPARE */
        ^
MATLAB/software/nauty26r7/splay.c:398:0: information: Skipping configuration 'SPLAY_DUMP' since the value of 'SPLAY_DUMP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
SPLAY_DUMP(SPLAYNODE *p DUMP_ARGS)
^
MATLAB/software/nauty26r7/splay.c:409:0: information: Skipping configuration 'SPLAY_DUMP' since the value of 'SPLAY_DUMP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    SPLAY_DUMP(p->right  DUMP_RIGHT);
^
MATLAB/software/nauty26r7/splay.c:411:0: information: Skipping configuration 'SPLAY_DUMP' since the value of 'SPLAY_DUMP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    SPLAY_DUMP(p->left  DUMP_LEFT);
^
MATLAB/software/nauty26r7/subdivideg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/subdivideg.c:43:53: warning: Either the condition 'gnde>0' is redundant or there is division by zero at line 43. [zerodivcond]
    if (hnv <= 0 || (gnde > 0 && ((size_t)(hnv-gnv))/(gnde/2) != k))
                                                    ^
MATLAB/software/nauty26r7/subdivideg.c:43:27: note: Assuming that condition 'gnde>0' is not redundant
    if (hnv <= 0 || (gnde > 0 && ((size_t)(hnv-gnv))/(gnde/2) != k))
                          ^
MATLAB/software/nauty26r7/subdivideg.c:43:53: note: Division by zero
    if (hnv <= 0 || (gnde > 0 && ((size_t)(hnv-gnv))/(gnde/2) != k))
                                                    ^
MATLAB/software/nauty26r7/subdivideg.c:207:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME;
^
MATLAB/software/nauty26r7/subdivideg.c:216:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME - t;
^
MATLAB/software/nauty26r7/subdivideg.c:131:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/sumlines.c:1509:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (readfiles) read_env_formats(&numformats);
        ^
MATLAB/software/nauty26r7/sumlines.c:1508:9: note: First condition
    if (readfiles) read_local_formats(&numformats);
        ^
MATLAB/software/nauty26r7/sumlines.c:1509:9: note: Second condition
    if (readfiles) read_env_formats(&numformats);
        ^
MATLAB/software/nauty26r7/sumlines.c:1510:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (readfiles) read_global_formats(&numformats);
        ^
MATLAB/software/nauty26r7/sumlines.c:1509:9: note: First condition
    if (readfiles) read_env_formats(&numformats);
        ^
MATLAB/software/nauty26r7/sumlines.c:1510:9: note: Second condition
    if (readfiles) read_global_formats(&numformats);
        ^
MATLAB/software/nauty26r7/sumlines.c:1108:11: style: Condition 'x<=0' is always false [knownConditionTrueFalse]
    if (x <= 0)
          ^
MATLAB/software/nauty26r7/sumlines.c:1104:22: note: Assignment 'x=((long long)1)<<(8*sizeof(long long)-2)', assigned value is 4611686018427387904
    x = ((integer)1) << (8*sizeof(integer) - 2);
                     ^
MATLAB/software/nauty26r7/sumlines.c:1106:5: note: Compound assignment '+=', assigned value is 9223372036854775807
    x += y;
    ^
MATLAB/software/nauty26r7/sumlines.c:1108:11: note: Condition 'x<=0' is always false
    if (x <= 0)
          ^
MATLAB/software/nauty26r7/sumlines.c:1631:17: warning: %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
                printf("WARNING: %ld NULs found in file %s\n",
                ^
MATLAB/software/nauty26r7/sumlines.c:904:30: error: Common realloc mistake: 'ilist' nulled but not freed upon failure [memleakOnRealloc]
                        if ((ilist
                             ^
MATLAB/software/nauty26r7/sumlines.c:1167:11: style: The scope of the variable 'c' can be reduced. [variableScope]
    int i,c,flags,ignore;
          ^
MATLAB/software/nauty26r7/sumlines.c:1167:19: style: The scope of the variable 'ignore' can be reduced. [variableScope]
    int i,c,flags,ignore;
                  ^
MATLAB/software/nauty26r7/sumlines.c:1354:11: style: The scope of the variable 'c' can be reduced. [variableScope]
    int i,c;
          ^
MATLAB/software/nauty26r7/testg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/testg.c:405:15: style: The scope of the variable 'ki' can be reduced. [variableScope]
        int i,ki;
              ^
MATLAB/software/nauty26r7/testg.c:444:8: style: The scope of the variable 'ki' can be reduced. [variableScope]
 int i,ki;
       ^
MATLAB/software/nauty26r7/testg.c:1025:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 t = CPUTIME;
^
MATLAB/software/nauty26r7/testg.c:1075:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 t = CPUTIME - t;
^
MATLAB/software/nauty26r7/testg.c:868:13: style: Condition '!docount' is always false [knownConditionTrueFalse]
        if (!docount && !dofilter)
            ^
MATLAB/software/nauty26r7/testg.c:855:19: note: Assignment 'docount=1', assigned value is 1
        docount = TRUE;
                  ^
MATLAB/software/nauty26r7/testg.c:868:13: note: Condition '!docount' is always false
        if (!docount && !dofilter)
            ^
MATLAB/software/nauty26r7/testg.c:868:13: style: Condition '!docount' is always false [knownConditionTrueFalse]
        if (!docount && !dofilter)
            ^
MATLAB/software/nauty26r7/testg.c:853:28: note: Assignment 'docount=dofilter=1', assigned value is 1
        docount = dofilter = TRUE;
                           ^
MATLAB/software/nauty26r7/testg.c:868:13: note: Condition '!docount' is always false
        if (!docount && !dofilter)
            ^
MATLAB/software/nauty26r7/testg.c:868:13: style: Condition '!docount' is always true [knownConditionTrueFalse]
        if (!docount && !dofilter)
            ^
MATLAB/software/nauty26r7/testg.c:860:19: note: Assignment 'docount=0', assigned value is 0
        docount = FALSE;
                  ^
MATLAB/software/nauty26r7/testg.c:868:13: note: Condition '!docount' is always true
        if (!docount && !dofilter)
            ^
MATLAB/software/nauty26r7/testg.c:868:25: style: Condition '!dofilter' is always false [knownConditionTrueFalse]
        if (!docount && !dofilter)
                        ^
MATLAB/software/nauty26r7/testg.c:861:20: note: Assignment 'dofilter=1', assigned value is 1
        dofilter = TRUE;
                   ^
MATLAB/software/nauty26r7/testg.c:868:25: note: Condition '!dofilter' is always false
        if (!docount && !dofilter)
                        ^
MATLAB/software/nauty26r7/testg.c:834:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/testg.c:114:0: information: Skipping configuration 'LUSERDEF' since the value of 'LUSERDEF' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
long LUSERDEF(graph*,int,int);
^
MATLAB/software/nauty26r7/testg.c:700:0: information: Skipping configuration 'LUSERDEF' since the value of 'LUSERDEF' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  VAL(I_Q) = LUSERDEF(g,m,n);
^
MATLAB/software/nauty26r7/traces.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/traces.c:1453:49: style: Array index 'TraceCCInd' is used before limits check. [arrayIndexThenCheck]
                TraceCell = ((ind0 == TheTraceCC[TraceCCInd]) && (TraceCCInd < Traceccend));
                                                ^
MATLAB/software/nauty26r7/traces.c:3967:45: style: Array index 'TraceCCInd' is used before limits check. [arrayIndexThenCheck]
            TraceCell = ((ind0 == TheTraceCC[TraceCCInd]) && (TraceCCInd < Traceccend));
                                            ^
MATLAB/software/nauty26r7/traces.c:5539:79: style: Array index 'k' is used before limits check. [arrayIndexThenCheck]
                                        while ((CellMarkers2[CheckAutList->lab[k]] == tv->markcell2) && (k < i+Part->cls[i])) {
                                                                              ^
MATLAB/software/nauty26r7/traces.c:9558:27: style: Array index 'L' is used before limits check. [arrayIndexThenCheck]
                while (arr[L]<= piv && L<R) L++;
                          ^
MATLAB/software/nauty26r7/traces.c:5315:29: style: Variable 'Cand->code' is reassigned a value before the old one has been used. [redundantAssignment]
    Part->code = Cand->code = CLEANUP(longcode);
                            ^
MATLAB/software/nauty26r7/traces.c:5303:16: note: Cand->code is assigned
    Cand->code = CLEANUP(longcode);
               ^
MATLAB/software/nauty26r7/traces.c:5315:29: note: Cand->code is overwritten
    Part->code = Cand->code = CLEANUP(longcode);
                            ^
MATLAB/software/nauty26r7/traces.c:7078:20: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
            for (k = tv->indivstart; k < tv->indivend; k++) {
                   ^
MATLAB/software/nauty26r7/traces.c:7041:15: note: k is assigned
            k = n;
              ^
MATLAB/software/nauty26r7/traces.c:7078:20: note: k is overwritten
            for (k = tv->indivstart; k < tv->indivend; k++) {
                   ^
MATLAB/software/nauty26r7/traces.c:1377:37: style: The scope of the variable 'weightend' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                    ^
MATLAB/software/nauty26r7/traces.c:1377:48: style: The scope of the variable 'currentcell' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                               ^
MATLAB/software/nauty26r7/traces.c:1377:61: style: The scope of the variable 'currentsize' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                                            ^
MATLAB/software/nauty26r7/traces.c:2133:15: style: The scope of the variable 'k' can be reduced. [variableScope]
    int i, j, k, jk, sc, ind0, ind1, ind2, ind3, labi, auxcells;
              ^
MATLAB/software/nauty26r7/traces.c:2133:50: style: The scope of the variable 'labi' can be reduced. [variableScope]
    int i, j, k, jk, sc, ind0, ind1, ind2, ind3, labi, auxcells;
                                                 ^
MATLAB/software/nauty26r7/traces.c:2136:9: style: The scope of the variable 'iend1int' can be reduced. [variableScope]
    int iend1int, j1int;
        ^
MATLAB/software/nauty26r7/traces.c:2144:37: style: The scope of the variable 'weightend' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                    ^
MATLAB/software/nauty26r7/traces.c:2144:48: style: The scope of the variable 'currentcell' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                               ^
MATLAB/software/nauty26r7/traces.c:2144:61: style: The scope of the variable 'currentsize' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                                            ^
MATLAB/software/nauty26r7/traces.c:2728:15: style: The scope of the variable 'k' can be reduced. [variableScope]
    int i, j, k, jk, sc, ind0, ind1, ind2, ind3, labi;
              ^
MATLAB/software/nauty26r7/traces.c:2728:50: style: The scope of the variable 'labi' can be reduced. [variableScope]
    int i, j, k, jk, sc, ind0, ind1, ind2, ind3, labi;
                                                 ^
MATLAB/software/nauty26r7/traces.c:2731:16: style: The scope of the variable 'iend1int' can be reduced. [variableScope]
    int j1int, iend1int;
               ^
MATLAB/software/nauty26r7/traces.c:2739:37: style: The scope of the variable 'weightend' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                    ^
MATLAB/software/nauty26r7/traces.c:2739:48: style: The scope of the variable 'currentcell' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                               ^
MATLAB/software/nauty26r7/traces.c:2739:61: style: The scope of the variable 'currentsize' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                                            ^
MATLAB/software/nauty26r7/traces.c:3304:15: style: The scope of the variable 'k' can be reduced. [variableScope]
    int i, j, k, jk, sc, ind0, ind1, ind2, ind3, labi;
              ^
MATLAB/software/nauty26r7/traces.c:3304:50: style: The scope of the variable 'labi' can be reduced. [variableScope]
    int i, j, k, jk, sc, ind0, ind1, ind2, ind3, labi;
                                                 ^
MATLAB/software/nauty26r7/traces.c:3307:16: style: The scope of the variable 'iend1int' can be reduced. [variableScope]
    int j1int, iend1int;
               ^
MATLAB/software/nauty26r7/traces.c:3315:37: style: The scope of the variable 'weightend' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                    ^
MATLAB/software/nauty26r7/traces.c:3315:48: style: The scope of the variable 'currentcell' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                               ^
MATLAB/software/nauty26r7/traces.c:3315:61: style: The scope of the variable 'currentsize' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                                            ^
MATLAB/software/nauty26r7/traces.c:3897:37: style: The scope of the variable 'weightend' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                    ^
MATLAB/software/nauty26r7/traces.c:3897:48: style: The scope of the variable 'currentcell' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                               ^
MATLAB/software/nauty26r7/traces.c:3897:61: style: The scope of the variable 'currentsize' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                                            ^
MATLAB/software/nauty26r7/traces.c:4738:37: style: The scope of the variable 'weightend' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                    ^
MATLAB/software/nauty26r7/traces.c:4738:48: style: The scope of the variable 'currentcell' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                               ^
MATLAB/software/nauty26r7/traces.c:4738:61: style: The scope of the variable 'currentsize' can be reduced. [variableScope]
    int currentweight, weightstart, weightend, currentcell, currentsize;
                                                            ^
MATLAB/software/nauty26r7/traces.c:7545:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i, iend, min, tmp;
        ^
MATLAB/software/nauty26r7/traces.c:7545:12: style: The scope of the variable 'iend' can be reduced. [variableScope]
    int i, iend, min, tmp;
           ^
MATLAB/software/nauty26r7/traces.c:7545:18: style: The scope of the variable 'min' can be reduced. [variableScope]
    int i, iend, min, tmp;
                 ^
MATLAB/software/nauty26r7/traces.c:7704:15: style: The scope of the variable 'k' can be reduced. [variableScope]
    int i, j, k, go, nfix;
              ^
MATLAB/software/nauty26r7/traces.c:7724:12: style: The scope of the variable 'k' can be reduced. [variableScope]
    int i, k, nfix;
           ^
MATLAB/software/nauty26r7/traces.c:7738:16: style: The scope of the variable 'Temp' can be reduced. [variableScope]
    Candidate *Temp;
               ^
MATLAB/software/nauty26r7/traces.c:7794:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i, i1, j, j0, j2, k, k1, k2, w, w1, w2, c, c1, c2, n1, n2;
        ^
MATLAB/software/nauty26r7/traces.c:7794:16: style: The scope of the variable 'j' can be reduced. [variableScope]
    int i, i1, j, j0, j2, k, k1, k2, w, w1, w2, c, c1, c2, n1, n2;
               ^
MATLAB/software/nauty26r7/traces.c:7794:19: style: The scope of the variable 'j0' can be reduced. [variableScope]
    int i, i1, j, j0, j2, k, k1, k2, w, w1, w2, c, c1, c2, n1, n2;
                  ^
MATLAB/software/nauty26r7/traces.c:7794:23: style: The scope of the variable 'j2' can be reduced. [variableScope]
    int i, i1, j, j0, j2, k, k1, k2, w, w1, w2, c, c1, c2, n1, n2;
                      ^
MATLAB/software/nauty26r7/traces.c:7794:27: style: The scope of the variable 'k' can be reduced. [variableScope]
    int i, i1, j, j0, j2, k, k1, k2, w, w1, w2, c, c1, c2, n1, n2;
                          ^
MATLAB/software/nauty26r7/traces.c:7794:30: style: The scope of the variable 'k1' can be reduced. [variableScope]
    int i, i1, j, j0, j2, k, k1, k2, w, w1, w2, c, c1, c2, n1, n2;
                             ^
MATLAB/software/nauty26r7/traces.c:7794:34: style: The scope of the variable 'k2' can be reduced. [variableScope]
    int i, i1, j, j0, j2, k, k1, k2, w, w1, w2, c, c1, c2, n1, n2;
                                 ^
MATLAB/software/nauty26r7/traces.c:7794:38: style: The scope of the variable 'w' can be reduced. [variableScope]
    int i, i1, j, j0, j2, k, k1, k2, w, w1, w2, c, c1, c2, n1, n2;
                                     ^
MATLAB/software/nauty26r7/traces.c:7794:41: style: The scope of the variable 'w1' can be reduced. [variableScope]
    int i, i1, j, j0, j2, k, k1, k2, w, w1, w2, c, c1, c2, n1, n2;
                                        ^
MATLAB/software/nauty26r7/traces.c:7794:45: style: The scope of the variable 'w2' can be reduced. [variableScope]
    int i, i1, j, j0, j2, k, k1, k2, w, w1, w2, c, c1, c2, n1, n2;
                                            ^
MATLAB/software/nauty26r7/traces.c:7794:49: style: The scope of the variable 'c' can be reduced. [variableScope]
    int i, i1, j, j0, j2, k, k1, k2, w, w1, w2, c, c1, c2, n1, n2;
                                                ^
MATLAB/software/nauty26r7/traces.c:7794:56: style: The scope of the variable 'c2' can be reduced. [variableScope]
    int i, i1, j, j0, j2, k, k1, k2, w, w1, w2, c, c1, c2, n1, n2;
                                                       ^
MATLAB/software/nauty26r7/traces.c:7794:60: style: The scope of the variable 'n1' can be reduced. [variableScope]
    int i, i1, j, j0, j2, k, k1, k2, w, w1, w2, c, c1, c2, n1, n2;
                                                           ^
MATLAB/software/nauty26r7/traces.c:7794:64: style: The scope of the variable 'n2' can be reduced. [variableScope]
    int i, i1, j, j0, j2, k, k1, k2, w, w1, w2, c, c1, c2, n1, n2;
                                                               ^
MATLAB/software/nauty26r7/traces.c:7795:9: style: The scope of the variable 'prev' can be reduced. [variableScope]
    int prev, step, start, counts, StInd, CyInd, cycnum;
        ^
MATLAB/software/nauty26r7/traces.c:7795:15: style: The scope of the variable 'step' can be reduced. [variableScope]
    int prev, step, start, counts, StInd, CyInd, cycnum;
              ^
MATLAB/software/nauty26r7/traces.c:7795:21: style: The scope of the variable 'start' can be reduced. [variableScope]
    int prev, step, start, counts, StInd, CyInd, cycnum;
                    ^
MATLAB/software/nauty26r7/traces.c:7795:28: style: The scope of the variable 'counts' can be reduced. [variableScope]
    int prev, step, start, counts, StInd, CyInd, cycnum;
                           ^
MATLAB/software/nauty26r7/traces.c:7795:36: style: The scope of the variable 'StInd' can be reduced. [variableScope]
    int prev, step, start, counts, StInd, CyInd, cycnum;
                                   ^
MATLAB/software/nauty26r7/traces.c:7795:43: style: The scope of the variable 'CyInd' can be reduced. [variableScope]
    int prev, step, start, counts, StInd, CyInd, cycnum;
                                          ^
MATLAB/software/nauty26r7/traces.c:7795:50: style: The scope of the variable 'cycnum' can be reduced. [variableScope]
    int prev, step, start, counts, StInd, CyInd, cycnum;
                                                 ^
MATLAB/software/nauty26r7/traces.c:7796:20: style: The scope of the variable 'halfsize' can be reduced. [variableScope]
    int tmp, temp, halfsize, nghcell, numvertices;
                   ^
MATLAB/software/nauty26r7/traces.c:7796:30: style: The scope of the variable 'nghcell' can be reduced. [variableScope]
    int tmp, temp, halfsize, nghcell, numvertices;
                             ^
MATLAB/software/nauty26r7/traces.c:7797:9: style: The scope of the variable 'arg' can be reduced. [variableScope]
    int arg, val;
        ^
MATLAB/software/nauty26r7/traces.c:7797:14: style: The scope of the variable 'val' can be reduced. [variableScope]
    int arg, val;
             ^
MATLAB/software/nauty26r7/traces.c:7800:9: style: The scope of the variable 'NSFCInd' can be reduced. [variableScope]
    int NSFCInd, ind;
        ^
MATLAB/software/nauty26r7/traces.c:7800:18: style: The scope of the variable 'ind' can be reduced. [variableScope]
    int NSFCInd, ind;
                 ^
MATLAB/software/nauty26r7/traces.c:7801:13: style: The scope of the variable 'do_ngh' can be reduced. [variableScope]
    boolean do_ngh = FALSE;
            ^
MATLAB/software/nauty26r7/traces.c:8557:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i, k, pi, di;
        ^
MATLAB/software/nauty26r7/traces.c:8557:15: style: The scope of the variable 'pi' can be reduced. [variableScope]
    int i, k, pi, di;
              ^
MATLAB/software/nauty26r7/traces.c:8557:19: style: The scope of the variable 'di' can be reduced. [variableScope]
    int i, k, pi, di;
                  ^
MATLAB/software/nauty26r7/traces.c:8558:12: style: The scope of the variable 'vi' can be reduced. [variableScope]
    size_t vi, vpi, j;
           ^
MATLAB/software/nauty26r7/traces.c:8558:16: style: The scope of the variable 'vpi' can be reduced. [variableScope]
    size_t vi, vpi, j;
               ^
MATLAB/software/nauty26r7/traces.c:8595:14: style: The scope of the variable 'vtx' can be reduced. [variableScope]
    int ind, vtx, ngh, trind, deg0, deg1;
             ^
MATLAB/software/nauty26r7/traces.c:8595:31: style: The scope of the variable 'deg0' can be reduced. [variableScope]
    int ind, vtx, ngh, trind, deg0, deg1;
                              ^
MATLAB/software/nauty26r7/traces.c:8595:37: style: The scope of the variable 'deg1' can be reduced. [variableScope]
    int ind, vtx, ngh, trind, deg0, deg1;
                                    ^
MATLAB/software/nauty26r7/traces.c:8643:14: style: The scope of the variable 'vtx1' can be reduced. [variableScope]
    int ind, vtx1, vtx2, ngh1, ngh2, trind, deg0, deg1;
             ^
MATLAB/software/nauty26r7/traces.c:8643:20: style: The scope of the variable 'vtx2' can be reduced. [variableScope]
    int ind, vtx1, vtx2, ngh1, ngh2, trind, deg0, deg1;
                   ^
MATLAB/software/nauty26r7/traces.c:8643:45: style: The scope of the variable 'deg0' can be reduced. [variableScope]
    int ind, vtx1, vtx2, ngh1, ngh2, trind, deg0, deg1;
                                            ^
MATLAB/software/nauty26r7/traces.c:8643:51: style: The scope of the variable 'deg1' can be reduced. [variableScope]
    int ind, vtx1, vtx2, ngh1, ngh2, trind, deg0, deg1;
                                                  ^
MATLAB/software/nauty26r7/traces.c:8749:9: style: The scope of the variable 'vtx' can be reduced. [variableScope]
    int vtx, sing;
        ^
MATLAB/software/nauty26r7/traces.c:8750:15: style: The scope of the variable 'deg' can be reduced. [variableScope]
    int i, j, deg, retdeg, n, singcount;
              ^
MATLAB/software/nauty26r7/traces.c:8810:17: style: The scope of the variable 'k1' can be reduced. [variableScope]
    int j1, j2, k1, k2;
                ^
MATLAB/software/nauty26r7/traces.c:8810:21: style: The scope of the variable 'k2' can be reduced. [variableScope]
    int j1, j2, k1, k2;
                    ^
MATLAB/software/nauty26r7/traces.c:8960:12: style: The scope of the variable 'j' can be reduced. [variableScope]
    int i, j, j0, k, curr_cell, ind, ind0, ind1, ind2;
           ^
MATLAB/software/nauty26r7/traces.c:8960:15: style: The scope of the variable 'j0' can be reduced. [variableScope]
    int i, j, j0, k, curr_cell, ind, ind0, ind1, ind2;
              ^
MATLAB/software/nauty26r7/traces.c:8960:19: style: The scope of the variable 'k' can be reduced. [variableScope]
    int i, j, j0, k, curr_cell, ind, ind0, ind1, ind2;
                  ^
MATLAB/software/nauty26r7/traces.c:8960:22: style: The scope of the variable 'curr_cell' can be reduced. [variableScope]
    int i, j, j0, k, curr_cell, ind, ind0, ind1, ind2;
                     ^
MATLAB/software/nauty26r7/traces.c:8960:33: style: The scope of the variable 'ind' can be reduced. [variableScope]
    int i, j, j0, k, curr_cell, ind, ind0, ind1, ind2;
                                ^
MATLAB/software/nauty26r7/traces.c:8960:38: style: The scope of the variable 'ind0' can be reduced. [variableScope]
    int i, j, j0, k, curr_cell, ind, ind0, ind1, ind2;
                                     ^
MATLAB/software/nauty26r7/traces.c:8960:44: style: The scope of the variable 'ind1' can be reduced. [variableScope]
    int i, j, j0, k, curr_cell, ind, ind0, ind1, ind2;
                                           ^
MATLAB/software/nauty26r7/traces.c:8960:50: style: The scope of the variable 'ind2' can be reduced. [variableScope]
    int i, j, j0, k, curr_cell, ind, ind0, ind1, ind2;
                                                 ^
MATLAB/software/nauty26r7/traces.c:8962:9: style: The scope of the variable 'HitClsInd' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
        ^
MATLAB/software/nauty26r7/traces.c:8962:20: style: The scope of the variable 'labi' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                   ^
MATLAB/software/nauty26r7/traces.c:8962:26: style: The scope of the variable 'nghb' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                         ^
MATLAB/software/nauty26r7/traces.c:8962:32: style: The scope of the variable 'value' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                               ^
MATLAB/software/nauty26r7/traces.c:8962:39: style: The scope of the variable 'SplInd' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                                      ^
MATLAB/software/nauty26r7/traces.c:8962:47: style: The scope of the variable 'SplCntInd' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                                              ^
MATLAB/software/nauty26r7/traces.c:8962:58: style: The scope of the variable 'sc' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                                                         ^
MATLAB/software/nauty26r7/traces.c:8962:62: style: The scope of the variable 'iend' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                                                             ^
MATLAB/software/nauty26r7/traces.c:8962:79: style: The scope of the variable 'SingInd' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                                                                              ^
MATLAB/software/nauty26r7/traces.c:8962:88: style: The scope of the variable 'newcell' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                                                                                       ^
MATLAB/software/nauty26r7/traces.c:9196:12: style: The scope of the variable 'j' can be reduced. [variableScope]
    int i, j, j0, k, curr_cell, ind, ind0, ind1, ind2;
           ^
MATLAB/software/nauty26r7/traces.c:9196:15: style: The scope of the variable 'j0' can be reduced. [variableScope]
    int i, j, j0, k, curr_cell, ind, ind0, ind1, ind2;
              ^
MATLAB/software/nauty26r7/traces.c:9196:19: style: The scope of the variable 'k' can be reduced. [variableScope]
    int i, j, j0, k, curr_cell, ind, ind0, ind1, ind2;
                  ^
MATLAB/software/nauty26r7/traces.c:9196:22: style: The scope of the variable 'curr_cell' can be reduced. [variableScope]
    int i, j, j0, k, curr_cell, ind, ind0, ind1, ind2;
                     ^
MATLAB/software/nauty26r7/traces.c:9196:33: style: The scope of the variable 'ind' can be reduced. [variableScope]
    int i, j, j0, k, curr_cell, ind, ind0, ind1, ind2;
                                ^
MATLAB/software/nauty26r7/traces.c:9196:38: style: The scope of the variable 'ind0' can be reduced. [variableScope]
    int i, j, j0, k, curr_cell, ind, ind0, ind1, ind2;
                                     ^
MATLAB/software/nauty26r7/traces.c:9196:44: style: The scope of the variable 'ind1' can be reduced. [variableScope]
    int i, j, j0, k, curr_cell, ind, ind0, ind1, ind2;
                                           ^
MATLAB/software/nauty26r7/traces.c:9196:50: style: The scope of the variable 'ind2' can be reduced. [variableScope]
    int i, j, j0, k, curr_cell, ind, ind0, ind1, ind2;
                                                 ^
MATLAB/software/nauty26r7/traces.c:9197:10: style: The scope of the variable 'sge' can be reduced. [variableScope]
    int *sge;
         ^
MATLAB/software/nauty26r7/traces.c:9198:9: style: The scope of the variable 'HitClsInd' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
        ^
MATLAB/software/nauty26r7/traces.c:9198:20: style: The scope of the variable 'labi' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                   ^
MATLAB/software/nauty26r7/traces.c:9198:26: style: The scope of the variable 'nghb' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                         ^
MATLAB/software/nauty26r7/traces.c:9198:32: style: The scope of the variable 'value' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                               ^
MATLAB/software/nauty26r7/traces.c:9198:39: style: The scope of the variable 'SplInd' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                                      ^
MATLAB/software/nauty26r7/traces.c:9198:47: style: The scope of the variable 'SplCntInd' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                                              ^
MATLAB/software/nauty26r7/traces.c:9198:58: style: The scope of the variable 'sc' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                                                         ^
MATLAB/software/nauty26r7/traces.c:9198:62: style: The scope of the variable 'iend' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                                                             ^
MATLAB/software/nauty26r7/traces.c:9198:79: style: The scope of the variable 'SingInd' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                                                                              ^
MATLAB/software/nauty26r7/traces.c:9198:88: style: The scope of the variable 'newcell' can be reduced. [variableScope]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                                                                                       ^
MATLAB/software/nauty26r7/traces.c:9445:10: style: The scope of the variable 'ngh1' can be reduced. [variableScope]
    int *ngh1, *wgh1;
         ^
MATLAB/software/nauty26r7/traces.c:9445:17: style: The scope of the variable 'wgh1' can be reduced. [variableScope]
    int *ngh1, *wgh1;
                ^
MATLAB/software/nauty26r7/traces.c:9463:10: style: The scope of the variable 'ngh1' can be reduced. [variableScope]
    int *ngh1, *wgh1;
         ^
MATLAB/software/nauty26r7/traces.c:9479:10: style: The scope of the variable 'ngh1' can be reduced. [variableScope]
    int *ngh1, *wgh1;
         ^
MATLAB/software/nauty26r7/traces.c:9495:13: style: The scope of the variable 'curlen' can be reduced. [variableScope]
    int i,n,curlen,slen;
            ^
MATLAB/software/nauty26r7/traces.c:9543:55: style: The scope of the variable 'L' can be reduced. [variableScope]
    int piv, beg[MAX_LEVELS], end[MAX_LEVELS], i = 0, L, R, swap;
                                                      ^
MATLAB/software/nauty26r7/traces.c:9543:58: style: The scope of the variable 'R' can be reduced. [variableScope]
    int piv, beg[MAX_LEVELS], end[MAX_LEVELS], i = 0, L, R, swap;
                                                         ^
MATLAB/software/nauty26r7/traces.c:9544:12: style: The scope of the variable 'value' can be reduced. [variableScope]
    int k, value;
           ^
MATLAB/software/nauty26r7/traces.c:9695:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i, j, val;
        ^
MATLAB/software/nauty26r7/traces.c:9695:12: style: The scope of the variable 'j' can be reduced. [variableScope]
    int i, j, val;
           ^
MATLAB/software/nauty26r7/traces.c:9695:15: style: The scope of the variable 'val' can be reduced. [variableScope]
    int i, j, val;
              ^
MATLAB/software/nauty26r7/traces.c:9696:16: style: The scope of the variable 'FirstCand' can be reduced. [variableScope]
    Candidate *FirstCand;
               ^
MATLAB/software/nauty26r7/traces.c:9697:13: style: The scope of the variable 'orbitcell' can be reduced. [variableScope]
    boolean orbitcell;
            ^
MATLAB/software/nauty26r7/traces.c:9804:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
MATLAB/software/nauty26r7/traces.c:9819:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i, k, value;
        ^
MATLAB/software/nauty26r7/traces.c:9866:9: style: The scope of the variable 'TCell' can be reduced. [variableScope]
    int TCell = -1, TCSize = 1;
        ^
MATLAB/software/nauty26r7/traces.c:9866:21: style: The scope of the variable 'TCSize' can be reduced. [variableScope]
    int TCell = -1, TCSize = 1;
                    ^
MATLAB/software/nauty26r7/traces.c:9867:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
MATLAB/software/nauty26r7/traces.c:9939:13: style: The scope of the variable 'i' can be reduced. [variableScope]
    int Lv, i, Lev, vtx, vtx_d;
            ^
MATLAB/software/nauty26r7/traces.c:9940:20: style: The scope of the variable 'loopend' can be reduced. [variableScope]
    int loopstart, loopend;
                   ^
MATLAB/software/nauty26r7/traces.c:10091:20: style: The scope of the variable 'j1' can be reduced. [variableScope]
    int i, i1, i2, j1, j2, k;
                   ^
MATLAB/software/nauty26r7/traces.c:10091:24: style: The scope of the variable 'j2' can be reduced. [variableScope]
    int i, i1, i2, j1, j2, k;
                       ^
MATLAB/software/nauty26r7/traces.c:10092:9: style: The scope of the variable 'vtx1' can be reduced. [variableScope]
    int vtx1, vtx2, ngh1, ngh2, arg, val;
        ^
MATLAB/software/nauty26r7/traces.c:10092:15: style: The scope of the variable 'vtx2' can be reduced. [variableScope]
    int vtx1, vtx2, ngh1, ngh2, arg, val;
              ^
MATLAB/software/nauty26r7/traces.c:10094:9: style: The scope of the variable 'iend' can be reduced. [variableScope]
    int iend;
        ^
MATLAB/software/nauty26r7/traces.c:10179:10: style: The scope of the variable 'ngh1' can be reduced. [variableScope]
    int *ngh1, *wgh1;
         ^
MATLAB/software/nauty26r7/traces.c:10179:17: style: The scope of the variable 'wgh1' can be reduced. [variableScope]
    int *ngh1, *wgh1;
                ^
MATLAB/software/nauty26r7/traces.c:10307:12: style: The scope of the variable 'k' can be reduced. [variableScope]
    int i, k;
           ^
MATLAB/software/nauty26r7/traces.c:10376:13: style: The scope of the variable 'aux' can be reduced. [variableScope]
    int i,j,aux;
            ^
MATLAB/software/nauty26r7/traces.c:10378:9: style: The scope of the variable 'deg' can be reduced. [variableScope]
    int deg, vtx1, vtx2, *ngh1, *ngh2, *wgh1, *wgh2, ord;
        ^
MATLAB/software/nauty26r7/traces.c:10378:34: style: The scope of the variable 'ngh2' can be reduced. [variableScope]
    int deg, vtx1, vtx2, *ngh1, *ngh2, *wgh1, *wgh2, ord;
                                 ^
MATLAB/software/nauty26r7/traces.c:10454:9: style: The scope of the variable 'TCell' can be reduced. [variableScope]
    int TCell = -1, TCSize = n;
        ^
MATLAB/software/nauty26r7/traces.c:10455:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
MATLAB/software/nauty26r7/traces.c:10523:13: style: The scope of the variable 'i' can be reduced. [variableScope]
    int Lv, i, Lev, vtx, vtx_d;
            ^
MATLAB/software/nauty26r7/traces.c:10524:9: style: The scope of the variable 'loopstart' can be reduced. [variableScope]
    int loopstart, loopend;
        ^
MATLAB/software/nauty26r7/traces.c:10524:20: style: The scope of the variable 'loopend' can be reduced. [variableScope]
    int loopstart, loopend;
                   ^
MATLAB/software/nauty26r7/traces.c:10525:13: style: The scope of the variable 'divided' can be reduced. [variableScope]
    boolean divided;
            ^
MATLAB/software/nauty26r7/traces.c:5776:18: style: Local variable 'SpineTL' shadows outer variable [shadowVariable]
    TracesSpine *SpineTL;
                 ^
MATLAB/software/nauty26r7/traces.c:822:30: note: Shadowed declaration
static TLS_ATTR TracesSpine *SpineTL, *SpineFL, *SpineTL_tl;
                             ^
MATLAB/software/nauty26r7/traces.c:5776:18: note: Shadow variable
    TracesSpine *SpineTL;
                 ^
MATLAB/software/nauty26r7/traces.c:5982:18: style: Local variable 'SpineTL' shadows outer variable [shadowVariable]
    TracesSpine *SpineTL;
                 ^
MATLAB/software/nauty26r7/traces.c:822:30: note: Shadowed declaration
static TLS_ATTR TracesSpine *SpineTL, *SpineFL, *SpineTL_tl;
                             ^
MATLAB/software/nauty26r7/traces.c:5982:18: note: Shadow variable
    TracesSpine *SpineTL;
                 ^
MATLAB/software/nauty26r7/traces.c:7545:18: style: Local variable 'min' shadows outer function [shadowFunction]
    int i, iend, min, tmp;
                 ^
MATLAB/software/nauty26r7/traces.c:304:12: note: Shadowed declaration
static int min(int, int);
           ^
MATLAB/software/nauty26r7/traces.c:7545:18: note: Shadow variable
    int i, iend, min, tmp;
                 ^
MATLAB/software/nauty26r7/traces.c:5316:12: error: Uninitialized variable: TraceInd [uninitvar]
    return TraceInd;
           ^
MATLAB/software/nauty26r7/traces.c:9175:29: error: Uninitialized variable: SingInd [uninitvar]
                            SingInd++;
                            ^
MATLAB/software/nauty26r7/traces.c:9398:29: error: Uninitialized variable: SingInd [uninitvar]
                            SingInd++;
                            ^
MATLAB/software/nauty26r7/traces.c:1292:14: style: Variable 'CurrCand' is assigned a value that is never used. [unreadVariable]
    CurrCand = GarbList = NULL;
             ^
MATLAB/software/nauty26r7/traces.c:834:9: style: Unused variable: deg [unusedVariable]
    int deg, vtx1, vtx2, *ngh1, *ngh2, *wgh1, *wgh2, ord;
        ^
MATLAB/software/nauty26r7/traces.c:834:14: style: Unused variable: vtx1 [unusedVariable]
    int deg, vtx1, vtx2, *ngh1, *ngh2, *wgh1, *wgh2, ord;
             ^
MATLAB/software/nauty26r7/traces.c:834:20: style: Unused variable: vtx2 [unusedVariable]
    int deg, vtx1, vtx2, *ngh1, *ngh2, *wgh1, *wgh2, ord;
                   ^
MATLAB/software/nauty26r7/traces.c:834:27: style: Unused variable: ngh1 [unusedVariable]
    int deg, vtx1, vtx2, *ngh1, *ngh2, *wgh1, *wgh2, ord;
                          ^
MATLAB/software/nauty26r7/traces.c:834:34: style: Unused variable: ngh2 [unusedVariable]
    int deg, vtx1, vtx2, *ngh1, *ngh2, *wgh1, *wgh2, ord;
                                 ^
MATLAB/software/nauty26r7/traces.c:834:41: style: Unused variable: wgh1 [unusedVariable]
    int deg, vtx1, vtx2, *ngh1, *ngh2, *wgh1, *wgh2, ord;
                                        ^
MATLAB/software/nauty26r7/traces.c:834:48: style: Unused variable: wgh2 [unusedVariable]
    int deg, vtx1, vtx2, *ngh1, *ngh2, *wgh1, *wgh2, ord;
                                               ^
MATLAB/software/nauty26r7/traces.c:835:12: style: Unused variable: j1 [unusedVariable]
    size_t j1;
           ^
MATLAB/software/nauty26r7/traces.c:2133:56: style: Unused variable: auxcells [unusedVariable]
    int i, j, k, jk, sc, ind0, ind1, ind2, ind3, labi, auxcells;
                                                       ^
MATLAB/software/nauty26r7/traces.c:3894:23: style: Variable 'TraceCell' is assigned a value that is never used. [unreadVariable]
    boolean TraceCell = FALSE;
                      ^
MATLAB/software/nauty26r7/traces.c:4561:17: style: Variable 'm' is assigned a value that is never used. [unreadVariable]
    const int m = SETWORDSNEEDED(n);
                ^
MATLAB/software/nauty26r7/traces.c:4728:50: style: Variable 'TraceInd' is not assigned a value. [unassignedVariable]
    int HitClsInd, SplInd, SplCntInd, CStackInd, TraceInd, TraceCCInd, TraceStepsInd, SingInd;
                                                 ^
MATLAB/software/nauty26r7/traces.c:4728:60: style: Unused variable: TraceCCInd [unusedVariable]
    int HitClsInd, SplInd, SplCntInd, CStackInd, TraceInd, TraceCCInd, TraceStepsInd, SingInd;
                                                           ^
MATLAB/software/nauty26r7/traces.c:4728:72: style: Unused variable: TraceStepsInd [unusedVariable]
    int HitClsInd, SplInd, SplCntInd, CStackInd, TraceInd, TraceCCInd, TraceStepsInd, SingInd;
                                                                       ^
MATLAB/software/nauty26r7/traces.c:4728:87: style: Unused variable: SingInd [unusedVariable]
    int HitClsInd, SplInd, SplCntInd, CStackInd, TraceInd, TraceCCInd, TraceStepsInd, SingInd;
                                                                                      ^
MATLAB/software/nauty26r7/traces.c:4733:31: style: Unused variable: TracePos [unusedVariable]
    int *lab, *cls, *InvLab, *TracePos, *SplitCell, *LabCell, TraceEnd, Traceccend, Tracestpend;
                              ^
MATLAB/software/nauty26r7/traces.c:4733:63: style: Unused variable: TraceEnd [unusedVariable]
    int *lab, *cls, *InvLab, *TracePos, *SplitCell, *LabCell, TraceEnd, Traceccend, Tracestpend;
                                                              ^
MATLAB/software/nauty26r7/traces.c:4733:73: style: Unused variable: Traceccend [unusedVariable]
    int *lab, *cls, *InvLab, *TracePos, *SplitCell, *LabCell, TraceEnd, Traceccend, Tracestpend;
                                                                        ^
MATLAB/software/nauty26r7/traces.c:4733:85: style: Unused variable: Tracestpend [unusedVariable]
    int *lab, *cls, *InvLab, *TracePos, *SplitCell, *LabCell, TraceEnd, Traceccend, Tracestpend;
                                                                                    ^
MATLAB/software/nauty26r7/traces.c:6247:12: style: Unused variable: j [unusedVariable]
    int i, j, k;
           ^
MATLAB/software/nauty26r7/traces.c:6249:9: style: Unused variable: numtemporbits [unusedVariable]
    int numtemporbits;
        ^
MATLAB/software/nauty26r7/traces.c:6974:15: style: Variable 'gom_level' is assigned a value that is never used. [unreadVariable]
    gom_level = getorbitsmin(fix, tv->nfix, gpB, &gensB, &tv->currorbit,
              ^
MATLAB/software/nauty26r7/traces.c:6796:52: style: Unused variable: temp [unusedVariable]
    int i, k, cu, cu1, tmp, gom_level, search_vtx, temp;
                                                   ^
MATLAB/software/nauty26r7/traces.c:6797:28: style: Unused variable: TrieNode [unusedVariable]
    searchtrie *TreeNode, *TrieNode;
                           ^
MATLAB/software/nauty26r7/traces.c:7434:35: style: Variable 'autom' is assigned a value that is never used. [unreadVariable]
                            autom = 0;
                                  ^
MATLAB/software/nauty26r7/traces.c:7442:30: style: Variable 'TreeNode' is assigned a value that is never used. [unreadVariable]
                    TreeNode = RefPath[tv->maxtreelevel];
                             ^
MATLAB/software/nauty26r7/traces.c:6995:17: style: Unused variable: AuxOrb [unusedVariable]
    int *CuOrb,*AuxOrb;
                ^
MATLAB/software/nauty26r7/traces.c:6997:17: style: Unused variable: TrieNode [unusedVariable]
    searchtrie *TrieNode;
                ^
MATLAB/software/nauty26r7/traces.c:7497:5: style: Variable 'e1' is assigned a value that is never used. [unreadVariable]
    SG_VDE(sg1, v1, d1, e1);
    ^
MATLAB/software/nauty26r7/traces.c:7483:20: style: Unused variable: d2 [unusedVariable]
    int *d1, *e1, *d2, *e2;
                   ^
MATLAB/software/nauty26r7/traces.c:7483:25: style: Unused variable: e2 [unusedVariable]
    int *d1, *e1, *d2, *e2;
                        ^
MATLAB/software/nauty26r7/traces.c:7485:18: style: Unused variable: v2 [unusedVariable]
    size_t *v1, *v2, k;
                 ^
MATLAB/software/nauty26r7/traces.c:7801:20: style: Variable 'do_ngh' is assigned a value that is never used. [unreadVariable]
    boolean do_ngh = FALSE;
                   ^
MATLAB/software/nauty26r7/traces.c:8794:15: style: Variable 'singcount' is assigned a value that is never used. [unreadVariable]
    singcount = 0;
              ^
MATLAB/software/nauty26r7/traces.c:8962:79: style: Variable 'SingInd' is not assigned a value. [unassignedVariable]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                                                                              ^
MATLAB/software/nauty26r7/traces.c:9198:79: style: Variable 'SingInd' is not assigned a value. [unassignedVariable]
    int HitClsInd, labi, nghb, value, SplInd, SplCntInd, sc, iend, CStackInd, SingInd, newcell, TraceInd;
                                                                              ^
MATLAB/software/nauty26r7/traces.c:9463:17: style: Unused variable: wgh1 [unusedVariable]
    int *ngh1, *wgh1;
                ^
MATLAB/software/nauty26r7/traces.c:9479:17: style: Unused variable: wgh1 [unusedVariable]
    int *ngh1, *wgh1;
                ^
MATLAB/software/nauty26r7/traces.c:10135:11: style: Variable 'k' is assigned a value that is never used. [unreadVariable]
        k = tv->permInd;
          ^
MATLAB/software/nauty26r7/traces.c:10402:18: style: Variable 'ngh2' is assigned a value that is never used. [unreadVariable]
            ngh2 = (TheAuxGraph[vtx2].e)++;
                 ^
MATLAB/software/nauty26r7/traces.c:5594:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                            if (tv->options->verbosity >= 2) tv->schreier3 -= CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:5596:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                            if (tv->options->verbosity >= 2) tv->schreier3 += CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:5793:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                            if (tv->options->verbosity >= 2) tv->schreier3 -= CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:5795:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                            if (tv->options->verbosity >= 2) tv->schreier3 += CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6029:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                        if (tv->options->verbosity >= 2) tv->schreier3 -= CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6032:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                        if (tv->options->verbosity >= 2) tv->schreier3 += CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6338:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                            if (tv->options->verbosity >= 2) tv->schreier1 -= CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6340:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                            if (tv->options->verbosity >= 2) tv->schreier1 += CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6502:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                                            if (tv->options->verbosity >= 2) tv->expaths -= CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6533:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                                            if (tv->options->verbosity >= 2) tv->expaths += CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6562:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                                    if (tv->options->verbosity >= 2) tv->autchk -= CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6568:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                                    if (tv->options->verbosity >= 2) tv->autchk += CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6587:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                                    if (tv->options->verbosity >= 2) tv->autchk -= CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6593:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                                    if (tv->options->verbosity >= 2) tv->autchk += CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6719:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                                        if (tv->options->verbosity >= 2) tv->expaths -= CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6741:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                                        if (tv->options->verbosity >= 2) tv->expaths += CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6839:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        if (tv->options->verbosity >= 2) tv->schreier2 -= CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6841:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        if (tv->options->verbosity >= 2) tv->schreier2 += CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6910:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            if (tv->options->verbosity >= 2) tv->autchk -= CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6914:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            if (tv->options->verbosity >= 2) tv->autchk += CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6972:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (tv->options->verbosity >= 2) tv->schreier1 -= CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:6976:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (tv->options->verbosity >= 2) tv->schreier1 += CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:7142:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                                    if (tv->options->verbosity >= 2) tv->expaths -= CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:7151:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                                    if (tv->options->verbosity >= 2) tv->expaths += CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:7161:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                            if (tv->options->verbosity >= 2) tv->autchk -= CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:7165:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                            if (tv->options->verbosity >= 2) tv->autchk += CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:7229:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                            if (tv->options->verbosity >= 2) tv->schreier1 -= CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:7233:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                            if (tv->options->verbosity >= 2) tv->schreier1 += CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:7378:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                                        if (tv->options->verbosity >= 2) tv->expaths -= CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:7388:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                                        if (tv->options->verbosity >= 2) tv->expaths += CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:7398:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                                if (tv->options->verbosity >= 2) tv->autchk -= CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:7402:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                                if (tv->options->verbosity >= 2) tv->autchk += CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:9744:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                                if (tv->options->verbosity >= 2) tv->schreier1 -= CPUTIME;
^
MATLAB/software/nauty26r7/traces.c:9746:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                                if (tv->options->verbosity >= 2) tv->schreier1 += CPUTIME;
^
MATLAB/software/nauty26r7/twohamg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/twohamg.c:106:19: style: The scope of the variable 'vi' can be reduced. [variableScope]
    size_t *v,*vv,vi,vvi;
                  ^
MATLAB/software/nauty26r7/twohamg.c:311:13: style: The scope of the variable 'v' can be reduced. [variableScope]
    int i,j,v,w;
            ^
MATLAB/software/nauty26r7/twohamg.c:806:9: style: Local variable 'v1' shadows outer variable [shadowVariable]
    int v1,v2,v3,v4,e1,e2,e3,j1,j2,j3;
        ^
MATLAB/software/nauty26r7/twohamg.c:75:1: note: Shadowed declaration
DYNALLSTAT(int,v1,v1_sz);
^
MATLAB/software/nauty26r7/twohamg.c:806:9: note: Shadow variable
    int v1,v2,v3,v4,e1,e2,e3,j1,j2,j3;
        ^
MATLAB/software/nauty26r7/twohamg.c:806:12: style: Local variable 'v2' shadows outer variable [shadowVariable]
    int v1,v2,v3,v4,e1,e2,e3,j1,j2,j3;
           ^
MATLAB/software/nauty26r7/twohamg.c:76:1: note: Shadowed declaration
DYNALLSTAT(int,v2,v2_sz);
^
MATLAB/software/nauty26r7/twohamg.c:806:12: note: Shadow variable
    int v1,v2,v3,v4,e1,e2,e3,j1,j2,j3;
           ^
MATLAB/software/nauty26r7/twohamg.c:138:9: style: Unused variable: i [unusedVariable]
    int i,j;
        ^
MATLAB/software/nauty26r7/twohamg.c:138:11: style: Unused variable: j [unusedVariable]
    int i,j;
          ^
MATLAB/software/nauty26r7/twohamg.c:506:9: style: Unused variable: fe [unusedVariable]
    int fe,fc;
        ^
MATLAB/software/nauty26r7/twohamg.c:506:12: style: Unused variable: fc [unusedVariable]
    int fe,fc;
           ^
MATLAB/software/nauty26r7/twohamg.c:803:11: style: Unused variable: j [unusedVariable]
    int i,j,k,l,n,c;
          ^
MATLAB/software/nauty26r7/twohamg.c:803:15: style: Unused variable: l [unusedVariable]
    int i,j,k,l,n,c;
              ^
MATLAB/software/nauty26r7/twohamg.c:803:19: style: Unused variable: c [unusedVariable]
    int i,j,k,l,n,c;
                  ^
MATLAB/software/nauty26r7/twohamg.c:1030:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME;
^
MATLAB/software/nauty26r7/twohamg.c:1189:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME - t;
^
MATLAB/software/nauty26r7/twohamg.c:914:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/vcolg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/vcolg.c:90:11: style: The scope of the variable 'k' can be reduced. [variableScope]
    int i,k;
          ^
MATLAB/software/nauty26r7/vcolg.c:116:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
MATLAB/software/nauty26r7/vcolg.c:209:20: style: The scope of the variable 'ret' can be reduced. [variableScope]
    long min,max,k,ret;
                   ^
MATLAB/software/nauty26r7/vcolg.c:271:45: style: Unused variable: deg [unusedVariable]
    int lab[MAXNV],ptn[MAXNV],orbits[MAXNV],deg[MAXNV];
                                            ^
MATLAB/software/nauty26r7/vcolg.c:274:9: style: Unused variable: last0 [unusedVariable]
    int last0,lastn,thisdeg,region,start,stop;
        ^
MATLAB/software/nauty26r7/vcolg.c:274:15: style: Unused variable: lastn [unusedVariable]
    int last0,lastn,thisdeg,region,start,stop;
              ^
MATLAB/software/nauty26r7/vcolg.c:274:21: style: Unused variable: thisdeg [unusedVariable]
    int last0,lastn,thisdeg,region,start,stop;
                    ^
MATLAB/software/nauty26r7/vcolg.c:364:9: style: Unused variable: i [unusedVariable]
    int i,m,n,codetype;
        ^
MATLAB/software/nauty26r7/vcolg.c:493:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME;
^
MATLAB/software/nauty26r7/vcolg.c:504:0: information: Skipping configuration 'CLK_TCK;_SC_CLK_TCK' since the value of 'CLK_TCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    t = CPUTIME - t;
^
MATLAB/software/nauty26r7/vcolg.c:376:0: information: Skipping configuration 'HELPTEXT2' since the value of 'HELPTEXT2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    HELP; PUTVERSION;
^
MATLAB/software/nauty26r7/vcolg.c:65:0: information: Skipping configuration 'OUTPROC' since the value of 'OUTPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern void OUTPROC(FILE*,graph*,int*,int,int);
^
MATLAB/software/nauty26r7/vcolg.c:176:0: information: Skipping configuration 'OUTPROC' since the value of 'OUTPROC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            OUTPROC(outfile,g,col,m,n);
^
MATLAB/software/nauty26r7/vcolg.c:69:0: information: Skipping configuration 'SUMMARY' since the value of 'SUMMARY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern void SUMMARY(void);
^
MATLAB/software/nauty26r7/vcolg.c:507:0: information: Skipping configuration 'SUMMARY' since the value of 'SUMMARY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    SUMMARY();
^
MATLAB/software/nauty26r7/watercluster2.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
MATLAB/software/nauty26r7/watercluster2.c:1233:19: warning: The address of local variable 'sameorbit' might be accessed at non-zero index. [objectIndex]
     if (ISELEMENT(&sameorbit,j) && (tobedirected[j]==1)) construct_operations_one(top, j, 0, 1, double_allowed);
                  ^
MATLAB/software/nauty26r7/watercluster2.c:1233:19: note: Address of variable taken here.
     if (ISELEMENT(&sameorbit,j) && (tobedirected[j]==1)) construct_operations_one(top, j, 0, 1, double_allowed);
                  ^
MATLAB/software/nauty26r7/watercluster2.c:1233:19: note: The address of local variable 'sameorbit' might be accessed at non-zero index.
     if (ISELEMENT(&sameorbit,j) && (tobedirected[j]==1)) construct_operations_one(top, j, 0, 1, double_allowed);
                  ^
MATLAB/software/nauty26r7/watercluster2.c:1259:43: warning: The address of local variable 'pre_free' might be accessed at non-zero index. [objectIndex]
      if (tobedirected[top]>=2) ADDELEMENT(&pre_free,top); // will stay free unless is chosen top
                                          ^
MATLAB/software/nauty26r7/watercluster2.c:1259:43: note: Address of variable taken here.
      if (tobedirected[top]>=2) ADDELEMENT(&pre_free,top); // will stay free unless is chosen top
                                          ^
MATLAB/software/nauty26r7/watercluster2.c:1259:43: note: The address of local variable 'pre_free' might be accessed at non-zero index.
      if (tobedirected[top]>=2) ADDELEMENT(&pre_free,top); // will stay free unless is chosen top
                                          ^
MATLAB/software/nauty26r7/watercluster2.c:1260:22: warning: The address of local variable 'tbd1' might be accessed at non-zero index. [objectIndex]
      else ADDELEMENT(&tbd1,top);
                     ^
MATLAB/software/nauty26r7/watercluster2.c:1260:22: note: Address of variable taken here.
      else ADDELEMENT(&tbd1,top);
                     ^
MATLAB/software/nauty26r7/watercluster2.c:1260:22: note: The address of local variable 'tbd1' might be accessed at non-zero index.
      else ADDELEMENT(&tbd1,top);
                     ^
MATLAB/software/nauty26r7/watercluster2.c:1273:43: warning: The address of local variable 'pre_free' might be accessed at non-zero index. [objectIndex]
      if (tobedirected[top]>=2) ADDELEMENT(&pre_free,top); // will stay free unless is chosen top
                                          ^
MATLAB/software/nauty26r7/watercluster2.c:1273:43: note: Address of variable taken here.
      if (tobedirected[top]>=2) ADDELEMENT(&pre_free,top); // will stay free unless is chosen top
                                          ^
MATLAB/software/nauty26r7/watercluster2.c:1273:43: note: The address of local variable 'pre_free' might be accessed at non-zero index.
      if (tobedirected[top]>=2) ADDELEMENT(&pre_free,top); // will stay free unless is chosen top
                                          ^
MATLAB/software/nauty26r7/watercluster2.c:1274:22: warning: The address of local variable 'tbd1' might be accessed at non-zero index. [objectIndex]
      else ADDELEMENT(&tbd1,top);
                     ^
MATLAB/software/nauty26r7/watercluster2.c:1274:22: note: Address of variable taken here.
      else ADDELEMENT(&tbd1,top);
                     ^
MATLAB/software/nauty26r7/watercluster2.c:1274:22: note: The address of local variable 'tbd1' might be accessed at non-zero index.
      else ADDELEMENT(&tbd1,top);
                     ^
MATLAB/software/nauty26r7/watercluster2.c:1299:15: warning: The address of local variable 'sameorbit' might be accessed at non-zero index. [objectIndex]
 if (ISELEMENT(&sameorbit,j) && (tobedirected[j]==1))
              ^
MATLAB/software/nauty26r7/watercluster2.c:1299:15: note: Address of variable taken here.
 if (ISELEMENT(&sameorbit,j) && (tobedirected[j]==1))
              ^
MATLAB/software/nauty26r7/watercluster2.c:1299:15: note: The address of local variable 'sameorbit' might be accessed at non-zero index.
 if (ISELEMENT(&sameorbit,j) && (tobedirected[j]==1))
              ^
MATLAB/software/nauty26r7/watercluster2.c:1300:44: warning: The address of local variable 'bufferg' might be accessed at non-zero index. [objectIndex]
   { bufferg=workg[j]&sameorbit; DELELEMENT(&bufferg,top);
                                           ^
MATLAB/software/nauty26r7/watercluster2.c:1300:44: note: Address of variable taken here.
   { bufferg=workg[j]&sameorbit; DELELEMENT(&bufferg,top);
                                           ^
MATLAB/software/nauty26r7/watercluster2.c:1300:44: note: The address of local variable 'bufferg' might be accessed at non-zero index.
   { bufferg=workg[j]&sameorbit; DELELEMENT(&bufferg,top);
                                           ^
MATLAB/software/nauty26r7/watercluster2.c:1531:74: warning: The address of local variable 'free' might be accessed at non-zero index. [objectIndex]
  for (run=vertexorbit; (*run)>=0; run++) if (NOT_READY(*run)) ADDELEMENT(&free,(*run));
                                                                         ^
MATLAB/software/nauty26r7/watercluster2.c:1531:74: note: Address of variable taken here.
  for (run=vertexorbit; (*run)>=0; run++) if (NOT_READY(*run)) ADDELEMENT(&free,(*run));
                                                                         ^
MATLAB/software/nauty26r7/watercluster2.c:1531:74: note: The address of local variable 'free' might be accessed at non-zero index.
  for (run=vertexorbit; (*run)>=0; run++) if (NOT_READY(*run)) ADDELEMENT(&free,(*run));
                                                                         ^
MATLAB/software/nauty26r7/watercluster2.c:1542:52: warning: The address of local variable 'candidates' might be accessed at non-zero index. [objectIndex]
 if (buffer<min) { candidates= (graph)0; ADDELEMENT(&candidates,top);
                                                   ^
MATLAB/software/nauty26r7/watercluster2.c:1542:52: note: Address of variable taken here.
 if (buffer<min) { candidates= (graph)0; ADDELEMENT(&candidates,top);
                                                   ^
MATLAB/software/nauty26r7/watercluster2.c:1542:52: note: The address of local variable 'candidates' might be accessed at non-zero index.
 if (buffer<min) { candidates= (graph)0; ADDELEMENT(&candidates,top);
                                                   ^
MATLAB/software/nauty26r7/watercluster2.c:1546:18: warning: The address of local variable 'candidates' might be accessed at non-zero index. [objectIndex]
     { ADDELEMENT(&candidates,top); candidatelist[number_candidates]=top; number_candidates++; }
                 ^
MATLAB/software/nauty26r7/watercluster2.c:1546:18: note: Address of variable taken here.
     { ADDELEMENT(&candidates,top); candidatelist[number_candidates]=top; number_candidates++; }
                 ^
MATLAB/software/nauty26r7/watercluster2.c:1546:18: note: The address of local variable 'candidates' might be accessed at non-zero index.
     { ADDELEMENT(&candidates,top); candidatelist[number_candidates]=top; number_candidates++; }
                 ^
MATLAB/software/nauty26r7/watercluster2.c:1548:38: warning: The address of local variable 'candidates' might be accessed at non-zero index. [objectIndex]
  if (number_candidates && !ISELEMENT(&candidates,center))
                                     ^
MATLAB/software/nauty26r7/watercluster2.c:1548:38: note: Address of variable taken here.
  if (number_candidates && !ISELEMENT(&candidates,center))
                                     ^
MATLAB/software/nauty26r7/watercluster2.c:1548:38: note: The address of local variable 'candidates' might be accessed at non-zero index.
  if (number_candidates && !ISELEMENT(&candidates,center))
                                     ^
MATLAB/software/nauty26r7/watercluster2.c:1564:29: warning: The address of local variable 'candidates' might be accessed at non-zero index. [objectIndex]
     { if (k<0) { DELELEMENT(&candidates,candidatelist[i]);
                            ^
MATLAB/software/nauty26r7/watercluster2.c:1564:29: note: Address of variable taken here.
     { if (k<0) { DELELEMENT(&candidates,candidatelist[i]);
                            ^
MATLAB/software/nauty26r7/watercluster2.c:1564:29: note: The address of local variable 'candidates' might be accessed at non-zero index.
     { if (k<0) { DELELEMENT(&candidates,candidatelist[i]);
                            ^
MATLAB/software/nauty26r7/watercluster2.c:1582:26: warning: The address of local variable 'candidates' might be accessed at non-zero index. [objectIndex]
  { if (k<0) { DELELEMENT(&candidates,candidatelist[i]);
                         ^
MATLAB/software/nauty26r7/watercluster2.c:1582:26: note: Address of variable taken here.
  { if (k<0) { DELELEMENT(&candidates,candidatelist[i]);
                         ^
MATLAB/software/nauty26r7/watercluster2.c:1582:26: note: The address of local variable 'candidates' might be accessed at non-zero index.
  { if (k<0) { DELELEMENT(&candidates,candidatelist[i]);
                         ^
MATLAB/software/nauty26r7/watercluster2.c:1613:32: warning: The address of local variable 'candidates' might be accessed at non-zero index. [objectIndex]
     { if (k2<0LL) { DELELEMENT(&candidates,candidatelist[i]);
                               ^
MATLAB/software/nauty26r7/watercluster2.c:1613:32: note: Address of variable taken here.
     { if (k2<0LL) { DELELEMENT(&candidates,candidatelist[i]);
                               ^
MATLAB/software/nauty26r7/watercluster2.c:1613:32: note: The address of local variable 'candidates' might be accessed at non-zero index.
     { if (k2<0LL) { DELELEMENT(&candidates,candidatelist[i]);
                               ^
MATLAB/software/nauty26r7/watercluster2.c:1653:39: warning: The address of local variable 'bit_startlist' might be accessed at non-zero index. [objectIndex]
   *startrun=k; startrun++; ADDELEMENT(&bit_startlist,k);
                                      ^
MATLAB/software/nauty26r7/watercluster2.c:1653:39: note: Address of variable taken here.
   *startrun=k; startrun++; ADDELEMENT(&bit_startlist,k);
                                      ^
MATLAB/software/nauty26r7/watercluster2.c:1653:39: note: The address of local variable 'bit_startlist' might be accessed at non-zero index.
   *startrun=k; startrun++; ADDELEMENT(&bit_startlist,k);
                                      ^
MATLAB/software/nauty26r7/watercluster2.c:1678:39: warning: The address of local variable 'bit_startlist' might be accessed at non-zero index. [objectIndex]
   *startrun=k; startrun++; ADDELEMENT(&bit_startlist,k);
                                      ^
MATLAB/software/nauty26r7/watercluster2.c:1678:39: note: Address of variable taken here.
   *startrun=k; startrun++; ADDELEMENT(&bit_startlist,k);
                                      ^
MATLAB/software/nauty26r7/watercluster2.c:1678:39: note: The address of local variable 'bit_startlist' might be accessed at non-zero index.
   *startrun=k; startrun++; ADDELEMENT(&bit_startlist,k);
                                      ^
MATLAB/software/nauty26r7/watercluster2.c:1719:27: warning: The address of local variable 'candidates' might be accessed at non-zero index. [objectIndex]
      for (i=0; !ISELEMENT(&candidates,bufferlab[i]); i++); // zoekt candidaat met kleinste kanonische label
                          ^
MATLAB/software/nauty26r7/watercluster2.c:1719:27: note: Address of variable taken here.
      for (i=0; !ISELEMENT(&candidates,bufferlab[i]); i++); // zoekt candidaat met kleinste kanonische label
                          ^
MATLAB/software/nauty26r7/watercluster2.c:1719:27: note: The address of local variable 'candidates' might be accessed at non-zero index.
      for (i=0; !ISELEMENT(&candidates,bufferlab[i]); i++); // zoekt candidaat met kleinste kanonische label
                          ^
MATLAB/software/nauty26r7/watercluster2.c:1730:23: warning: The address of local variable 'bit_startlist' might be accessed at non-zero index. [objectIndex]
  for (i=0; !ISELEMENT(&bit_startlist,bufferlab[i]); i++);
                      ^
MATLAB/software/nauty26r7/watercluster2.c:1730:23: note: Address of variable taken here.
  for (i=0; !ISELEMENT(&bit_startlist,bufferlab[i]); i++);
                      ^
MATLAB/software/nauty26r7/watercluster2.c:1730:23: note: The address of local variable 'bit_startlist' might be accessed at non-zero index.
  for (i=0; !ISELEMENT(&bit_startlist,bufferlab[i]); i++);
                      ^
MATLAB/software/nauty26r7/watercluster2.c:1748:25: warning: The address of local variable 'dummy' might be accessed at non-zero index. [objectIndex]
    for (i=0;!(ISELEMENT(&dummy,bufferlab[i]) && (indeg[bufferlab[i]]==endin)) && (i<aantal_toppen);i++);
                        ^
MATLAB/software/nauty26r7/watercluster2.c:1748:25: note: Address of variable taken here.
    for (i=0;!(ISELEMENT(&dummy,bufferlab[i]) && (indeg[bufferlab[i]]==endin)) && (i<aantal_toppen);i++);
                        ^
MATLAB/software/nauty26r7/watercluster2.c:1748:25: note: The address of local variable 'dummy' might be accessed at non-zero index.
    for (i=0;!(ISELEMENT(&dummy,bufferlab[i]) && (indeg[bufferlab[i]]==endin)) && (i<aantal_toppen);i++);
                        ^
MATLAB/software/nauty26r7/watercluster2.c:1751:16: warning: The address of local variable 'dummy' might be accessed at non-zero index. [objectIndex]
    !(ISELEMENT(&dummy,bufferlab[i]) && (indeg[bufferlab[i]]==endin)); i++);
               ^
MATLAB/software/nauty26r7/watercluster2.c:1751:16: note: Address of variable taken here.
    !(ISELEMENT(&dummy,bufferlab[i]) && (indeg[bufferlab[i]]==endin)); i++);
               ^
MATLAB/software/nauty26r7/watercluster2.c:1751:16: note: The address of local variable 'dummy' might be accessed at non-zero index.
    !(ISELEMENT(&dummy,bufferlab[i]) && (indeg[bufferlab[i]]==endin)); i++);
               ^
MATLAB/software/nauty26r7/watercluster2.c:1852:16: warning: The address of local variable 'notready' might be accessed at non-zero index. [objectIndex]
     ADDELEMENT(&notready,i); }
               ^
MATLAB/software/nauty26r7/watercluster2.c:1852:16: note: Address of variable taken here.
     ADDELEMENT(&notready,i); }
               ^
MATLAB/software/nauty26r7/watercluster2.c:1852:16: note: The address of local variable 'notready' might be accessed at non-zero index.
     ADDELEMENT(&notready,i); }
               ^
MATLAB/software/nauty26r7/watercluster2.c:1907:28: warning: The address of local variable 'touched' might be accessed at non-zero index. [objectIndex]
   if (READY(i)) ADDELEMENT(touched,i);
                           ^
MATLAB/software/nauty26r7/watercluster2.c:2047:19: note: Address of variable taken here.
      chooseorbit(&touched, local_todolist, orbitid+1);
                  ^
MATLAB/software/nauty26r7/watercluster2.c:2047:19: note: Calling function 'chooseorbit', 1st argument '&touched' value is lifetime=touched
      chooseorbit(&touched, local_todolist, orbitid+1);
                  ^
MATLAB/software/nauty26r7/watercluster2.c:1907:28: note: The address of local variable 'touched' might be accessed at non-zero index.
   if (READY(i)) ADDELEMENT(touched,i);
                           ^
MATLAB/software/nauty26r7/watercluster2.c:1957:13: warning: The address of local variable 'touched' might be accessed at non-zero index. [objectIndex]
  ADDELEMENT(touched,fixed_vertex);
            ^
MATLAB/software/nauty26r7/watercluster2.c:2004:25: note: Address of variable taken here.
      choose_triv_orbit(&touched, local_todolist, orbitid+1, element[i]);
                        ^
MATLAB/software/nauty26r7/watercluster2.c:2004:25: note: Calling function 'choose_triv_orbit', 1st argument '&touched' value is lifetime=touched
      choose_triv_orbit(&touched, local_todolist, orbitid+1, element[i]);
                        ^
MATLAB/software/nauty26r7/watercluster2.c:1957:13: note: The address of local variable 'touched' might be accessed at non-zero index.
  ADDELEMENT(touched,fixed_vertex);
            ^
MATLAB/software/nauty26r7/watercluster2.c:1975:48: warning: The address of local variable 'not_ready' might be accessed at non-zero index. [objectIndex]
 { if (NOT_READY(j)) { end=0; } else DELELEMENT(&not_ready,j); }
                                               ^
MATLAB/software/nauty26r7/watercluster2.c:1975:48: note: Address of variable taken here.
 { if (NOT_READY(j)) { end=0; } else DELELEMENT(&not_ready,j); }
                                               ^
MATLAB/software/nauty26r7/watercluster2.c:1975:48: note: The address of local variable 'not_ready' might be accessed at non-zero index.
 { if (NOT_READY(j)) { end=0; } else DELELEMENT(&not_ready,j); }
                                               ^
MATLAB/software/nauty26r7/watercluster2.c:2113:58: warning: The address of local variable 'dummy' might be accessed at non-zero index. [objectIndex]
      for (i=0; (k=local_todolist[i])>=0; i++) ADDELEMENT(&dummy,k);
                                                         ^
MATLAB/software/nauty26r7/watercluster2.c:2113:58: note: Address of variable taken here.
      for (i=0; (k=local_todolist[i])>=0; i++) ADDELEMENT(&dummy,k);
                                                         ^
MATLAB/software/nauty26r7/watercluster2.c:2113:58: note: The address of local variable 'dummy' might be accessed at non-zero index.
      for (i=0; (k=local_todolist[i])>=0; i++) ADDELEMENT(&dummy,k);
                                                         ^
MATLAB/software/nauty26r7/watercluster2.c:2246:64: warning: The address of local variable 'all' might be accessed at non-zero index. [objectIndex]
  for (i=0;i<aantal_toppen;i++) { num_in_orbit[i]=0; ADDELEMENT(&all,i); }
                                                               ^
MATLAB/software/nauty26r7/watercluster2.c:2246:64: note: Address of variable taken here.
  for (i=0;i<aantal_toppen;i++) { num_in_orbit[i]=0; ADDELEMENT(&all,i); }
                                                               ^
MATLAB/software/nauty26r7/watercluster2.c:2246:64: note: The address of local variable 'all' might be accessed at non-zero index.
  for (i=0;i<aantal_toppen;i++) { num_in_orbit[i]=0; ADDELEMENT(&all,i); }
                                                               ^
MATLAB/software/nauty26r7/watercluster2.c:1237:8: style: Condition '!(staticg[top]&tbd1)' is always true [knownConditionTrueFalse]
   if (!(staticg[top] & tbd1))
       ^
MATLAB/software/nauty26r7/watercluster2.c:1208:8: note: Assignment 'tbd1=(unsigned long)0', assigned value is 0
  tbd1=(graph)0;
       ^
MATLAB/software/nauty26r7/watercluster2.c:1237:8: note: Condition '!(staticg[top]&tbd1)' is always true
   if (!(staticg[top] & tbd1))
       ^
MATLAB/software/nauty26r7/watercluster2.c:1320:6: style: Condition '!(staticg[top]&tbd1)' is always true [knownConditionTrueFalse]
 if (!(staticg[top] & tbd1))
     ^
MATLAB/software/nauty26r7/watercluster2.c:1208:8: note: Assignment 'tbd1=(unsigned long)0', assigned value is 0
  tbd1=(graph)0;
       ^
MATLAB/software/nauty26r7/watercluster2.c:1224:5: note: Assuming condition is false
if (first_in_orbit)
    ^
MATLAB/software/nauty26r7/watercluster2.c:1320:6: note: Condition '!(staticg[top]&tbd1)' is always true
 if (!(staticg[top] & tbd1))
     ^
MATLAB/software/nauty26r7/watercluster2.c:1354:7: style: Condition '!error' is always true [knownConditionTrueFalse]
  if (!error) construct_operations_in(list,0,decided,buffer,1,0,0,lowerlimit_outdeg,mindouble);
      ^
MATLAB/software/nauty26r7/watercluster2.c:1345:10: note: Assuming that condition '!error' is not redundant
     if (!error)
         ^
MATLAB/software/nauty26r7/watercluster2.c:1354:7: note: Condition '!error' is always true
  if (!error) construct_operations_in(list,0,decided,buffer,1,0,0,lowerlimit_outdeg,mindouble);
      ^
MATLAB/software/nauty26r7/watercluster2.c:488:6: warning: Either the condition 'code==NULL' is redundant or there is possible null pointer dereference: code. [nullPointerRedundantCheck]
    *code=(unsigned char *)malloc((knotenzahl*(knotenzahl-1)/2+knotenzahl)*sizeof(unsigned char));
     ^
MATLAB/software/nauty26r7/watercluster2.c:489:13: note: Assuming that condition 'code==NULL' is not redundant
    if (code==NULL) { fprintf(stderr,"Do not get memory for code\n"); exit(0); }
            ^
MATLAB/software/nauty26r7/watercluster2.c:488:6: note: Null pointer dereference
    *code=(unsigned char *)malloc((knotenzahl*(knotenzahl-1)/2+knotenzahl)*sizeof(unsigned char));
     ^
MATLAB/software/nauty26r7/watercluster2.c:1740:8: style: Variable 'dummy' is reassigned a value before the old one has been used. [redundantAssignment]
  dummy= sameorbit & workg[canoncenter];
       ^
MATLAB/software/nauty26r7/watercluster2.c:1684:12: note: dummy is assigned
      dummy=workg[center] & sameorbit;
           ^
MATLAB/software/nauty26r7/watercluster2.c:1740:8: note: dummy is overwritten
  dummy= sameorbit & workg[canoncenter];
       ^
MATLAB/software/nauty26r7/watercluster2.c:460:15: style: The scope of the variable 'ucharpuffer' can be reduced. [variableScope]
unsigned char ucharpuffer;
              ^
MATLAB/software/nauty26r7/watercluster2.c:600:54: style: The scope of the variable 'start' can be reduced. [variableScope]
  int last_positie,i, buffer, olddeg, newdeg, beste, start, end;
                                                     ^
MATLAB/software/nauty26r7/watercluster2.c:821:10: style: The scope of the variable 'remember' can be reduced. [variableScope]
     int remember;
         ^
MATLAB/software/nauty26r7/watercluster2.c:848:10: style: The scope of the variable 'start' can be reduced. [variableScope]
  int i, start, end;
         ^
MATLAB/software/nauty26r7/watercluster2.c:848:17: style: The scope of the variable 'end' can be reduced. [variableScope]
  int i, start, end;
                ^
MATLAB/software/nauty26r7/watercluster2.c:904:14: style: The scope of the variable 'i' can be reduced. [variableScope]
  int buffer,i,j;
             ^
MATLAB/software/nauty26r7/watercluster2.c:904:16: style: The scope of the variable 'j' can be reduced. [variableScope]
  int buffer,i,j;
               ^
MATLAB/software/nauty26r7/watercluster2.c:994:25: style: The scope of the variable 'buffer' can be reduced. [variableScope]
  static unsigned char *buffer;
                        ^
MATLAB/software/nauty26r7/watercluster2.c:1039:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, center;
      ^
MATLAB/software/nauty26r7/watercluster2.c:1040:25: style: The scope of the variable 'buffer' can be reduced. [variableScope]
  static unsigned char *buffer;
                        ^
MATLAB/software/nauty26r7/watercluster2.c:1094:18: style: The scope of the variable 'buffer' can be reduced. [variableScope]
  int i, center, buffer;
                 ^
MATLAB/software/nauty26r7/watercluster2.c:1165:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, center;
      ^
MATLAB/software/nauty26r7/watercluster2.c:1203:28: style: The scope of the variable 'i' can be reduced. [variableScope]
  int minout, do_double=0, i, mindouble;
                           ^
MATLAB/software/nauty26r7/watercluster2.c:1520:7: style: The scope of the variable 'numberends' can be reduced. [variableScope]
  int numberends, ends[MAXN][MAXN], endin=0, *run;
      ^
MATLAB/software/nauty26r7/watercluster2.c:1521:12: style: The scope of the variable 'colour' can be reduced. [variableScope]
  nvector *colour;
           ^
MATLAB/software/nauty26r7/watercluster2.c:1522:17: style: The scope of the variable 'buffer2' can be reduced. [variableScope]
  long long int buffer2, k2;
                ^
MATLAB/software/nauty26r7/watercluster2.c:1522:26: style: The scope of the variable 'k2' can be reduced. [variableScope]
  long long int buffer2, k2;
                         ^
MATLAB/software/nauty26r7/watercluster2.c:1790:9: style: The scope of the variable 'buffer' can be reduced. [variableScope]
  int i,buffer;
        ^
MATLAB/software/nauty26r7/watercluster2.c:1833:54: style: The scope of the variable 'start' can be reduced. [variableScope]
  int last_positie,i, buffer, olddeg, newdeg, beste, start, end;
                                                     ^
MATLAB/software/nauty26r7/watercluster2.c:1898:34: style: The scope of the variable 'dummy' can be reduced. [variableScope]
{ int i,j,k, num_in_orbit[MAXN], dummy, inorbit[MAXN][MAXN], best, bestroot=0;
                                 ^
MATLAB/software/nauty26r7/watercluster2.c:1965:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, j, k, d, end;
      ^
MATLAB/software/nauty26r7/watercluster2.c:1965:13: style: The scope of the variable 'k' can be reduced. [variableScope]
  int i, j, k, d, end;
            ^
MATLAB/software/nauty26r7/watercluster2.c:1965:16: style: The scope of the variable 'd' can be reduced. [variableScope]
  int i, j, k, d, end;
               ^
MATLAB/software/nauty26r7/watercluster2.c:1968:7: style: The scope of the variable 'colour' can be reduced. [variableScope]
  int colour[MAXN],numbercolour[MAXN], element[MAXN], diffcolours;
      ^
MATLAB/software/nauty26r7/watercluster2.c:1968:20: style: The scope of the variable 'numbercolour' can be reduced. [variableScope]
  int colour[MAXN],numbercolour[MAXN], element[MAXN], diffcolours;
                   ^
MATLAB/software/nauty26r7/watercluster2.c:1968:55: style: The scope of the variable 'diffcolours' can be reduced. [variableScope]
  int colour[MAXN],numbercolour[MAXN], element[MAXN], diffcolours;
                                                      ^
MATLAB/software/nauty26r7/watercluster2.c:1969:12: style: The scope of the variable 'orbcolour' can be reduced. [variableScope]
  nvector *orbcolour;
           ^
MATLAB/software/nauty26r7/watercluster2.c:2069:13: style: The scope of the variable 'k' can be reduced. [variableScope]
  int i, j, k, top, localblocklength, number_orbits, remembertobedirected, center, end, group_OK;
            ^
MATLAB/software/nauty26r7/watercluster2.c:2069:16: style: The scope of the variable 'top' can be reduced. [variableScope]
  int i, j, k, top, localblocklength, number_orbits, remembertobedirected, center, end, group_OK;
               ^
MATLAB/software/nauty26r7/watercluster2.c:2069:54: style: The scope of the variable 'remembertobedirected' can be reduced. [variableScope]
  int i, j, k, top, localblocklength, number_orbits, remembertobedirected, center, end, group_OK;
                                                     ^
MATLAB/software/nauty26r7/watercluster2.c:2069:76: style: The scope of the variable 'center' can be reduced. [variableScope]
  int i, j, k, top, localblocklength, number_orbits, remembertobedirected, center, end, group_OK;
                                                                           ^
MATLAB/software/nauty26r7/watercluster2.c:2277:10: style: The scope of the variable 'start' can be reduced. [variableScope]
  int i, start, end;
         ^
MATLAB/software/nauty26r7/watercluster2.c:2277:17: style: The scope of the variable 'end' can be reduced. [variableScope]
  int i, start, end;
                ^
MATLAB/software/nauty26r7/watercluster2.c:2344:54: style: The scope of the variable 'start' can be reduced. [variableScope]
  int last_positie,i, buffer, olddeg, newdeg, beste, start, end;
                                                     ^
MATLAB/software/nauty26r7/watercluster2.c:2426:54: style: The scope of the variable 'start' can be reduced. [variableScope]
  int last_positie,i, buffer, olddeg, newdeg, beste, start, end;
                                                     ^
MATLAB/software/nauty26r7/watercluster2.c:2627:12: style: The scope of the variable 'a' can be reduced. [variableScope]
{ int i, j,a,b,pos2;
           ^
MATLAB/software/nauty26r7/watercluster2.c:2627:14: style: The scope of the variable 'b' can be reduced. [variableScope]
{ int i, j,a,b,pos2;
             ^
MATLAB/software/nauty26r7/watercluster2.c:2808:22: style: The scope of the variable 'dummy' can be reduced. [variableScope]
{  int i, orbitsize, dummy, k,j,complete,start,end, biggest_orbit=0;
                     ^
MATLAB/software/nauty26r7/watercluster2.c:2812:9: style: The scope of the variable 'buffergraph' can be reduced. [variableScope]
  graph buffergraph[MAXN];
        ^
MATLAB/software/nauty26r7/watercluster2.c:2944:22: style: The scope of the variable 'dummy' can be reduced. [variableScope]
{  int i, orbitsize, dummy, k,j,biggest_orbit;
                     ^
MATLAB/software/nauty26r7/watercluster2.c:3012:5: style: The scope of the variable 'number' can be reduced. [variableScope]
int number[2*MAX_BOGEN], number_of_candidates;
    ^
MATLAB/software/nauty26r7/watercluster2.c:3013:16: style: The scope of the variable 'n_ext' can be reduced. [variableScope]
int buffersize,n_ext;
               ^
MATLAB/software/nauty26r7/watercluster2.c:3014:18: style: The scope of the variable 'problem' can be reduced. [variableScope]
int i,start,end, problem, sum, maxsum;
                 ^
MATLAB/software/nauty26r7/watercluster2.c:3108:21: style: The scope of the variable 'sum' can be reduced. [variableScope]
  int referencesum, sum, gotacandidate, endquality, lq, eq, expensivequality;
                    ^
MATLAB/software/nauty26r7/watercluster2.c:3273:10: style: The scope of the variable 'start' can be reduced. [variableScope]
  int i, start, end;
         ^
MATLAB/software/nauty26r7/watercluster2.c:3273:17: style: The scope of the variable 'end' can be reduced. [variableScope]
  int i, start, end;
                ^
MATLAB/software/nauty26r7/watercluster2.c:3404:10: style: The scope of the variable 'type' can be reduced. [variableScope]
  int i, type, start, end, positie;
         ^
MATLAB/software/nauty26r7/watercluster2.c:3404:16: style: The scope of the variable 'start' can be reduced. [variableScope]
  int i, type, start, end, positie;
               ^
MATLAB/software/nauty26r7/watercluster2.c:3404:23: style: The scope of the variable 'end' can be reduced. [variableScope]
  int i, type, start, end, positie;
                      ^
MATLAB/software/nauty26r7/watercluster2.c:3404:28: style: The scope of the variable 'positie' can be reduced. [variableScope]
  int i, type, start, end, positie;
                           ^
MATLAB/software/nauty26r7/watercluster2.c:3460:47: style: The scope of the variable 'buf' can be reduced. [variableScope]
  unsigned int nonequivextensions[MAXPAROPS], buf;
                                              ^
MATLAB/software/nauty26r7/watercluster2.c:3549:11: style: The scope of the variable 'start' can be reduced. [variableScope]
  int i,j,start,end, number_of_extensions, problem, forcelistlen;
          ^
MATLAB/software/nauty26r7/watercluster2.c:3549:17: style: The scope of the variable 'end' can be reduced. [variableScope]
  int i,j,start,end, number_of_extensions, problem, forcelistlen;
                ^
MATLAB/software/nauty26r7/watercluster2.c:3551:7: style: The scope of the variable 'marklist' can be reduced. [variableScope]
  int marklist[MAX_BOGEN], marklistend;
      ^
MATLAB/software/nauty26r7/watercluster2.c:3621:18: style: The scope of the variable 'dummy' can be reduced. [variableScope]
  graph reached, dummy;
                 ^
MATLAB/software/nauty26r7/watercluster2.c:3728:51: style: The scope of the variable 'dummy' can be reduced. [variableScope]
  int i, j, k, orbitsize, start, end, fixed_edge, dummy, maxgraphdeg, biggest_orbit;
                                                  ^
MATLAB/software/nauty26r7/watercluster2.c:1431:23: style: Local variable 'orbits' shadows outer variable [shadowVariable]
  int i,j,buffer,run, orbits, index;
                      ^
MATLAB/software/nauty26r7/watercluster2.c:186:65: note: Shadowed declaration
nvector lab[MAX_BOGEN][MAXN]={{0}}, ptn[MAX_BOGEN][MAXN]={{0}}, orbits[MAX_BOGEN], colour[MAX_BOGEN][MAXN]={{0}};
                                                                ^
MATLAB/software/nauty26r7/watercluster2.c:1431:23: note: Shadow variable
  int i,j,buffer,run, orbits, index;
                      ^
MATLAB/software/nauty26r7/watercluster2.c:1517:24: style: Local variable 'edgelist' shadows outer variable [shadowVariable]
  int edgelistcounter, edgelist[2*MAXN*MAXN][2], orb[2*MAXN*MAXN], canoncenter, canonend, endvertex=0;
                       ^
MATLAB/software/nauty26r7/watercluster2.c:92:6: note: Shadowed declaration
BOOG edgelist[MAX_BOGEN+1]; /* de lijst van bogen */
     ^
MATLAB/software/nauty26r7/watercluster2.c:1517:24: note: Shadow variable
  int edgelistcounter, edgelist[2*MAXN*MAXN][2], orb[2*MAXN*MAXN], canoncenter, canonend, endvertex=0;
                       ^
MATLAB/software/nauty26r7/watercluster2.c:1521:12: style: Local variable 'colour' shadows outer variable [shadowVariable]
  nvector *colour;
           ^
MATLAB/software/nauty26r7/watercluster2.c:186:84: note: Shadowed declaration
nvector lab[MAX_BOGEN][MAXN]={{0}}, ptn[MAX_BOGEN][MAXN]={{0}}, orbits[MAX_BOGEN], colour[MAX_BOGEN][MAXN]={{0}};
                                                                                   ^
MATLAB/software/nauty26r7/watercluster2.c:1521:12: note: Shadow variable
  nvector *colour;
           ^
MATLAB/software/nauty26r7/watercluster2.c:1789:12: style: Local variable 'colour' shadows outer variable [shadowVariable]
  nvector *colour;
           ^
MATLAB/software/nauty26r7/watercluster2.c:186:84: note: Shadowed declaration
nvector lab[MAX_BOGEN][MAXN]={{0}}, ptn[MAX_BOGEN][MAXN]={{0}}, orbits[MAX_BOGEN], colour[MAX_BOGEN][MAXN]={{0}};
                                                                                   ^
MATLAB/software/nauty26r7/watercluster2.c:1789:12: note: Shadow variable
  nvector *colour;
           ^
MATLAB/software/nauty26r7/watercluster2.c:1968:7: style: Local variable 'colour' shadows outer variable [shadowVariable]
  int colour[MAXN],numbercolour[MAXN], element[MAXN], diffcolours;
      ^
MATLAB/software/nauty26r7/watercluster2.c:186:84: note: Shadowed declaration
nvector lab[MAX_BOGEN][MAXN]={{0}}, ptn[MAX_BOGEN][MAXN]={{0}}, orbits[MAX_BOGEN], colour[MAX_BOGEN][MAXN]={{0}};
                                                                                   ^
MATLAB/software/nauty26r7/watercluster2.c:1968:7: note: Shadow variable
  int colour[MAXN],numbercolour[MAXN], element[MAXN], diffcolours;
      ^
MATLAB/software/nauty26r7/watercluster2.c:2602:7: style: Local variable 'positie' shadows outer variable [shadowVariable]
  int positie[2*MAX_BOGEN][2*MAX_BOGEN];
      ^
MATLAB/software/nauty26r7/watercluster2.c:132:5: note: Shadowed declaration
int positie[MAXN][MAXN]; /* the value of positie[i][j] is the position of edge {1,j} in edgelist in case of
    ^
MATLAB/software/nauty26r7/watercluster2.c:2602:7: note: Shadow variable
  int positie[2*MAX_BOGEN][2*MAX_BOGEN];
      ^
MATLAB/software/nauty26r7/watercluster2.c:2629:7: style: Local variable 'positie' shadows outer variable [shadowVariable]
  int positie[2*MAX_BOGEN][2*MAX_BOGEN];
      ^
MATLAB/software/nauty26r7/watercluster2.c:132:5: note: Shadowed declaration
int positie[MAXN][MAXN]; /* the value of positie[i][j] is the position of edge {1,j} in edgelist in case of
    ^
MATLAB/software/nauty26r7/watercluster2.c:2629:7: note: Shadow variable
  int positie[2*MAX_BOGEN][2*MAX_BOGEN];
      ^
MATLAB/software/nauty26r7/watercluster2.c:2664:7: style: Local variable 'positie' shadows outer variable [shadowVariable]
  int positie[2*MAX_BOGEN][2*MAX_BOGEN];
      ^
MATLAB/software/nauty26r7/watercluster2.c:132:5: note: Shadowed declaration
int positie[MAXN][MAXN]; /* the value of positie[i][j] is the position of edge {1,j} in edgelist in case of
    ^
MATLAB/software/nauty26r7/watercluster2.c:2664:7: note: Shadow variable
  int positie[2*MAX_BOGEN][2*MAX_BOGEN];
      ^
MATLAB/software/nauty26r7/watercluster2.c:3404:28: style: Local variable 'positie' shadows outer variable [shadowVariable]
  int i, type, start, end, positie;
                           ^
MATLAB/software/nauty26r7/watercluster2.c:132:5: note: Shadowed declaration
int positie[MAXN][MAXN]; /* the value of positie[i][j] is the position of edge {1,j} in edgelist in case of
    ^
MATLAB/software/nauty26r7/watercluster2.c:3404:28: note: Shadow variable
  int i, type, start, end, positie;
                           ^
MATLAB/software/nauty26r7/watercluster2.c:3428:42: style: Local variable 'orbits' shadows outer variable [shadowVariable]
  int root[MAXPAROPS], i, j, pos1, pos2, orbits, buf;
                                         ^
MATLAB/software/nauty26r7/watercluster2.c:186:65: note: Shadowed declaration
nvector lab[MAX_BOGEN][MAXN]={{0}}, ptn[MAX_BOGEN][MAXN]={{0}}, orbits[MAX_BOGEN], colour[MAX_BOGEN][MAXN]={{0}};
                                                                ^
MATLAB/software/nauty26r7/watercluster2.c:3428:42: note: Shadow variable
  int root[MAXPAROPS], i, j, pos1, pos2, orbits, buf;
                                         ^
MATLAB/software/nauty26r7/watercluster2.c:3652:7: style: Local variable 'deg' shadows outer variable [shadowVariable]
  int deg[MAXN];
      ^
MATLAB/software/nauty26r7/watercluster2.c:198:5: note: Shadowed declaration
int deg[MAXN]={0}, outdeg[MAXN]={0}, indeg[MAXN]={0};
    ^
MATLAB/software/nauty26r7/watercluster2.c:3652:7: note: Shadow variable
  int deg[MAXN];
      ^
MATLAB/software/nauty26r7/watercluster2.c:3782:32: error: Uninitialized variable: orbitsize [uninitvar]
  if ((stats.numorbits==n) || (orbitsize==0)) /* trviale groep */
                               ^
MATLAB/software/nauty26r7/watercluster2.c:1211:20: style: Variable 'lowerlimit_outdeg' is assigned a value that is never used. [unreadVariable]
  lowerlimit_outdeg=0;
                   ^
MATLAB/software/nauty26r7/watercluster2.c:1739:6: style: Variable 'min' is assigned a value that is never used. [unreadVariable]
  min=INFTY_UCHAR;
     ^
MATLAB/software/nauty26r7/watercluster2.c:4014:21: style: Variable 'last' is assigned a value that is never used. [unreadVariable]
  long long int last=0LL;
                    ^
MATLAB/software/nauty26r7/watercluster2.c:4063:11: style: Variable 'last' is assigned a value that is never used. [unreadVariable]
      last=aantal_gerichte_grafen;
          ^
MATLAB/software/nauty26r7/watercluster2.c:92:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
BOOG edgelist[MAX_BOGEN+1]; /* de lijst van bogen */
^
MATLAB/software/nauty26r7/watercluster2.c:93:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
BOOG edgelist_final[MAX_BOGEN+1]; /* de lijst van bogen die nadat er eerst nontriviale automorphismen waren die dan
^
MATLAB/software/nauty26r7/watercluster2.c:100:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int *root_op=NULL, size_root=0, blocklength, orbitblocklength[MAXN], size_operations=0, number_operations=0;
^
MATLAB/software/nauty26r7/watercluster2.c:110:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
unsigned char *remember_operations[MAXN]; //the nonequivalent operations that are stored for every iteration
^
MATLAB/software/nauty26r7/watercluster2.c:111:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int remember_size[MAXN]; // remember_size[i] is the number of characters allocated for remember_operations[i]
^
MATLAB/software/nauty26r7/watercluster2.c:126:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int is_gericht[MAX_BOGEN][MAX_BOGEN]={{0}}; /*  is_gericht[i][j]==1 als {i,j} is al gericht -- anders 0 */
^
MATLAB/software/nauty26r7/watercluster2.c:127:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int virtual_gericht[MAX_BOGEN][MAX_BOGEN]={{0}}; /*  virtual_gericht[i][j]==1 als het al vastgelegd is dat {i,j}
^
MATLAB/software/nauty26r7/watercluster2.c:132:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int positie[MAXN][MAXN]; /* the value of positie[i][j] is the position of edge {1,j} in edgelist in case of
^
MATLAB/software/nauty26r7/watercluster2.c:135:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int virtual_indeg[MAXN], virtual_outdeg[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:176:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int _marks[MAX_BOGEN], _markvalue=INT_MAX;
^
MATLAB/software/nauty26r7/watercluster2.c:183:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
long long int onlevel[MAX_BOGEN]={0};
^
MATLAB/software/nauty26r7/watercluster2.c:186:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
nvector lab[MAX_BOGEN][MAXN]={{0}}, ptn[MAX_BOGEN][MAXN]={{0}}, orbits[MAX_BOGEN], colour[MAX_BOGEN][MAXN]={{0}};
^
MATLAB/software/nauty26r7/watercluster2.c:190:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int rememberorbits[MAXN][MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:192:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
nvector bufferlab[MAXN], bufferptn[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:193:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
graph canong[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:196:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
graph workg[MAXN], staticg[MAXN], canong[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:197:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
graph bit_orbit[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:198:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int deg[MAXN]={0}, outdeg[MAXN]={0}, indeg[MAXN]={0};
^
MATLAB/software/nauty26r7/watercluster2.c:199:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int tobedirected[MAXN]={0}; /* how many edges have still to be directed? This can
^
MATLAB/software/nauty26r7/watercluster2.c:207:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int double_free[MAXN]={0}; /* hoeveel dubbele bogen kan top [i] nog krijgen? */
^
MATLAB/software/nauty26r7/watercluster2.c:221:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
setword workspace[100*MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:223:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
permutation generators[MAXN][MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:227:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int indeg_free[MAXN]={0}, outdeg_free[MAXN]={0}, saturated[MAXN]={0};
^
MATLAB/software/nauty26r7/watercluster2.c:231:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int orbitchoices[MAXN]={0};
^
MATLAB/software/nauty26r7/watercluster2.c:249:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int maxindeg=MAXN, maxoutdeg=MAXN, maxdirectdeg=MAXN, nodegbound=1;
^
MATLAB/software/nauty26r7/watercluster2.c:322:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     int lijst[MAXN][MAXN], lengte[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:601:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int list[MAXN][MAXN], listlen[MAXN]={0}; /* list[i] contains the vertices with degree i at that moment */
^
MATLAB/software/nauty26r7/watercluster2.c:602:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int toppositie[MAXN], bufferdeg[MAXN]; /* toppositie[i] is de positie van top i in de lijst */
^
MATLAB/software/nauty26r7/watercluster2.c:603:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int buren[MAXN]; /* de buren van de top waaraan gewerkt wordt */
^
MATLAB/software/nauty26r7/watercluster2.c:604:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  graph dummy[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:951:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int in_image[MAXN], out_image[MAXN], double_image[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:1202:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int top, top2, j, end, list[MAXN], decided[MAXN], error, lowerlimit_outdeg, readylist[MAXN], *readyrun, dummy;
^
MATLAB/software/nauty26r7/watercluster2.c:1204:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  unsigned char buffer[MAXN+4];
^
MATLAB/software/nauty26r7/watercluster2.c:1432:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  unsigned char image[MAXN+4];
^
MATLAB/software/nauty26r7/watercluster2.c:1515:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
{ int i, j, k, min, top, buffer, candidatelist[MAXN], number_candidates, center;
^
MATLAB/software/nauty26r7/watercluster2.c:1517:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int edgelistcounter, edgelist[2*MAXN*MAXN][2], orb[2*MAXN*MAXN], canoncenter, canonend, endvertex=0;
^
MATLAB/software/nauty26r7/watercluster2.c:1518:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int finished[MAXN], finishedptn[MAXN], testoutdeg;
^
MATLAB/software/nauty26r7/watercluster2.c:1519:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int startlist[MAXN], *startrun; // list of possible starts in case of no candidates
^
MATLAB/software/nauty26r7/watercluster2.c:1520:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int numberends, ends[MAXN][MAXN], endin=0, *run;
^
MATLAB/software/nauty26r7/watercluster2.c:1708:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  nauty(workg,bufferlab,bufferptn,NILSET,orbits,&options_directed_canon,&stats,workspace,100*MAXN,1,aantal_toppen,canong);
^
MATLAB/software/nauty26r7/watercluster2.c:1834:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int list[MAXN][MAXN], listlen[MAXN]={0}; /* list[i] contains the vertices with degree i at that moment */
^
MATLAB/software/nauty26r7/watercluster2.c:1835:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int toppositie[MAXN], bufferdeg[MAXN]; /* toppositie[i] is de positie van top i in de lijst */
^
MATLAB/software/nauty26r7/watercluster2.c:1836:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int buren[MAXN]; /* de buren van de top waaraan gewerkt wordt */
^
MATLAB/software/nauty26r7/watercluster2.c:1837:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  graph g[MAXN], notready;
^
MATLAB/software/nauty26r7/watercluster2.c:1898:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
{ int i,j,k, num_in_orbit[MAXN], dummy, inorbit[MAXN][MAXN], best, bestroot=0;
^
MATLAB/software/nauty26r7/watercluster2.c:1966:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int local_todolist[MAXN+1];
^
MATLAB/software/nauty26r7/watercluster2.c:1968:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int colour[MAXN],numbercolour[MAXN], element[MAXN], diffcolours;
^
MATLAB/software/nauty26r7/watercluster2.c:2029:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   nauty(workg,bufferlab,bufferptn,NILSET,orbits,&options_directed,&stats,workspace,100*MAXN,1,aantal_toppen,NULL);
^
MATLAB/software/nauty26r7/watercluster2.c:2071:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int local_todolist[MAXN+1], local_left_to_do, first_in_orbit, doit;
^
MATLAB/software/nauty26r7/watercluster2.c:2072:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int finished[MAXN], finishedptn[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:2138:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
       nauty(workg,bufferlab,bufferptn,NILSET,orbits,&options_directed,&stats,workspace,100*MAXN,1,aantal_toppen,NULL);
^
MATLAB/software/nauty26r7/watercluster2.c:2238:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int i,best_orbit[MAXN+1];
^
MATLAB/software/nauty26r7/watercluster2.c:2239:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int num_in_orbit[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:2320:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  graph g[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:2345:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int list[MAXN][MAXN], listlen[MAXN]={0}; /* list[i] contains the vertices with degree i at that moment */
^
MATLAB/software/nauty26r7/watercluster2.c:2346:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int toppositie[MAXN], bufferdeg[MAXN]; /* toppositie[i] is de positie van top i in de lijst */
^
MATLAB/software/nauty26r7/watercluster2.c:2347:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int buren[MAXN]; /* de buren van de top waaraan gewerkt wordt */
^
MATLAB/software/nauty26r7/watercluster2.c:2348:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  graph g[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:2401:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  graph g[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:2427:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int list[MAXN][MAXN], listlen[MAXN]={0}; /* list[i] contains the vertices with degree i at that moment */
^
MATLAB/software/nauty26r7/watercluster2.c:2428:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int toppositie[MAXN], bufferdeg[MAXN]; /* toppositie[i] is de positie van top i in de lijst */
^
MATLAB/software/nauty26r7/watercluster2.c:2429:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int buren[MAXN]; /* de buren van de top waaraan gewerkt wordt */
^
MATLAB/software/nauty26r7/watercluster2.c:2430:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  graph g[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:2478:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
void  mark_components(int graaf[][MAXN],int adj[],int aantal_toppen,int number[])
^
MATLAB/software/nauty26r7/watercluster2.c:2483:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int i,j,min, lijst[MAX_BOGEN], buffer, b;
^
MATLAB/software/nauty26r7/watercluster2.c:2486:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  RESETMARKS
^
MATLAB/software/nauty26r7/watercluster2.c:2528:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int graaf[MAX_BOGEN][MAXN], adj[MAX_BOGEN];
^
MATLAB/software/nauty26r7/watercluster2.c:2563:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int graaf[MAX_BOGEN][MAXN], adj[MAX_BOGEN];
^
MATLAB/software/nauty26r7/watercluster2.c:2602:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int positie[2*MAX_BOGEN][2*MAX_BOGEN];
^
MATLAB/software/nauty26r7/watercluster2.c:2603:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int graaf[MAX_BOGEN][MAXN], adj[MAX_BOGEN];
^
MATLAB/software/nauty26r7/watercluster2.c:2629:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int positie[2*MAX_BOGEN][2*MAX_BOGEN];
^
MATLAB/software/nauty26r7/watercluster2.c:2630:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int graaf[MAX_BOGEN][MAXN], adj[MAX_BOGEN];
^
MATLAB/software/nauty26r7/watercluster2.c:2664:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int positie[2*MAX_BOGEN][2*MAX_BOGEN];
^
MATLAB/software/nauty26r7/watercluster2.c:2665:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int graaf[MAX_BOGEN][MAXN], adj[MAX_BOGEN];
^
MATLAB/software/nauty26r7/watercluster2.c:2705:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int i,j, number[MAX_BOGEN],aantallen[MAX_BOGEN];
^
MATLAB/software/nauty26r7/watercluster2.c:2760:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int i,j, number[MAX_BOGEN],aantallen[MAX_BOGEN];
^
MATLAB/software/nauty26r7/watercluster2.c:2809:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  BOOG kleinste_orbit[MAX_BOGEN+1];
^
MATLAB/software/nauty26r7/watercluster2.c:2810:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  BOOG al_gericht[MAX_BOGEN+1];
^
MATLAB/software/nauty26r7/watercluster2.c:2811:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int inorbit[MAXN][MAXN], numberinorbit[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:2812:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  graph buffergraph[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:2848:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  nauty(workg,bufferlab,bufferptn,NILSET,orbits,&options_directed,&stats,workspace,100*MAXN,1,aantal_toppen,NULL);
^
MATLAB/software/nauty26r7/watercluster2.c:2945:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  BOOG kleinste_orbit[MAX_BOGEN+1];
^
MATLAB/software/nauty26r7/watercluster2.c:2946:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int inorbit[MAXN][MAXN], numberinorbit[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:2955:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  nauty(workg,bufferlab,bufferptn,NILSET,orbits,&options_directed,&stats,workspace,100*MAXN,1,aantal_toppen,NULL);
^
MATLAB/software/nauty26r7/watercluster2.c:3010:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
BOOG bufferlist[2*MAX_BOGEN];
^
MATLAB/software/nauty26r7/watercluster2.c:3011:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
BOOG candidatelist[MAX_BOGEN];
^
MATLAB/software/nauty26r7/watercluster2.c:3012:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
int number[2*MAX_BOGEN], number_of_candidates;
^
MATLAB/software/nauty26r7/watercluster2.c:3059:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 nauty(workg,bufferlab,bufferptn,NILSET,orbits,&options_directed_canon,&stats,\
^
MATLAB/software/nauty26r7/watercluster2.c:3105:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int canonnumber[MAXN],x,y;
^
MATLAB/software/nauty26r7/watercluster2.c:3106:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int number[MAX_BOGEN];
^
MATLAB/software/nauty26r7/watercluster2.c:3107:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int candidate[MAX_BOGEN];
^
MATLAB/software/nauty26r7/watercluster2.c:3148:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  nauty(workg,bufferlab,bufferptn,NILSET,orbits,&options_directed_canon,&stats,\
^
MATLAB/software/nauty26r7/watercluster2.c:3184:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int list[2*MAXN+2], richting[3*MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:3388:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int numberin[MAXN], numberout[MAXN], numberdouble[MAXN], i;
^
MATLAB/software/nauty26r7/watercluster2.c:3402:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
unsigned int par_image(unsigned int orig, permutation aut[], BOOG orbit[], int orbitsize, int inv[][MAXN])
^
MATLAB/software/nauty26r7/watercluster2.c:3430:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int inv[MAXN][MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:3467:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      nauty(workg,bufferlab,bufferptn,NILSET,orbits,&options_directed_canon,&stats, \
^
MATLAB/software/nauty26r7/watercluster2.c:3550:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  BOOG extensionlist[2*MAX_BOGEN], forcelist[MAX_BOGEN];
^
MATLAB/software/nauty26r7/watercluster2.c:3551:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int marklist[MAX_BOGEN], marklistend;
^
MATLAB/software/nauty26r7/watercluster2.c:3620:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int i, list[MAXN], length, j;
^
MATLAB/software/nauty26r7/watercluster2.c:3651:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  graph g[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:3652:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int deg[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:3655:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int list[2*MAXN]; /* de lijst van toppen. In het begin staan ze er allemaal in. Als er een top al bekeken is
^
MATLAB/software/nauty26r7/watercluster2.c:3699:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  RESETMARKS
^
MATLAB/software/nauty26r7/watercluster2.c:3729:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  BOOG kleinste_orbit[MAX_BOGEN+1];  /* het is mogelijk dat er maar 1 orbit is */
^
MATLAB/software/nauty26r7/watercluster2.c:3730:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  BOOG al_gericht[MAX_BOGEN+1];
^
MATLAB/software/nauty26r7/watercluster2.c:3731:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  int inorbit[MAXN][MAXN], numberinorbit[MAXN];
^
MATLAB/software/nauty26r7/watercluster2.c:3746:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  nauty(staticg,bufferlab,bufferptn,NILSET,orbits,&options,&stats,workspace,100*MAXN,1,n,NULL);
^
MATLAB/software/nauty26r7/watercluster2.c:3957:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  nauty(workg,bufferlab,bufferptn,NILSET,orbits,&options,&stats,workspace,100*MAXN,1,aantal_toppen,NULL);
^
MATLAB/software/nauty26r7/watercluster2.c:3990:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  for (i=0; i<MAXN; i++)
^
MATLAB/software/nauty26r7/watercluster2.c:4054:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      if (aantal_toppen>=MAXN)
^
MATLAB/software/nauty26r7/watercluster2.c:4055:0: information: Skipping configuration 'MAXN' since the value of 'MAXN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 { fprintf(stderr,"At most %d vertices possible -- exiting.\n",MAXN-1);
^
MATLAB/software/nauty26r7/watercluster2.c:79:0: information: Skipping configuration 'PROCESS' since the value of 'PROCESS' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern void PROCESS(FILE*,graph*,int);
^
MATLAB/software/nauty26r7/watercluster2.c:268:0: information: Skipping configuration 'PROCESS' since the value of 'PROCESS' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     PROCESS(stdout,g,aantal_toppen);
^
MATLAB/software/nauty26r7/watercluster2.c:278:0: information: Skipping configuration 'PROCESS' since the value of 'PROCESS' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          PROCESS(stdout,gconv,aantal_toppen);
^
MATLAB/software/nauty26r7/watercluster2.c:83:0: information: Skipping configuration 'SUMMARY' since the value of 'SUMMARY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern void SUMMARY(void);
^
MATLAB/software/nauty26r7/watercluster2.c:4071:0: information: Skipping configuration 'SUMMARY' since the value of 'SUMMARY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  SUMMARY();
^
MATLAB/software/LINE/linux/concatenate.cpp:13:1: error: The one definition rule is violated, different classes/structs have the same name 'ClassVertex' [ctuOneDefinitionRuleViolation]
struct ClassVertex {
^
MATLAB/software/LINE/linux/reconstruct.cpp:16:1: note: The one definition rule is violated, different classes/structs have the same name 'ClassVertex'
struct ClassVertex
^
MATLAB/software/LINE/linux/concatenate.cpp:13:1: note: The one definition rule is violated, different classes/structs have the same name 'ClassVertex'
struct ClassVertex {
^
MATLAB/software/LINE/linux/concatenate.cpp:13:1: error: The one definition rule is violated, different classes/structs have the same name 'ClassVertex' [ctuOneDefinitionRuleViolation]
struct ClassVertex {
^
MATLAB/software/LINE/windows/reconstruct.cpp:16:1: note: The one definition rule is violated, different classes/structs have the same name 'ClassVertex'
struct ClassVertex
^
MATLAB/software/LINE/linux/concatenate.cpp:13:1: note: The one definition rule is violated, different classes/structs have the same name 'ClassVertex'
struct ClassVertex {
^
MATLAB/software/nauty26r7/gtools.c:1187:5: warning: Null pointer dereference: sg [ctunullpointer]
    sg->nv = n;
    ^
MATLAB/software/nauty26r7/gtools.c:1496:64: note: Assuming that condition '(sg=(struct sparsegraph*)malloc((unsigned long)(1)*(unsigned long)(sizeof(struct sparsegraph))))==NULL' is not redundant

                                                               ^
MATLAB/software/nauty26r7/gtools.c:1501:24: note: Calling function stringtosparsegraph, 2nd argument is null
    stringtosparsegraph(s,sg,&loops);
                       ^
MATLAB/software/nauty26r7/gtools.c:1187:5: note: Dereferencing argument sg that is null
    sg->nv = n;
    ^
MATLAB/software/nauty26r7/traces.c:6245:0: style: The function 'Complete' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/traces.c:8630:0: style: The function 'MakeDiscrete' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/callgeng.c:15:0: style: The function 'OUTPROC' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/traces.c:9189:0: style: The function 'Preprocess_refine' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/traces.c:9477:0: style: The function 'PrintBlissGraph' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/traces.c:9443:0: style: The function 'PrintWeightedGraph1' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/traces.c:9461:0: style: The function 'PrintWeightedGraph2' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/traces.c:9794:0: style: The function 'SetAutom' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/traces.c:10487:0: style: The function 'TargetCellExpPathSmall' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/traces.c:10521:0: style: The function 'TargetCellFirstPathSmall' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/traces.c:10453:0: style: The function 'TargetCellSmall' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/traces.c:10306:0: style: The function 'VerifyCand' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/traces.c:10321:0: style: The function 'VerifyId' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/traces.c:10334:0: style: The function 'VerifyPart' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/traces.c:10353:0: style: The function 'VerifyPerm' is never used. [unusedFunction]

^
MATLAB/software/libsvm-3.22/svm-toy/windows/svm-toy.cpp:58:0: style: The function 'WinMain' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/naugroup.c:498:0: style: The function 'allgroup3' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/gtools.c:2579:0: style: The function 'arg_double' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/cubhamg.c:1446:0: style: The function 'biconnected_v' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/cubhamg.c:195:0: style: The function 'check_it' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/gtools.c:998:0: style: The function 'checkgline' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/nausparse.c:558:0: style: The function 'cleanup_sg' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/nautaux.c:167:0: style: The function 'component' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/schreier.c:340:0: style: The function 'condaddgenerator' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/gutil1.c:9:0: style: The function 'degstats' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/twohamg.c:136:0: style: The function 'dumpdata' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/schreier.c:951:0: style: The function 'dumpschreier' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:1530:0: style: The function 'embedg_VES_is_back_edge' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:6871:0: style: The function 'embedg_VES_print' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:1800:0: style: The function 'embedg_VES_print_adj_list' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:1639:0: style: The function 'embedg_VES_print_flipped_edges' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:2185:0: style: The function 'embedg_dlcl_rec_insert_right' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:3590:0: style: The function 'embedg_merge_queue_append' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:3577:0: style: The function 'embedg_merge_queue_print' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/nautaux.c:108:0: style: The function 'equitable' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/nauty.c:1169:0: style: The function 'extra_autom' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/nauty.c:1187:0: style: The function 'extra_level' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/gtnauty.c:390:0: style: The function 'fgroup' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/gtnauty.c:480:0: style: The function 'fgroup_inv' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/gutil1.c:702:0: style: The function 'find_dist2' is never used. [unusedFunction]

^
MATLAB/software/liblinear-2.1/linear.cpp:2963:0: style: The function 'get_decfun_bias' is never used. [unusedFunction]

^
MATLAB/software/liblinear-2.1/linear.cpp:2956:0: style: The function 'get_decfun_coef' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/gtools.c:401:0: style: The function 'getecline' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/naututil.c:347:0: style: The function 'getint' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/schreier.c:1031:0: style: The function 'grouporder' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/cubhamg.c:1532:0: style: The function 'gtocub' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/naugstrings.c:85:0: style: The function 'gtod6string' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/naugstrings.c:43:0: style: The function 'gtog6string' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/naugstrings.c:127:0: style: The function 'gtois6string' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/naututil.c:2112:0: style: The function 'hash' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/gutil1.c:308:0: style: The function 'issubconnected' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/gtnauty.c:615:0: style: The function 'istransitive' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/watercluster2.c:2622:0: style: The function 'mark_orbitnumbers_only_directed' is never used. [unusedFunction]

^
MATLAB/canonical.c:13:0: style: The function 'mexFunction' is never used. [unusedFunction]

^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:414:0: style: The function 'mousePressEvent' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/nautaux.c:210:0: style: The function 'nautaux_check' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/nautaux.c:246:0: style: The function 'nautaux_freedyn' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/nautinv.c:1519:0: style: The function 'nautinv_freedyn' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/naututil.c:3176:0: style: The function 'naututil_freedyn' is never used. [unusedFunction]

^
MATLAB/software/liblinear-2.1/tron.cpp:229:0: style: The function 'norm_inf' is never used. [unusedFunction]

^
MATLAB/software/libsvm-3.22/svm-toy/qt/svm-toy.cpp:421:0: style: The function 'paintEvent' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/naugroup.c:278:0: style: The function 'permcycles' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/nautaux.c:55:0: style: The function 'ptncode' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/nausparse.c:1322:0: style: The function 'put_sg' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/traces.c:9493:0: style: The function 'putgraphplus_sg' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/naututil.c:1386:0: style: The function 'putorbitsplus' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/naututil.c:2795:0: style: The function 'rangraph2' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/gtools.c:1142:0: style: The function 'readg_inc' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/naututil.c:925:0: style: The function 'readgraph_swg' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/gtools.c:2259:0: style: The function 'readpc_sg' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/gtools.c:2347:0: style: The function 'readpcle_sg' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/naututil.c:2134:0: style: The function 'readperm' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/schreier.c:936:0: style: The function 'schreier_gens' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/naugstrings.c:488:0: style: The function 'sgtod6string' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/naugstrings.c:447:0: style: The function 'sgtog6string' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/naugstrings.c:339:0: style: The function 'sgtos6string' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:618:0: style: The function 'sparseg_adjl_add_edge' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:670:0: style: The function 'sparseg_adjl_add_edge_no_extend' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:894:0: style: The function 'sparseg_adjl_add_vertices' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:301:0: style: The function 'sparseg_adjl_edges' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:165:0: style: The function 'sparseg_adjl_embed_print' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:1174:0: style: The function 'sparseg_adjl_eq' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:99:0: style: The function 'sparseg_adjl_footprint' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:47:0: style: The function 'sparseg_adjl_plan_and_iso' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:133:0: style: The function 'sparseg_adjl_print' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:782:0: style: The function 'sparseg_adjl_remove_edge_no_red' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:923:0: style: The function 'sparseg_adjl_remove_vertex' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:220:0: style: The function 'sparseg_adjl_to_nauty_graph' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:1092:0: style: The function 'sparseg_adjl_u_adj_v' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:1246:0: style: The function 'sparseg_dlcl_print' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/planarity.c:1346:0: style: The function 'sparseg_dlcl_sub' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/splay.c:341:0: style: The function 'splay_delete' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/splay.c:310:0: style: The function 'splay_lookup' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/gtools.c:524:0: style: The function 'stringcounts' is never used. [unusedFunction]

^
MATLAB/software/libsvm-3.22/svm.cpp:2484:0: style: The function 'svm_get_nr_sv' is never used. [unusedFunction]

^
MATLAB/software/libsvm-3.22/svm.cpp:2477:0: style: The function 'svm_get_sv_indices' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/nausparse.c:408:0: style: The function 'testcanlab_tr' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/schreier.c:53:0: style: The function 'testispermutation' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/gtnauty.c:711:0: style: The function 'tg_canonise' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/watercluster2.c:373:0: style: The function 'writegraph' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/watercluster2.c:2290:0: style: The function 'writegraph_edgeorb' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/watercluster2.c:336:0: style: The function 'writelab' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/watercluster2.c:366:0: style: The function 'writelist' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/watercluster2.c:2275:0: style: The function 'writeop' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/watercluster2.c:354:0: style: The function 'writeoperation' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/gtools.c:2180:0: style: The function 'writepc_sg' is never used. [unusedFunction]

^
MATLAB/software/nauty26r7/watercluster2.c:347:0: style: The function 'writeset' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

